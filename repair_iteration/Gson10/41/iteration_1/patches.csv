bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	9	None	replace
2	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
3	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
4	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	9	None	replace
5	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
6	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
7	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  type,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
8	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	replace
9	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
10	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	replace
11	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
12	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  type);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  type);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  type);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	replace
13	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
14	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
15	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	12	None	replace
16	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	12	None	replace
17	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	12	None	replace
18	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
19	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
20	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
21	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
23	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  isPrimitive);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	3	None	replace
24	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
25	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	11	None	replace
26	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
27	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
28	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
29	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	11	None	replace
30	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
31	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
32	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
33	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
34	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
35	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);	      	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
36	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
37	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fieldNames  =  getFieldNames(field);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field);	      	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ]);	      	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
39	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
40	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  i);	      	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
41	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getType());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getType());  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getType());	      	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
42	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
43	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	5	None	replace
44	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	5	None	replace
45	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	5	None	replace
46	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	1	None	replace
47	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	1	None	replace
48	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
49	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
50	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  description  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	13	None	replace
51	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	13	None	replace
52	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	13	None	replace
53	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
54	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	2	None	replace
55	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	2	None	replace
56	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	2	None	replace
57	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  names  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	2	None	replace
58	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
59	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
60	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
61	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
62	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
63	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
64	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [CE]  cannot  find  symbol  isPrivate  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrivate	10	None	replace
65	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
66	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
67	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
68	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
69	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  name,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  name,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
70	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
71	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
72	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
73	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
74	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	10	None	replace
75	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
76	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	8	None	replace
77	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
78	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	3	None	replace
79	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
80	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
81	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
82	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
83	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
84	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
85	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
86	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldName,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	replace
87	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	replace
88	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	4	None	replace
89	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
90	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
91	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  ]);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
92	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ];  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  ];	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
93	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  cannot  find  symbol  boundField	7	None	replace
94	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ]);	      	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
95	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
96	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	13	None	replace
97	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
98	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  names  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	13	None	replace
99	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
100	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
101	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	1	None	replace
102	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	8	None	replace
103	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	8	None	replace
104	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
105	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	13	None	replace
106	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	3	None	replace
107	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
108	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	4	None	replace
109	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	2	None	replace
110	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  ]);	      	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
111	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	      	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
112	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ]);	      	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	replace
113	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	10	None	replace
114	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
115	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	6	None	replace
116	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                    ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
117	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	5	None	replace
118	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]        ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	12	None	replace
119	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
120	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name    [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]    TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	12	None	replace
