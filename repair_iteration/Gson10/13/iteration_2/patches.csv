bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getConstructor();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getConstructor();	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	17	None	replace
2	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(),  gson);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  ';'  expected	17	None	replace
3	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getConstructor();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(0).getConstructor();	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
4	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(),  gson;  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(),  gson;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(),  gson;	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	17	None	replace
5	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor(gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	17	None	replace
6	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2).getConstructor();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2).getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(2).getConstructor();	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	17	None	replace
7	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getSuperClass();  [CE]  cannot  find  symbol  _types  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getSuperClass();	  Class    <?    super    T>    raw    =    types.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  _types	10	None	replace
8	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getSuperClass();  [CE]  cannot  find  symbol  types  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getSuperClass();	  Class    <?    super    T>    raw    =    types.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  types	10	None	replace
9	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getSuperClass();  [CE]  cannot  find  symbol  gen  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getSuperClass();	  Class    <?    super    T>    raw    =    types.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  gen	10	None	replace
10	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getSuperClass();  [CE]  cannot  find  symbol  generator  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getSuperClass();	  Class    <?    super    T>    raw    =    types.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  generator	10	None	replace
11	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializedName.getQualifiedName(),  type;  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializedName.getQualifiedName(),  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializedName.getQualifiedName(),  type;	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  cannot  find  symbol  serializedName	46	None	replace
12	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serialize.getQualifiedName(),  type;  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serialize.getQualifiedName(),  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serialize.getQualifiedName(),  type;	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  cannot  find  symbol  serialize	46	None	replace
13	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serialize;  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serialize;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName(),  serialize;	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
14	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName(),  serializedName;  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName(),  serializedName;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName(),  serializedName;	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
15	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName);	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  ';'  expected	46	None	replace
16	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName,  null;  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName,  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName,  null;	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
17	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getSuperClass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getSuperClass();	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getSuperClass();  [CE]  cannot  find  symbol  gson  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getSuperClass();	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  gson	6	None	replace
19	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getSuperClass();  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.type.getSuperClass();	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	6	None	replace
20	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperclass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
21	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null? "null "  :  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null? "null "  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null? "null "  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
22	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperclass()!=  null;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperclass()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperclass()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
23	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawSuperType()!=  null?  null  :  type.getRawSuperType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawSuperType()!=  null?  null  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawSuperType()!=  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
24	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperType();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	57	None	replace
25	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getRawSuperType();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	57	None	replace
26	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperType()!=  null?  null  :  type.getRawSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperType()!=  null?  null  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperType()!=  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
27	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperType()!=  null;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperType()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperType()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
28	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(raw);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
29	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(gson);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(gson);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
30	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(serializedName);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	95	None	replace
31	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(serializers);  [CE]  cannot  find  symbol  serializers  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(serializers);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(serializers);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  serializers	95	None	replace
32	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(this);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(this);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(this);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
33	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(size);  [CE]  cannot  find  symbol  size  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(size);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(size);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  size	95	None	replace
34	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawClass()  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawClass()  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawClass()  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
35	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  gson.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
36	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  scope.getRawClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  scope.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  scope.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
37	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  type.getRawClass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  ';'  expected	88	None	replace
38	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  types.getRawClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  types.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  types.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
39	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  decodeType(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  decodeType(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  decodeType(type.getRawClass());	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
40	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperClass()  :  type.getSuperClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperClass()  :  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperClass()  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
41	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  gson.getSuperClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  gson.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  gson.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
42	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type,  type.getSuperClass();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type,  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type,  type.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  ';'  expected	84	None	replace
43	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  scope.getSuperClass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  scope.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  scope.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
44	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  types.getSuperClass();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  types.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  types.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
45	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
46	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawSuperclass()  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawSuperclass()  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawSuperclass()  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
47	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  gson.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  gson.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  gson.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
48	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  type.getRawSuperclass();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  ';'  expected	90	None	replace
49	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawSuperclass()  :  gson.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawSuperclass()  :  gson.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getRawSuperclass()  :  gson.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
50	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  scope.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  scope.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  scope.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
51	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  types.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  types.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  types.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
52	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawSuperclass()!=  null?  null  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawSuperclass()!=  null?  null  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawSuperclass()!=  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
53	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperclass();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	replace
54	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getRawSuperclass();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	3	None	replace
55	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(gson);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	80	None	replace
56	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType(type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType(type);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	80	None	replace
57	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType(gson);  [CE]  cannot  find  symbol  types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawType(gson);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  types	80	None	replace
58	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType(type);  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawType(type);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  types	80	None	replace
59	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(type);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	80	None	replace
60	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType(gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType(gson);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	80	None	replace
61	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperType()!=  null?  null  :  type.getSuperType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperType()!=  null?  null  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperType()!=  null?  null  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
62	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperType()!=  null;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperType()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperType()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
63	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperType();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
64	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getType();  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.getType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.getType();	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  incompatible  types	72	None	replace
65	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getReturnType();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.getReturnType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getReturnType();	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
66	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getValue();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.getValue();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getValue();	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
67	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.type();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.type();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.type();	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
68	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperclass()  :  type;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperclass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperclass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
69	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  scope.getSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  scope.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  scope.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
70	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  types;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  types;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  types;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
71	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.EMPTY;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.EMPTY;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.EMPTY;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
72	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  gson.getSuperclass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  gson.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  gson.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
73	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  decodeType(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  decodeType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  decodeType(type);	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
74	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(type);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
75	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(gson,  type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(gson,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(gson,  type);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
76	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(raw);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(raw);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
77	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(serializedName);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	98	None	replace
78	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(raw,  type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(raw,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(raw,  type);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
79	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
80	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(gson,  type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(gson,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(gson,  type);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
81	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  type.getRawClass();  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  type.getRawClass();	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  ')'  expected	30	None	replace
82	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type.getRawClass();  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type.getRawClass();	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  ')'  expected	30	None	replace
83	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawClass()  :  type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawClass()  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawClass()  :  type.getRawClass();	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	30	None	replace
84	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  this.type.getRawClass();  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  this.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  this.type.getRawClass();	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  ')'  expected	30	None	replace
85	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getSuperType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getSuperType();	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  ';'  expected	22	None	replace
86	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getSuperType();  [CE]  cannot  find  symbol  gson  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getSuperType();	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  gson	22	None	replace
87	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getSuperType(gson).getSuperType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getSuperType(gson).getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getSuperType(gson).getSuperType();	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
88	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializedName.serializedName();  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializedName.serializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializedName.serializedName();	  Class    <?    super    T>    raw    =    type.serializedName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	82	None	replace
89	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.serializedName();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.serializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.serializedName();	  Class    <?    super    T>    raw    =    type.serializedName();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
90	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serialize.serializedName();  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serialize.serializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serialize.serializedName();	  Class    <?    super    T>    raw    =    type.serializedName();    	non-compiled	[CE]  cannot  find  symbol  serialize	82	None	replace
91	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.serialize();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.serialize();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.serialize();	  Class    <?    super    T>    raw    =    type.serializedName();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
92	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializedName.serialize();  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializedName.serialize();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializedName.serialize();	  Class    <?    super    T>    raw    =    type.serializedName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	82	None	replace
93	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getSuperclass();  [CE]  cannot  find  symbol  _types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getSuperclass();	  Class    <?    super    T>    raw    =    types.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  _types	54	None	replace
94	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getSuperclass();  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getSuperclass();	  Class    <?    super    T>    raw    =    types.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  types	54	None	replace
95	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getSuperclass();  [CE]  cannot  find  symbol  gen  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getSuperclass();	  Class    <?    super    T>    raw    =    types.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  gen	54	None	replace
96	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getSuperclass();  [CE]  cannot  find  symbol  generator  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getSuperclass();	  Class    <?    super    T>    raw    =    types.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  generator	54	None	replace
97	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperclass()  :  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperclass()  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperclass()  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
98	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type,  type.getSuperclass();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type,  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type,  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  ';'  expected	92	None	replace
99	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  types.getSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  types.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  types.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
100	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperclass()  :  type.getSuperclass();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperclass()  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperclass()  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	92	None	replace
101	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.withSuperclass();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
102	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isAssignableFrom(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isAssignableFrom(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isAssignableFrom(raw);	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
103	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSerializedName();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withSerializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSerializedName();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
104	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||(type.isAssignableFrom(raw));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||(type.isAssignableFrom(raw));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSuperclass()  ||(type.isAssignableFrom(raw));	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
105	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass(serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSuperclass(serializedName);	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol  serializedName	81	None	replace
106	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(raw);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
107	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
108	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(gson);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(gson);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
109	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(serializedName);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	66	None	replace
110	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size);  [CE]  cannot  find  symbol  size  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(size);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  size	66	None	replace
111	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(value);  [CE]  cannot  find  symbol  value  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(value);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(value);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  value	66	None	replace
112	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson,  type.getRawClass();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson,  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson,  type.getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  ';'  expected	37	None	replace
113	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.type.getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	37	None	replace
114	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  types.getRawClass();  [CE]  cannot  find  symbol  types  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  types.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  types.getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  types	37	None	replace
115	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawClass()  ||  type.isAssignableFrom(raw);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawClass()  ||  type.isAssignableFrom(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getRawClass()  ||  type.isAssignableFrom(raw);	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
116	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type).getRawClass();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type).getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.constructType(type).getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
117	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(raw);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	97	None	replace
118	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(serializedName);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	97	None	replace
119	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type,  serializedName);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	97	None	replace
120	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson,  type);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(gson,  type);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	97	None	replace
121	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw,  type);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(raw,  type);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	97	None	replace
122	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  raw  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  raw  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  raw  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
123	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  gson.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
124	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  raw  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  raw  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  raw  :  gson.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
125	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  new  TypeToken(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  new  TypeToken(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  new  TypeToken(type.getRawClass());	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
126	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  scope.getRawClass();  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  scope.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  scope.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  scope	31	None	replace
127	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  getRawClass();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
128	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  gson.getRawType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  gson.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  gson.getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
129	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  getRawType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
130	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  scope.getRawType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  scope.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  scope.getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
131	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  renderer.getRawType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  renderer.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  renderer.getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
132	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  gson,  type.getRawType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  final  Class  <?  super  T>  raw  =  gson,  type.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	final  Class  <?  super  T>  raw  =  gson,  type.getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
133	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  null.getRawType();  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  null.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  null.getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
134	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getQualifiedName()!=  null?  null  :  type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getQualifiedName()!=  null?  null  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getQualifiedName()!=  null?  null  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
135	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toArray(new  TypeToken[type.size()  ]);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toArray(new  TypeToken[type.size()  ]);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toArray(new  TypeToken[type.size()  ]);	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
136	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toString();  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toString();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toString();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  incompatible  types	75	None	replace
137	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperType()  :  type;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperType()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperType()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
138	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  scope.getSuperType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  scope.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  scope.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
139	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  types;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  types;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  types;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
140	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.EMPTY;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.EMPTY;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.EMPTY;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
141	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperType()  :  type;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperType()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperType()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	87	None	replace
142	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.UNKNOWN;  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.UNKNOWN;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.UNKNOWN;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
143	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.toSuperClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.toSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.toSuperClass();	  Class    <?    super    T>    raw    =    type.toSuperClass();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
144	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.fromSuperClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.fromSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.fromSuperClass();	  Class    <?    super    T>    raw    =    type.toSuperClass();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
145	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.subtract(gson.getRawClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.subtract(gson.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.subtract(gson.getRawClass());	  Class    <?    super    T>    raw    =    type.toSuperClass();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
146	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson,  type.getRawType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson,  type.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson,  type.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  ';'  expected	73	None	replace
147	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  getRawType(gson).getRawType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  getRawType(gson).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  getRawType(gson).getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
148	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.type.getRawType();  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.type.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.type.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  type	73	None	replace
149	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  types.getRawType();  [CE]  cannot  find  symbol  types  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  types.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  types.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  types	73	None	replace
150	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType()  ||  type.isAssignableFrom(raw);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType()  ||  type.isAssignableFrom(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getRawType()  ||  type.isAssignableFrom(raw);	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
151	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawClass();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawClass();	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  ';'  expected	27	None	replace
152	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.raw.getRawClass();  [CE]  cannot  find  symbol  raw  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.raw.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.raw.getRawClass();	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  raw	27	None	replace
153	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  parent.getRawClass();  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  parent.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  parent.getRawClass();	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
154	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperClass()!=  null;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperClass()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getSuperClass()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
155	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperClass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toSuperClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
156	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperclass()!=  null?  null  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperclass()!=  null?  null  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperclass()!=  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
157	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperclass()!=  null;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperclass()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperclass()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
158	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtils.getRawType(type);  [CE]  cannot  find  symbol  TypeUtils  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtils.getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtils.getRawType(type);	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	79	None	replace
159	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtils.getRawType();  [CE]  cannot  find  symbol  TypeUtils  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtils.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtils.getRawType();	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtils	79	None	replace
160	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(3);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(3);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(3);	  Class    <?    super    T>    raw    =    type.getRawType(2);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	18	None	replace
161	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(4);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(4);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(4);	  Class    <?    super    T>    raw    =    type.getRawType(2);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	18	None	replace
162	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1));  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1));	  Class    <?    super    T>    raw    =    type.getRawType(2);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	18	None	replace
163	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(size());	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
164	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  *  1);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  *  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(size()  *  1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
165	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawParameterType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
166	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  +  1);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  +  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(size()  +  1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
167	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawParameterType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
168	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
169	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  this.type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  this.type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  this.type.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  type	35	None	replace
170	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gen.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  gen  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gen.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gen.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  gen	35	None	replace
171	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined(),  gson);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined(),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined(),  gson);	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	35	None	replace
172	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  types.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  types  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  types.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  types.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  types	35	None	replace
173	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined(),  null;  [CE]  <identifier>  expected  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined(),  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined(),  null;	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
174	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.toRawClass();	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
175	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.fromRawClass();	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
176	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.rawType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.rawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.rawType();	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
177	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.rawClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.rawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.rawClass();	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
178	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.constructType(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.constructType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.constructType(type);	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
179	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.serializedName.getQualifiedName();  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.serializedName.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.serializedName.getQualifiedName();	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	47	None	replace
180	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getQualifiedName()  :  type.getQualifiedName();  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getQualifiedName()  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getQualifiedName()  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  ')'  expected	47	None	replace
181	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getQualifiedName()  :  type.getQualifiedName();  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getQualifiedName()  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getQualifiedName()  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
182	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getQualifiedName()  :  type;  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getQualifiedName()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getQualifiedName()  :  type;	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
183	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type).getRawType();  [CE]  cannot  find  symbol  TypeUtil  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(type).getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	41	None	replace
184	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.class.getRawType(gson).getRawType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.class.getRawType(gson).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.class.getRawType(gson).getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
185	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(gson).getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	41	None	replace
186	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(0).getRawType();  [CE]  cannot  find  symbol  TypeUtil  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(0).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(0).getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	41	None	replace
187	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(1);  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawParameterType(1);	  Class    <?    super    T>    raw    =    this.type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol  type	64	None	replace
188	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(type);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawParameterType(type);	  Class    <?    super    T>    raw    =    this.type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol  type	64	None	replace
189	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(2);  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawParameterType(2);	  Class    <?    super    T>    raw    =    this.type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol  type	64	None	replace
190	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawSuperType(gson).getRawSuperType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawSuperType(gson).getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawSuperType(gson).getRawSuperType();	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
191	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawSuperType(gson);  [CE]  cannot  find  symbol  TypeUtil  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawSuperType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawSuperType(gson);	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	55	None	replace
192	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getRawSuperType();  [CE]  cannot  find  symbol  gson  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getRawSuperType();	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  gson	55	None	replace
193	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getSuperType();  [CE]  cannot  find  symbol  _types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getSuperType();	  Class    <?    super    T>    raw    =    types.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  _types	26	None	replace
194	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getSuperType();  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getSuperType();	  Class    <?    super    T>    raw    =    types.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  types	26	None	replace
195	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getSuperType();  [CE]  cannot  find  symbol  gen  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getSuperType();	  Class    <?    super    T>    raw    =    types.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  gen	26	None	replace
196	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  ns.getSuperType();  [CE]  cannot  find  symbol  ns  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  ns.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  ns.getSuperType();	  Class    <?    super    T>    raw    =    types.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  ns	26	None	replace
197	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawSuperClass();  [CE]  cannot  find  symbol  _types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getRawSuperClass();	  Class    <?    super    T>    raw    =    types.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  _types	15	None	replace
198	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawSuperClass();  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getRawSuperClass();	  Class    <?    super    T>    raw    =    types.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  types	15	None	replace
199	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawSuperClass();  [CE]  cannot  find  symbol  gen  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getRawSuperClass();	  Class    <?    super    T>    raw    =    types.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  gen	15	None	replace
200	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawSuperClass();  [CE]  cannot  find  symbol  generator  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getRawSuperClass();	  Class    <?    super    T>    raw    =    types.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  generator	15	None	replace
201	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getQualifiedName()!=  null?  null  :  type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getQualifiedName()!=  null?  null  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null  ||  type.getQualifiedName()!=  null?  null  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
202	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getQualifiedName();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  ';'  expected	76	None	replace
203	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getQualifiedName();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	76	None	replace
204	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  type.getConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
205	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
206	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson,  type.getConstructor();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson,  type.getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson,  type.getConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
207	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.constructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson.constructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.constructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
208	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  scope.getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  scope.getConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
209	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.newConstructor();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson.newConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.newConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
210	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperClass();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperClass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	replace
211	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null? "null "  :  type.getSuperClass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null? "null "  :  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null? "null "  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
212	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.toRawSuperclass();	  Class    <?    super    T>    raw    =    type.toRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
213	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawSuperclass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.fromRawSuperclass();	  Class    <?    super    T>    raw    =    type.toRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
214	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.constructType(type.toRawSuperclass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.constructType(type.toRawSuperclass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.constructType(type.toRawSuperclass());	  Class    <?    super    T>    raw    =    type.toRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
215	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(-1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(-1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(-1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(1);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
216	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass(),  gson);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass(),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass(),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  ';'  expected	70	None	replace
217	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSuperclass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	70	None	replace
218	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass(),  gson;  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass(),  gson;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass(),  gson;	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	70	None	replace
219	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getSuperclass();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(0).getSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
220	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2).getSuperclass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2).getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(2).getSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	70	None	replace
221	[BUG]  [BUGGY]  Gson  raw  =  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  type.getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
222	[BUG]  [BUGGY]  Gson  raw  =  gson,  type.getRawClass();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson,  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson,  type.getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  ';'  expected	38	None	replace
223	[BUG]  [BUGGY]  Gson  raw  =  gson.class.getRawClass();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.class.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.class.getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
224	[BUG]  [BUGGY]  Gson  raw  =  gson.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.type.getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	38	None	replace
225	[BUG]  [BUGGY]  Gson  raw  =  gson.getRawClass()  ||  type.isAssignableFrom(raw);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.getRawClass()  ||  type.isAssignableFrom(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.getRawClass()  ||  type.isAssignableFrom(raw);	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
226	[BUG]  [BUGGY]  Gson  raw  =  gson.constructType(type).getRawClass();  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.constructType(type).getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.constructType(type).getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
227	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "null ";  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "null ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "null ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
228	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + ".null ";  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + ".null ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + ".null ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
229	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ ";  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
230	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "null ";  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "null ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "null ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
231	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + ": ";  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + ": ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + ": ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
232	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "/null ";  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "/null ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "/null ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
233	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(2);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(2);	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
234	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getRawType(2);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getRawType(2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getRawType(2);	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
235	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getConstructor();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getConstructor();	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
236	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(3);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(3);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(3);	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
237	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getSimpleName();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getSimpleName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getSimpleName();	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
238	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getRawType(1);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getRawType(1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(0).getRawType(1);	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
239	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(size());	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
240	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  *  1);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  *  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(size()  *  1);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
241	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  +  1);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  +  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(size()  +  1);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
242	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
243	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  *  2);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  *  2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(size()  *  2);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
244	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getRawType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
245	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0),  gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
246	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(2));  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(2));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(2));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
247	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson.getRawType(0));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(gson.getRawType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(gson.getRawType(0));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
248	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw.getRawType(0));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw.getRawType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(raw.getRawType(0));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
249	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw.getRawType(1));  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(raw.getRawType(1));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(raw.getRawType(1));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
250	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0),  null);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0),  null);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0),  null);	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
251	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperType()  :  type.getSuperType();  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperType()  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperType()  :  type.getSuperType();	  Class    <?    super    T>    raw    =    this.type.getSuperType();    	non-compiled	[CE]  ')'  expected	25	None	replace
252	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperType()  :  type.getSuperType();  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperType()  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperType()  :  type.getSuperType();	  Class    <?    super    T>    raw    =    this.type.getSuperType();    	non-compiled	[CE]  ')'  expected	25	None	replace
253	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperType()  :  type;  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperType()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperType()  :  type;	  Class    <?    super    T>    raw    =    this.type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	25	None	replace
254	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getOwnerClass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getOwnerClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	96	None	replace
255	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass(),  gson);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass(),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass(),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  ';'  expected	96	None	replace
256	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getOwnerClass();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0).getOwnerClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(0).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
257	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass(),  gson;  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass(),  gson;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass(),  gson;	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	96	None	replace
258	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	final  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	96	None	replace
259	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2).getOwnerClass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2).getOwnerClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(2).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	96	None	replace
260	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawSuperType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.toRawSuperType();	  Class    <?    super    T>    raw    =    type.toRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
261	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.fromRawSuperType();	  Class    <?    super    T>    raw    =    type.toRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
262	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass().withQualifiedName();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass().withQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawClass().withQualifiedName();	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
263	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName(),  serializedName;  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName(),  serializedName;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withQualifiedName(),  serializedName;	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
264	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.withQualifiedName();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.withQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.withQualifiedName();	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
265	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName(),  serializedName);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName(),  serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withQualifiedName(),  serializedName);	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  ';'  expected	83	None	replace
266	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializedName.withQualifiedName();  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializedName.withQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializedName.withQualifiedName();	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	83	None	replace
267	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName()  ||  serializedName.isQualifiedName();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName()  ||  serializedName.isQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withQualifiedName()  ||  serializedName.isQualifiedName();	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
268	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  type.getRawSuperclass();  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  ')'  expected	4	None	replace
269	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
270	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  ')'  expected	4	None	replace
271	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
272	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type  ==  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type  ==  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type  ==  null?  null  :  type.getRawClass();	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
273	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type!=  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type!=  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type!=  null?  null  :  type.getRawClass();	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
274	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  this.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  this.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  this.type.getRawClass();	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	33	None	replace
275	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.toRawClass();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.toRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.toRawClass();	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
276	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass(),  null);  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass(),  null);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.getRawClass(),  null);	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
277	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.constructType(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.constructType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.constructType(type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
278	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(raw);  [CE]  cannot  find  symbol  TypeUtil  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(raw);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
279	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getSuperType(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getSuperType(type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
280	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.findSuperType(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.findSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.findSuperType(type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
281	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.construct(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.construct(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.construct(type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
282	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawClass();  [CE]  cannot  find  symbol  _types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getRawClass();	  Class    <?    super    T>    raw    =    types.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _types	32	None	replace
283	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawClass();  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getRawClass();	  Class    <?    super    T>    raw    =    types.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  types	32	None	replace
284	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  m_types.getRawClass();  [CE]  cannot  find  symbol  m_types  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  m_types.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  m_types.getRawClass();	  Class    <?    super    T>    raw    =    types.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  m_types	32	None	replace
285	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawClass();  [CE]  cannot  find  symbol  gen  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getRawClass();	  Class    <?    super    T>    raw    =    types.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  gen	32	None	replace
286	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawClass()!=  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawClass()!=  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawClass()!=  null?  null  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
287	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null,  null?  null  :  type.getRawClass();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null,  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null,  null?  null  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawClass();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
288	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null? "null "  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null? "null "  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null? "null "  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
289	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson),  type.getRawType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson),  type.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson),  type.getRawType();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  ';'  expected	40	None	replace
290	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson,  type).getRawType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson,  type).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson,  type).getRawType();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
291	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson),  type).getRawType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson),  type).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson),  type).getRawType();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  ';'  expected	40	None	replace
292	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(type).getRawType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(type).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(type).getRawType();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
293	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson)?  null  :  gson.getRawType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson)?  null  :  gson.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson)?  null  :  gson.getRawType();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
294	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawSuperClass();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    gson.getRawSuperClass();    	non-compiled	[CE]  ';'  expected	11	None	replace
295	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getRawSuperClass();  [CE]  cannot  find  symbol  gson  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getRawSuperClass();	  Class    <?    super    T>    raw    =    gson.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  gson	11	None	replace
296	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(2);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawParameterType(2);	  Class    <?    super    T>    raw    =    type.getRawParameterType(2);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
297	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(3);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(3);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(3);	  Class    <?    super    T>    raw    =    type.getRawParameterType(2);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
298	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType();	  Class    <?    super    T>    raw    =    type.getRawParameterType(2);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
299	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(4);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(4);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(4);	  Class    <?    super    T>    raw    =    type.getRawParameterType(2);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
300	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperClass()  :  type.getRawSuperClass();  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperClass()  :  type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperClass()  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperClass();    	non-compiled	[CE]  ')'  expected	14	None	replace
301	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  type.getRawSuperClass();  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
302	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperClass()  :  this.type.getRawSuperClass();  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperClass()  :  this.type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperClass()  :  this.type.getRawSuperClass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperClass();    	non-compiled	[CE]  ')'  expected	14	None	replace
303	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  type;  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  type;	  Class    <?    super    T>    raw    =    this.type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
304	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawSuperclass();  [CE]  cannot  find  symbol  _types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getRawSuperclass();	  Class    <?    super    T>    raw    =    types.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  _types	5	None	replace
305	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawSuperclass();  [CE]  cannot  find  symbol  types  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getRawSuperclass();	  Class    <?    super    T>    raw    =    types.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  types	5	None	replace
306	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawSuperclass();  [CE]  cannot  find  symbol  gen  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getRawSuperclass();	  Class    <?    super    T>    raw    =    types.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  gen	5	None	replace
307	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawSuperclass();  [CE]  cannot  find  symbol  generator  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getRawSuperclass();	  Class    <?    super    T>    raw    =    types.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  generator	5	None	replace
308	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperClass()  :  type.getSuperClass();  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperClass()  :  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperClass()  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  ')'  expected	9	None	replace
309	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperClass()  :  type.getSuperClass();  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperClass()  :  type.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperClass()  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  ')'  expected	9	None	replace
310	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null? "null "  :  this.type.getSuperClass());  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null? "null "  :  this.type.getSuperClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null? "null "  :  this.type.getSuperClass());	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
311	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperClass()  :  type;  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperClass()  :  type;	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
312	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperType()  :  type.getRawSuperType();  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperType()  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperType()  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  ')'  expected	58	None	replace
313	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperType()  :  type.getRawSuperType();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperType()  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperType()  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	58	None	replace
314	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperType()  :  this.type.getRawSuperType();  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperType()  :  this.type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperType()  :  this.type.getRawSuperType();	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  ')'  expected	58	None	replace
315	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperType()  :  type;  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperType()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperType()  :  type;	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	58	None	replace
316	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperclass()  :  type.getSuperclass();  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperclass()  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperclass()  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  ')'  expected	53	None	replace
317	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperclass()  :  type.getSuperclass();  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperclass()  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getSuperclass()  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  ')'  expected	53	None	replace
318	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null? "null "  :  this.type.getSuperclass());  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null? "null "  :  this.type.getSuperclass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null? "null "  :  this.type.getSuperclass());	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	53	None	replace
319	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperclass()  :  type;  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperclass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperclass()  :  type;	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	53	None	replace
320	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawParameterType(type);	  Class    <?    super    T>    raw    =    gson.getRawParameterType(1);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
321	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(3);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(3);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawParameterType(3);	  Class    <?    super    T>    raw    =    gson.getRawParameterType(1);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
322	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawParameterType(1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawParameterType(1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawParameterType(1);	  Class    <?    super    T>    raw    =    gson.getRawParameterType(1);    	non-compiled	[CE]  ';'  expected	67	None	replace
323	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson,  type.getRawClass();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson,  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson,  type.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  ';'  expected	74	None	replace
324	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.type.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	74	None	replace
325	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.class.getRawClass();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.class.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.class.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
326	[BUG]  [BUGGY]  Class  <  T>  raw  =  types.getRawClass();  [CE]  cannot  find  symbol  types  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  types.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  types.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  types	74	None	replace
327	[BUG]  [BUGGY]  Class  <  T>  raw  =  this.raw.getRawClass();  [CE]  cannot  find  symbol  raw  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  this.raw.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  this.raw.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  raw	74	None	replace
328	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperclass();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	52	None	replace
329	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getSuperclass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  ';'  expected	52	None	replace
330	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getSuperclass()!=  null;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getSuperclass()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null  ||  type.getSuperclass()!=  null;	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
331	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(1);	  Class    <?    super    T>    raw    =    gson.getRawType(0);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
332	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(2);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(2);	  Class    <?    super    T>    raw    =    gson.getRawType(0);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
333	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawType(0);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawType(0);	  Class    <?    super    T>    raw    =    gson.getRawType(0);    	non-compiled	[CE]  ';'  expected	69	None	replace
334	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawType();  [CE]  cannot  find  symbol  _types  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getRawType();	  Class    <?    super    T>    raw    =    types.getRawType();    	non-compiled	[CE]  cannot  find  symbol  _types	42	None	replace
335	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawType();  [CE]  cannot  find  symbol  types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getRawType();	  Class    <?    super    T>    raw    =    types.getRawType();    	non-compiled	[CE]  cannot  find  symbol  types	42	None	replace
336	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  m_types.getRawType();  [CE]  cannot  find  symbol  m_types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  m_types.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  m_types.getRawType();	  Class    <?    super    T>    raw    =    types.getRawType();    	non-compiled	[CE]  cannot  find  symbol  m_types	42	None	replace
337	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawType();  [CE]  cannot  find  symbol  gen  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getRawType();	  Class    <?    super    T>    raw    =    types.getRawType();    	non-compiled	[CE]  cannot  find  symbol  gen	42	None	replace
338	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawSuperType();  [CE]  cannot  find  symbol  _types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _types.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _types.getRawSuperType();	  Class    <?    super    T>    raw    =    types.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  _types	59	None	replace
339	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawSuperType();  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.types.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.types.getRawSuperType();	  Class    <?    super    T>    raw    =    types.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  types	59	None	replace
340	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawSuperType();  [CE]  cannot  find  symbol  gen  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.getRawSuperType();	  Class    <?    super    T>    raw    =    types.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  gen	59	None	replace
341	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawSuperType();  [CE]  cannot  find  symbol  generator  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getRawSuperType();	  Class    <?    super    T>    raw    =    types.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  generator	59	None	replace
342	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawParameterType(0);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawParameterType(0);	  Class    <?    super    T>    raw    =    gson.getRawParameterType(0);    	non-compiled	[CE]  ';'  expected	60	None	replace
343	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getSuperclass();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getSuperclass();	  Class    <?    super    T>    raw    =    gson.getSuperclass();    	non-compiled	[CE]  ';'  expected	50	None	replace
344	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getSuperclass();  [CE]  cannot  find  symbol  gson  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getSuperclass();	  Class    <?    super    T>    raw    =    gson.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  gson	50	None	replace
345	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getSuperclass();  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.type.getSuperclass();	  Class    <?    super    T>    raw    =    gson.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	50	None	replace
346	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(1));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(1));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(1));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
347	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(gson.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(gson.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(gson.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
348	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(raw.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(raw.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(raw.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
349	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this,  type.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this,  type.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this,  type.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
350	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(width,  type.getRawParameterType(0));  [CE]  cannot  find  symbol  width  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(width,  type.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(width,  type.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  width	63	None	replace
351	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.type.getRawParameterType(0));  [CE]  cannot  find  symbol  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.type.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this.type.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  type	63	None	replace
352	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializedName.getQualifiedName();  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializedName.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializedName.getQualifiedName();	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	45	None	replace
353	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getQualifiedName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getQualifiedName();	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  ';'  expected	45	None	replace
354	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getQualifiedName();  [CE]  cannot  find  symbol  gson  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getQualifiedName();	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  gson	45	None	replace
355	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + ": ";  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + ": ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + ": ";	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
356	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.toRawType();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.toRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.toRawType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
357	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.toString();  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.toString();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.toString();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	34	None	replace
358	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType(),  false);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType(),  false);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.getRawType(),  false);	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
359	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawSuperclass();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  ';'  expected	1	None	replace
360	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getRawSuperclass();  [CE]  cannot  find  symbol  gson  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.gson.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.gson.getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  gson	1	None	replace
361	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  parent.getRawSuperclass();  [CE]  cannot  find  symbol  parent  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  parent.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  parent.getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  parent	1	None	replace
362	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperClass()  :  type;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperClass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
363	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  types;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  types;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  types;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
364	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.EMPTY;  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.EMPTY;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.EMPTY;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
365	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperClass()  :  type;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperClass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	85	None	replace
366	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperClass();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	replace
367	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperClass();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  ';'  expected	13	None	replace
368	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperType()  :  type.getSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperType()  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  gson.getSuperType()  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
369	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  gson.getSuperType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  gson.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  gson.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
370	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type,  type.getSuperType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type,  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type,  type.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  ';'  expected	86	None	replace
371	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  types.getSuperType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  types.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  types.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
372	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperType()  :  type.getSuperType();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperType()  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  gson.getSuperType()  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	86	None	replace
373	[BUG]  [BUGGY]  Class  <  T>  raw  =  type  ==  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  type  ==  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  type  ==  null?  null  :  type.getRawClass();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
374	[BUG]  [BUGGY]  Class  <  T>  raw  =  type!=  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  type!=  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  type!=  null?  null  :  type.getRawClass();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
375	[BUG]  [BUGGY]  Class  <  T>  raw  =  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  type.restrictByNotNullOrUndefined();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
376	[BUG]  [BUGGY]  Class  <  T>  raw  =  this.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  this.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  this.type.getRawClass();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	39	None	replace
377	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperClass()!=  null?  null  :  type.getRawSuperClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperClass()!=  null?  null  :  type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperClass()!=  null?  null  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
378	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
379	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  type	48	None	replace
380	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRestrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRestrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRestrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
381	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass().restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawClass().restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
382	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.restrictByNotEmptyOrUndefined();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.restrictByNotEmptyOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.restrictByNotEmptyOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
383	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawClass()!=  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawClass()!=  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null  ||  type.getRawClass()!=  null?  null  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
384	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawClass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawClass();    	non-compiled	[CE]  ';'  expected	29	None	replace
385	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null? "null "  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null? "null "  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null? "null "  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
386	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + ",_ "+type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + ",_ "+type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + ",_ "+type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "_   "+type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
387	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "._ "+type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "._ "+type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "._ "+type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "_   "+type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
388	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ "+  serializedName.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ "+  serializedName.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ "+  serializedName.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "_   "+type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
389	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ ",  type.getQualifiedName();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ ",  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ ",  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "_   "+type.getQualifiedName();    	non-compiled	[CE]  	77	None	replace
390	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.toSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.toSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.toSuperType();	  Class    <?    super    T>    raw    =    type.toSuperType();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
391	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass().toSuperType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass().toSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawClass().toSuperType();	  Class    <?    super    T>    raw    =    type.toSuperType();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
392	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperType();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >=  null?  null  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperType();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	24	None	replace
393	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getSuperType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperType();    	non-compiled	[CE]  ';'  expected	24	None	replace
394	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getSuperType()!=  null;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null  ||  type.getSuperType()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null  ||  type.getSuperType()!=  null;	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
395	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawSuperClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.toRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.toRawSuperClass();	  Class    <?    super    T>    raw    =    type.toRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
396	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawSuperClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.fromRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.fromRawSuperClass();	  Class    <?    super    T>    raw    =    type.toRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
397	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializer.getQualifiedName(),  type;  [CE]  cannot  find  symbol  serializer  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializer.getQualifiedName(),  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializer.getQualifiedName(),  type;	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  cannot  find  symbol  serializer	46	None	replace
398	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
399	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperClass()!=  null;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperClass()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawSuperClass()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
400	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
401	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
402	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getSuperclass();  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  >>  null?  null  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	52	None	replace
403	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperType(type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSuperType(type);	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
404	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getSuperType();  [CE]  cannot  find  symbol  genson  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getSuperType();	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  genson	22	None	replace
405	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperType(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.withSuperType(type);	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
406	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type,  gson);  [CE]  cannot  find  symbol  TypeUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type,  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(type,  gson);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
407	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson,  type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson,  type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
408	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(scope,  gson);  [CE]  cannot  find  symbol  scope  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(scope,  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(scope,  gson);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  scope	43	None	replace
409	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toArray(new  TypeToken[type.size()  ]);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toArray(new  TypeToken[type.size()  ]);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toArray(new  TypeToken[type.size()  ]);	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
410	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  gson.getRawSuperClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  gson.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  gson.getRawSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
411	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.serialize(gson);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.serialize(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.serialize(gson);	  Class    <?    super    T>    raw    =    type.serializedName();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
412	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _type.getQualifiedName();  [CE]  cannot  find  symbol  _type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _type.getQualifiedName();	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  _type	47	None	replace
413	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getQualifiedName();  [CE]  cannot  find  symbol  types  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  types.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getQualifiedName();	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  types	47	None	replace
414	[BUG]  [BUGGY]  Gson  raw  =  gson!=  null?  null  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson!=  null?  null  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson!=  null?  null  :  gson.getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
415	[BUG]  [BUGGY]  Gson  raw  =  gson.constructType(type);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.constructType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.constructType(type);	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
416	[BUG]  [BUGGY]  Gson  raw  =  gson.withRawClass(type);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.withRawClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.withRawClass(type);	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
417	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1).getConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1).getConstructor();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(1).getConstructor();	  Class    <?    super    T>    raw    =    type.getRawType(0).getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
418	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  genson.getRawType();  [CE]  cannot  find  symbol  genson  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  genson.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  genson.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  genson	73	None	replace
419	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType(type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getRawType(type);	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
420	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  scope.getRawType();  [CE]  cannot  find  symbol  scope  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  scope.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  scope.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  scope	73	None	replace
421	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.constructType(type);	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
422	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.GETPROP;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.GETPROP;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.GETPROP;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
423	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson),  scope.getRawType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson),  scope.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson),  scope.getRawType();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  ';'  expected	40	None	replace
424	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson).getRawParameterType(0);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson).getRawParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson).getRawParameterType(0);	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
425	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getSuperclass();  [CE]  cannot  find  symbol  genson  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getSuperclass();	  Class    <?    super    T>    raw    =    gson.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  genson	50	None	replace
426	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperclass(type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperclass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.withSuperclass(type);	  Class    <?    super    T>    raw    =    gson.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
427	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.superclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.superclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.superclass();	  Class    <?    super    T>    raw    =    gson.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
428	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  this.type.getRawSuperClass();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  this.type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperClass()  :  this.type.getRawSuperClass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
429	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.withSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.withSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.withSuperclass();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
430	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.withSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.withSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.withSuperclass();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
431	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.withSuperclass();  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.withSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.withSuperclass();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	81	None	replace
432	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.withSuperclass();  [CE]  cannot  find  symbol  types  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  types.withSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.withSuperclass();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol  types	81	None	replace
433	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this.serializedName);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	66	None	replace
434	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  Raw  :  type.getRawClass();  [CE]  cannot  find  symbol  Raw  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  Raw  :  type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  Raw  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  Raw	31	None	replace
435	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(value);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(value);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(value);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  value	95	None	replace
436	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(source);  [CE]  cannot  find  symbol  source  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(source);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(source);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  source	95	None	replace
437	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson),  type.getRawType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson),  type.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson),  type.getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  ';'  expected	41	None	replace
438	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(scope).getRawType();  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(scope).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(scope).getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol  scope	41	None	replace
439	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(raw).getRawType();  [CE]  cannot  find  symbol  TypeUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(raw).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(raw).getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	41	None	replace
440	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1).getOwnerClass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1).getOwnerClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(1).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
441	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSerializedName();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSerializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSerializedName();	  Class    <?    super    T>    raw    =    type.getRawType(0).getOwnerClass();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	96	None	replace
442	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getSuperclass();  [CE]  cannot  find  symbol  _typeFactory  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getSuperclass();	  Class    <?    super    T>    raw    =    types.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	54	None	replace
443	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperClass();	  Class    <?    super    T>    raw    =    type.toSuperClass();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
444	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.toSuperClass();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.toSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.toSuperClass();	  Class    <?    super    T>    raw    =    type.toSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	68	None	replace
445	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperType()  :  gson.getSuperType();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperType()  :  gson.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperType()  :  gson.getSuperType();	  Class    <?    super    T>    raw    =    this.type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	25	None	replace
446	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
447	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawClass()!=  null;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawClass()!=  null;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null  ||  type.getRawClass()!=  null;	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
448	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  fieldNamingStrategy.getRawType(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  fieldNamingStrategy.getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  fieldNamingStrategy.getRawType(type);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	80	None	replace
449	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  fieldNamingPolicy.getRawType(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  fieldNamingPolicy.getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  fieldNamingPolicy.getRawType(type);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
450	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.UNKNOWN;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.UNKNOWN;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.UNKNOWN;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
451	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.NONE;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.NONE;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  TypeToken.NONE;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
452	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawClass();  [CE]  cannot  find  symbol  genson  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawClass();	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  genson	27	None	replace
453	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawClass();  [CE]  cannot  find  symbol  scope  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getRawClass();	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  scope	27	None	replace
454	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.constructType(type);	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
455	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawParameterType(0);  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  types.getRawParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawParameterType(0);	  Class    <?    super    T>    raw    =    this.type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol  types	64	None	replace
456	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  new  TypeToken  <  T>();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  new  TypeToken  <  T>();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  new  TypeToken  <  T>();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
457	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.UNKNOWN;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.UNKNOWN;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.UNKNOWN;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
458	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.NONE;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.NONE;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  TypeToken.NONE;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
459	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  ';'  expected	57	None	replace
460	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toString();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toString();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toString();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  incompatible  types	57	None	replace
461	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawSuperclass();  [CE]  cannot  find  symbol  _typeFactory  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getRawSuperclass();	  Class    <?    super    T>    raw    =    types.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	5	None	replace
462	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawSuperType();  [CE]  cannot  find  symbol  _typeFactory  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getRawSuperType();	  Class    <?    super    T>    raw    =    types.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	59	None	replace
463	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperclass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
464	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _type.getRawSuperType();  [CE]  cannot  find  symbol  _type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _type.getRawSuperType();	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  _type	58	None	replace
465	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawSuperType();  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getRawSuperType();	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  scope	58	None	replace
466	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  excluder.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  excluder.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  excluder.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
467	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  n.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  n  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  n.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  n.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  n	35	None	replace
468	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  scope.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  scope.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  scope.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  scope	35	None	replace
469	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperClass();	  Class    <?    super    T>    raw    =    type.toRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
470	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperClass();	  Class    <?    super    T>    raw    =    type.toRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
471	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawSuperClass();  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.toRawSuperClass();	  Class    <?    super    T>    raw    =    type.toRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	89	None	replace
472	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  getRawType(gson).getRawType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  getRawType(gson).getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  getRawType(gson).getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
473	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type,  type.getRawType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type,  type.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type,  type.getRawType();	  Class    <?    super    T>    raw    =    gson,    type.getRawType();    	non-compiled	[CE]  ';'  expected	44	None	replace
474	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  getSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
475	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getRawSuperclass()  :  this.type.getRawSuperclass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
476	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  type;  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawSuperclass()  :  type;	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
477	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperClass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
478	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
479	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  gson.getRawType(0));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  gson.getRawType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type,  gson.getRawType(0));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
480	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(3));  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(3));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(3));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
481	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getSuperClass();  [CE]  cannot  find  symbol  genson  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getSuperClass();	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  genson	6	None	replace
482	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperClass(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.withSuperClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.withSuperClass(type);	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
483	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperClass(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSuperClass(type);	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
484	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getSuperClass();  [CE]  cannot  find  symbol  scope  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getSuperClass();	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  scope	6	None	replace
485	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.first.getType();  [CE]  cannot  find  symbol  first  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.first.getType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.first.getType();	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  cannot  find  symbol  first	72	None	replace
486	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.type;  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.type;	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  cannot  find  symbol  type	72	None	replace
487	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  genson.getType();  [CE]  cannot  find  symbol  genson  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  genson.getType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  genson.getType();	  TypeToken    <    T>    raw    =    gson.getType();    	non-compiled	[CE]  cannot  find  symbol  genson	72	None	replace
488	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  _type.getRawClass();  [CE]  cannot  find  symbol  _type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  _type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  _type.getRawClass();	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _type	33	None	replace
489	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawParameterType(0);  [CE]  cannot  find  symbol  genson  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawParameterType(0);	  Class    <?    super    T>    raw    =    gson.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol  genson	60	None	replace
490	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  genson.getRawClass();  [CE]  cannot  find  symbol  genson  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  genson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  genson.getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  genson	37	None	replace
491	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.first.getRawClass();  [CE]  cannot  find  symbol  first  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.first.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.first.getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  first	37	None	replace
492	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperclass();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
493	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.createConstructor(type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson.createConstructor(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.createConstructor(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
494	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.findConstructor(type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson.findConstructor(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.findConstructor(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
495	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.construct(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
496	[BUG]  [BUGGY]  Class  <  T>  raw  =  genson.getRawClass();  [CE]  cannot  find  symbol  genson  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  genson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  genson.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  genson	74	None	replace
497	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.findRawClass(type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.findRawClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.findRawClass(type);	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
498	[BUG]  [BUGGY]  Class  <  T>  raw  =  scope.getRawClass();  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  scope.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  scope.getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  scope	74	None	replace
499	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
500	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
501	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(raw);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(raw);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(raw);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
502	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperclass()  :  gson.getSuperclass();  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperclass()  :  gson.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperclass()  :  gson.getSuperclass();	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	53	None	replace
503	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  gson.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
504	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
505	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  getSuperClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
506	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawType();  [CE]  cannot  find  symbol  _typeFactory  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getRawType();	  Class    <?    super    T>    raw    =    types.getRawType();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	42	None	replace
507	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getRawSuperType();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
508	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1).getSuperclass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(1).getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(1).getSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
509	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawType(0);  [CE]  cannot  find  symbol  genson  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawType(0);	  Class    <?    super    T>    raw    =    gson.getRawType(0);    	non-compiled	[CE]  cannot  find  symbol  genson	69	None	replace
510	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
511	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
512	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getRawType(3);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getRawType(3);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getRawType(3);	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
513	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(type);	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
514	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
515	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.toArray(new  TypeToken  <  T>());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.toArray(new  TypeToken  <  T>());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.toArray(new  TypeToken  <  T>());	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
516	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type,  gson.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type,  gson.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(type,  gson.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
517	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(null,  type.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(null,  type.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(null,  type.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
518	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(2));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(2));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(2));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
519	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "no-serialize ";  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "no-serialize ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "no-serialize ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
520	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "n   ";  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "n   ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "n   ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
521	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperType();	  Class    <?    super    T>    raw    =    type.toRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
522	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperType();	  Class    <?    super    T>    raw    =    type.toRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
523	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawSuperType();  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.toRawSuperType();	  Class    <?    super    T>    raw    =    type.toRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	94	None	replace
524	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
525	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
526	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperType(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperType(type);	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
527	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawSuperType();  [CE]  cannot  find  symbol  genson  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawSuperType();	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  genson	55	None	replace
528	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawSuperType(gson.getRawSuperType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawSuperType(gson.getRawSuperType());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawSuperType(gson.getRawSuperType());	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
529	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getQualifiedName();  [CE]  cannot  find  symbol  genson  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getQualifiedName();	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  genson	45	None	replace
530	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName(type);	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
531	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  excluder.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  excluder.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  excluder.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
532	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gen.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  gen  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gen.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gen.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  gen	48	None	replace
533	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  n.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  n  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  n.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  n.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  n	48	None	replace
534	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  scope	48	None	replace
535	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawParameterType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawParameterType(size()  -  1);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getRawParameterType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
536	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.toSuperType();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.toSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.toSuperType();	  Class    <?    super    T>    raw    =    type.toSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	71	None	replace
537	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName(serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withQualifiedName(serializedName);	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	83	None	replace
538	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.withQualifiedName();  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.withQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.withQualifiedName();	  Class    <?    super    T>    raw    =    type.withQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  type	83	None	replace
539	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getSuperType();  [CE]  cannot  find  symbol  _typeFactory  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getSuperType();	  Class    <?    super    T>    raw    =    types.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	26	None	replace
540	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.type.getRawClass();	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	30	None	replace
541	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawClass()  :  type;  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getRawClass()  :  type;	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	30	None	replace
542	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _type.getRawClass();  [CE]  cannot  find  symbol  _type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _type.getRawClass();	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _type	30	None	replace
543	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawSuperclass();  [CE]  cannot  find  symbol  genson  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  genson	1	None	replace
544	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawSuperclass();  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  scope	1	None	replace
545	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSerializedName();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getSerializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSerializedName();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
546	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  TypeToken.STRING.getRawClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  TypeToken.STRING.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  TypeToken.STRING.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
547	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
548	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawClass();  [CE]  cannot  find  symbol  _typeFactory  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getRawClass();	  Class    <?    super    T>    raw    =    types.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	32	None	replace
549	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getSuperClass();  [CE]  cannot  find  symbol  _typeFactory  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getSuperClass();	  Class    <?    super    T>    raw    =    types.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	10	None	replace
550	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawSuperclass();	  Class    <?    super    T>    raw    =    type.toRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
551	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperclass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.toRawSuperclass();	  Class    <?    super    T>    raw    =    type.toRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
552	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawSuperclass();  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.toRawSuperclass();	  Class    <?    super    T>    raw    =    type.toRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	91	None	replace
553	[BUG]  [BUGGY]  Class  <  T>  raw  =  _type.getRawClass();  [CE]  cannot  find  symbol  _type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  _type.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  _type.getRawClass();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _type	39	None	replace
554	[BUG]  [BUGGY]  Class  <  T>  raw  =  n.getRawClass();  [CE]  cannot  find  symbol  n  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  n.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  n.getRawClass();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  n	39	None	replace
555	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toRawClass();	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
556	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawClass();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.toRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.toRawClass();	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	78	None	replace
557	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.sourceNamingStrategy.getRawType();  [CE]  cannot  find  symbol  sourceNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.sourceNamingStrategy.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.sourceNamingStrategy.getRawType();	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  sourceNamingStrategy	79	None	replace
558	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  n.getRawType();  [CE]  cannot  find  symbol  n  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  n.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  n.getRawType();	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  n	79	None	replace
559	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawType();  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  scope.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  scope.getRawType();	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  scope	79	None	replace
560	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(this.serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(this.serializedName);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	97	None	replace
561	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  gson);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type,  gson);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	97	None	replace
562	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  null);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  null);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type,  null);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	97	None	replace
563	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperclass();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  [Delete]  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    null    :    type.getRawSuperclass();    	non-compiled	[CE]  ';'  expected	3	None	replace
564	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawSuperClass();  [CE]  cannot  find  symbol  _typeFactory  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  _typeFactory.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  _typeFactory.getRawSuperClass();	  Class    <?    super    T>    raw    =    types.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  _typeFactory	15	None	replace
565	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperClass()  :  gson.getSuperClass();  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperClass()  :  gson.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null)?  this.type.getSuperClass()  :  gson.getSuperClass();	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
566	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawSuperClass();  [CE]  cannot  find  symbol  genson  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawSuperClass();	  Class    <?    super    T>    raw    =    gson.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  genson	11	None	replace
567	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawSuperClass(gson).getRawSuperClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawSuperClass(gson).getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawSuperClass(gson).getRawSuperClass();	  Class    <?    super    T>    raw    =    gson.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
568	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperClass(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperClass(type);	  Class    <?    super    T>    raw    =    gson.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
569	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  gson.getSuperType();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
570	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  s.getRawSuperType();  [CE]  cannot  find  symbol  s  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  s.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  s.getRawSuperType();	  Class    <?    super    T>    raw    =    types.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  s	59	None	replace
571	[BUG]  [BUGGY]  Class  <  T>  raw  =  type.toRawClass();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  type.toRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  type.toRawClass();	  Class    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
572	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperType(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toRawSuperType(type);	  Class    <?    super    T>    raw    =    type.toRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
573	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.constructType(type.getRawClass());	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
574	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.declareType(type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.declareType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.declareType(type);	  TypeToken    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
575	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
576	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.serializedName.getRawClass();  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.serializedName.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.serializedName.getRawClass();	  Class    <?    super    T>    raw    =    types.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  serializedName	32	None	replace
577	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson).getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson).getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson).getRawClass();	  Class    <?    super    T>    raw    =    getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
578	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(ARRAY_TYPE);  [CE]  cannot  find  symbol  ARRAY_TYPE  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(ARRAY_TYPE);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(ARRAY_TYPE);	  Class    <?    super    T>    raw    =    type.getRawParameterType(2);    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TYPE	62	None	replace
579	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.serializedName.getRawType();  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.serializedName.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.serializedName.getRawType();	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  serializedName	79	None	replace
580	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawType();  [CE]  cannot  find  symbol  generator  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getRawType();	  Class    <?    super    T>    raw    =    genson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  generator	79	None	replace
581	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getQualifiedName()  :  type.getQualifiedName();  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getQualifiedName()  :  type.getQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getQualifiedName()  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
582	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getQualifiedName()  :  type;  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getQualifiedName()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getQualifiedName()  :  type;	  Class    <?    super    T>    raw    =    this.type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
583	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + ".null ";  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + ".null ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + ".null ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
584	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "no-serialized ";  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "no-serialized ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "no-serialized ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
585	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "none ";  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "none ";  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName()  + "none ";	  Class    <?    super    T>    raw    =    type.getQualifiedName()    +   "n   ";    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
586	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.newInstance();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.newInstance();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.newInstance();	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
587	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.declareSuperClass(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.declareSuperClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.declareSuperClass(type);	  Class    <?    super    T>    raw    =    gson.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
588	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName(),  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName(),  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName(),  type);	  Class    <?    super    T>    raw    =    gson.getQualifiedName();    	non-compiled	[CE]  ';'  expected	45	None	replace
589	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  *  2);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  *  2);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(size()  *  2);	  Class    <?    super    T>    raw    =    type.getRawParameterType(size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
590	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperClass()  :  type);  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperClass()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperClass()  :  type);	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
591	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getSuperClass()  :  type;  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getSuperClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getSuperClass()  :  type;	  Class    <?    super    T>    raw    =    this.type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
592	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawSuperType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawSuperType();	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  ';'  expected	55	None	replace
593	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperParameterType(0);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperParameterType(0);	  Class    <?    super    T>    raw    =    gson.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
594	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  s.getRawSuperClass();  [CE]  cannot  find  symbol  s  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  s.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  s.getRawSuperClass();	  Class    <?    super    T>    raw    =    types.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  s	15	None	replace
595	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  type.getRawType(1));  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  type.getRawType(1));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  type.getRawType(1));	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
596	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(1),  type);	  Class    <?    super    T>    raw    =    type.getRawType(type.getRawType(0));    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	20	None	replace
597	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperclass()  ||  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperclass()  ||  type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperclass()  ||  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
598	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperclass(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperclass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperclass(type);	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
599	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type).getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type).getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.constructType(type).getRawSuperclass();	  Class    <?    super    T>    raw    =    gson.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
600	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperType(type);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawSuperType(type);	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	58	None	replace
601	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getRawSuperType()  :  type;  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getRawSuperType()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null)?  this.type.getRawSuperType()  :  type;	  Class    <?    super    T>    raw    =    this.type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	58	None	replace
602	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	66	None	replace
603	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(serializers);  [CE]  cannot  find  symbol  serializers  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(serializers);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(serializers);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  serializers	66	None	replace
604	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.type);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this.type);	  Class    <?    super    T>    raw    =    type.getRawParameterType(type);    	non-compiled	[CE]  cannot  find  symbol  type	66	None	replace
605	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serialize.getQualifiedName(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serialize.getQualifiedName(),  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serialize.getQualifiedName(),  type);	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  ';'  expected	46	None	replace
606	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  serializedName.getQualifiedName(),  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  serializedName.getQualifiedName(),  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  serializedName.getQualifiedName(),  type);	  Class    <?    super    T>    raw    =    type.getQualifiedName(),    serializedName;    	non-compiled	[CE]  ';'  expected	46	None	replace
607	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperType()  :  type);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperType()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperType()  :  type);	  Class    <?    super    T>    raw    =    this.type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	25	None	replace
608	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  type);  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawSuperclass()  :  type);	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
609	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getRawSuperclass();  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.type.getRawSuperclass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
610	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  fieldNamingStrategy.getRawSuperclass();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  fieldNamingStrategy.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  fieldNamingStrategy.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  ';'  expected	90	None	replace
611	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  scope.getRawSuperclass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  scope.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type,  scope.getRawSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawSuperclass()    :    type.getRawSuperclass();    	non-compiled	[CE]  ';'  expected	90	None	replace
612	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(type,  gson);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(type,  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSubtype(type,  gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
613	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  null);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  null);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  null);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
614	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  alternate);  [CE]  cannot  find  symbol  alternate  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  alternate);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  alternate);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  cannot  find  symbol  alternate	98	None	replace
615	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  deserializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  deserializedName);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	98	None	replace
616	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  this);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  this);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type,  this);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSubtype(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	98	None	replace
617	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  _type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  _type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  _type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  _type.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  _type	35	None	replace
618	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  s.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  s  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  s.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  s.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  s	35	None	replace
619	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperclass()  :  type;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperclass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperclass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
620	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperclass()  :  gson;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperclass()  :  gson;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperclass()  :  gson;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
621	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type);	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type;    	non-compiled	[CE]  ';'  expected	93	None	replace
622	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getName());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getName());	  Class    <?    super    T>    raw    =    type.getRawType(1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
623	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy.getRawParameterType(0));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy.getRawParameterType(0));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	63	None	replace
624	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy.getRawParameterType(1));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy.getRawParameterType(1));  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(this.fieldNamingStrategy.getRawParameterType(1));	  Class    <?    super    T>    raw    =    type.getRawParameterType(type.getRawParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	63	None	replace
625	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperClass()  :  type;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperClass()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperClass()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
626	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperClass()  :  gson;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperClass()  :  gson;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperClass()  :  gson;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type;    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
627	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.resolveType(type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.resolveType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.resolveType(type);	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
628	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  fieldNamingStrategy.getRawClass();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  fieldNamingStrategy.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  fieldNamingStrategy.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  ';'  expected	88	None	replace
629	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getRawClass()  :  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getRawClass()  :  gson.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  type.getRawClass()  :  gson.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
630	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  scope.getRawClass();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  scope.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type,  scope.getRawClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getRawClass()    :    type.getRawClass();    	non-compiled	[CE]  ';'  expected	88	None	replace
631	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperType()  :  type;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperType()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  gson.getSuperType()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
632	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.toString()  :  type;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.toString()  :  type;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.toString()  :  type;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  incompatible  types	87	None	replace
633	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.FUNCTION;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.FUNCTION;  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  TypeToken.FUNCTION;	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type;    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
634	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperParameterType(0);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSuperParameterType(0);	  Class    <?    super    T>    raw    =    gson.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
635	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  typeUtil.getRawType(gson);  [CE]  cannot  find  symbol  typeUtil  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  typeUtil.getRawType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  typeUtil.getRawType(gson);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  typeUtil	80	None	replace
636	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(genson);  [CE]  cannot  find  symbol  genson  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(genson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(genson);	  Class    <?    super    T>    raw    =    gson.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  genson	80	None	replace
637	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.declaringClass().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.declaringClass().restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.declaringClass().restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
638	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.serializedName.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.serializedName.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.serializedName.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
639	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.unknownType();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.unknownType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.unknownType();	  Class    <?    super    T>    raw    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
640	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isPrimitive();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isPrimitive();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isPrimitive();	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
641	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isAssignableFrom(type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isAssignableFrom(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSuperclass()  ||  type.isAssignableFrom(type);	  Class    <?    super    T>    raw    =    type.withSuperclass();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
642	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.restrictByNotNullOrUndefined();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
643	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  new  TypeToken  <  T>(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  new  TypeToken  <  T>(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  new  TypeToken  <  T>(type.getRawClass());	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
644	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.toString();  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.toString();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.toString();	  Class    <?    super    T>    raw    =    type!=    null?    raw    :    type.getRawClass();    	non-compiled	[CE]  incompatible  types	31	None	replace
645	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.cast(gson.getRawClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  type.cast(gson.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.cast(gson.getRawClass());	  TypeToken    <    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
646	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.serializedName();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.serializedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.serializedName();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
647	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.withQualifiedName();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.withQualifiedName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.withQualifiedName();	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
648	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperclass()  :  type);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperclass()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getSuperclass()  :  type);	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	53	None	replace
649	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null? "null "  :  this.type.getSuperclass());  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null? "null "  :  this.type.getSuperclass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null? "null "  :  this.type.getSuperclass());	  Class    <?    super    T>    raw    =    this.type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	53	None	replace
650	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getOwnerClass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getOwnerClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
651	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getName();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getName();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1).getName();	  Class    <?    super    T>    raw    =    type.getRawType(0).getRawType(1);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
652	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperclass()  :  gson.getSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperclass()  :  gson.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperclass()  :  gson.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
653	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type,  scope.getSuperclass();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type,  scope.getSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type,  scope.getSuperclass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperclass()    :    type.getSuperclass();    	non-compiled	[CE]  ';'  expected	92	None	replace
654	[BUG]  [BUGGY]  Gson  raw  =  gson.first.getRawClass();  [CE]  cannot  find  symbol  first  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.first.getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.first.getRawClass();	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  first	38	None	replace
655	[BUG]  [BUGGY]  Gson  raw  =  gson.constructType(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.constructType(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.constructType(type.getRawClass());	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
656	[BUG]  [BUGGY]  Gson  raw  =  gson.newGson(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Gson  raw  =  gson.newGson(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.newGson(type.getRawClass());	  Gson    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
657	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  deserializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type,  deserializedName);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	97	None	replace
658	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type),  gson);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  ';'  expected	97	None	replace
659	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  false);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type,  false);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type,  false);	  Class    <?    super    T>    raw    =    type.getRawType(type);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	97	None	replace
660	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperClass(fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperClass(fieldNamingStrategy);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toRawSuperClass(fieldNamingStrategy);	  Class    <?    super    T>    raw    =    type.toRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	89	None	replace
661	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type).getRawClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type).getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.constructType(type).getRawClass();	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
662	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type.getRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.constructType(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.constructType(type.getRawClass());	  Class    <?    super    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
663	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawClass(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawClass(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawClass(type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
664	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawSuperType(type);  [CE]  cannot  find  symbol  TypeUtil  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawSuperType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawSuperType(type);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
665	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.constructType(gson);  [CE]  cannot  find  symbol  TypeUtil  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.constructType(gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.constructType(gson);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson);    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	43	None	replace
666	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type,  fieldNamingStrategy.getSuperType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type,  fieldNamingStrategy.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type,  fieldNamingStrategy.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  ';'  expected	86	None	replace
667	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.toString();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.toString();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.toString();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
668	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperType()  :  gson.getSuperType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperType()  :  gson.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperType()  :  gson.getSuperType();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperType()    :    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
669	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toArray(new  Class[type.size()  ]);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toArray(new  Class[type.size()  ]);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.toArray(new  Class[type.size()  ]);	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
670	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.subtract(type.toRawClass());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.subtract(type.toRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.subtract(type.toRawClass());	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
671	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.subtract(gson.toRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.subtract(gson.toRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.subtract(gson.toRawClass());	  Class    <?    super    T>    raw    =    type.toRawClass();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
672	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  generator.getSuperType();  [CE]  cannot  find  symbol  generator  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  generator.getSuperType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  generator.getSuperType();	  Class    <?    super    T>    raw    =    types.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  generator	26	None	replace
673	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(serializers,  type);  [CE]  cannot  find  symbol  serializers  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(serializers,  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(serializers,  type);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  serializers	95	None	replace
674	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(this.serializedName);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(this.serializedName);	  Class    <?    super    T>    raw    =    type.getRawSuperType(type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	95	None	replace
675	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type),  gson.getRawType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(type),  gson.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(type),  gson.getRawType();	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  ';'  expected	41	None	replace
676	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson).getRawParameterType(0);  [CE]  cannot  find  symbol  TypeUtil  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson).getRawParameterType(0);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson).getRawParameterType(0);	  Class    <?    super    T>    raw    =    TypeUtil.getRawType(gson).getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	41	None	replace
677	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSuperclass(),  gson);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1).getSuperclass(),  gson);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1).getSuperclass(),  gson);	  Class    <?    super    T>    raw    =    type.getRawType(0).getSuperclass();    	non-compiled	[CE]  ';'  expected	70	None	replace
678	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.newInstance();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.newInstance();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.newInstance();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
679	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.constructType(type).getRawClass();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.constructType(type).getRawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.constructType(type).getRawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
680	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.constructType(type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.constructType(type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.constructType(type);	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
681	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.constructType(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.constructType(type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.constructType(type.getRawClass());	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
682	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.rawClass();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <  T>  raw  =  gson.rawClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.rawClass();	  Class    <    T>    raw    =    gson.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
683	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getRawSuperClass();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson.type.getRawSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.type.getRawSuperClass();	  Class    <?    super    T>    raw    =    this.type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
684	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.first.getRawType();  [CE]  cannot  find  symbol  first  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.first.getRawType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.first.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  first	73	None	replace
685	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.newType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  TypeToken  <  T>  raw  =  gson.newType();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.newType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
686	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type,  fieldNamingStrategy.getSuperClass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type,  fieldNamingStrategy.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type,  fieldNamingStrategy.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  ';'  expected	84	None	replace
687	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperClass()  :  gson.getSuperClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperClass()  :  gson.getSuperClass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson!=  null?  type.getSuperClass()  :  gson.getSuperClass();	  Class    <?    super    T>    raw    =    type!=    null?    gson.getSuperClass()    :    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
688	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  s.getRawSuperclass();  [CE]  cannot  find  symbol  s  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  s.getRawSuperclass();  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  s.getRawSuperclass();	  Class    <?    super    T>    raw    =    types.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  s	5	None	replace
689	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.constructType(type.getRawSuperType());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.constructType(type.getRawSuperType());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.constructType(type.getRawSuperType());	  Class    <?    super    T>    raw    =    type    ==    null?    null    :    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
690	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  type);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type!=  null?  this.type.getRawClass()  :  type);	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	30	None	replace
691	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type);  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type);	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	30	None	replace
692	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type.getRawClass());  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {      [BUGGY]  Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type.getRawClass());  [BUGGY]        if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =(this.type  ==  null?  this.type.getRawClass()  :  type.getRawClass());	  Class    <?    super    T>    raw    =    this.type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	30	None	replace
