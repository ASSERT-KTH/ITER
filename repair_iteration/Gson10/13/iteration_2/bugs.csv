bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperclass();  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
5	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawSuperclass();  [CE]  cannot  find  symbol  types  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol  types	12	None	replace
6	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
7	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
8	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
9	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getSuperClass();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	4	None	replace
10	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getSuperClass();  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol  types	4	None	replace
11	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperClass();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
12	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
13	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
14	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperClass();  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  type	11	None	replace
15	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawSuperClass();  [CE]  cannot  find  symbol  types  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getRawSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol  types	11	None	replace
16	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(1);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(1);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
17	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getConstructor();	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
18	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(2);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(2);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
19	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getRawType(1);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
20	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0));  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0));  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type.getRawType(0));	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
21	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(size()  -  1);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
22	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperType();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
23	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
24	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
25	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getSuperType();  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
26	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getSuperType();  [CE]  cannot  find  symbol  types  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol  types	9	None	replace
27	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
29	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
30	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawClass();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  type	1	None	replace
31	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  raw  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
32	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawClass();  [CE]  cannot  find  symbol  types  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  types	1	None	replace
33	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
34	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  [CE]  incompatible  types  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  incompatible  types	7	None	replace
35	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
38	[BUG]  [BUGGY]  Gson  raw  =  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Gson  raw  =  gson.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Gson  raw  =  gson.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
39	[BUG]  [BUGGY]  Class  <  T>  raw  =  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <  T>  raw  =  type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  type.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
40	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson).getRawType();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  getRawType(gson).getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  getRawType(gson).getRawType();	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
41	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson).getRawType();  [CE]  cannot  find  symbol  TypeUtil  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson).getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson).getRawType();	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	2	None	replace
42	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType();  [CE]  cannot  find  symbol  types  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawType();	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  types	2	None	replace
43	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson);  [CE]  cannot  find  symbol  TypeUtil  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  TypeUtil.getRawType(gson);	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	2	None	replace
44	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawType();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson,  type.getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson,  type.getRawType();	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  ';'  expected	2	None	replace
45	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getQualifiedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
46	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName;  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName(),  serializedName;	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
47	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getQualifiedName();  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getQualifiedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
48	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.restrictByNotNullOrUndefined();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.restrictByNotNullOrUndefined();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
49	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "n ";  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "n ";  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "n ";	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
50	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperclass();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
51	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
52	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
53	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getSuperclass();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
54	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getSuperclass();  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol  types	8	None	replace
55	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperType();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
56	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperType();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
57	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
58	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperType();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
59	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  types.getRawSuperType();  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  types.getRawSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  types.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol  types	10	None	replace
60	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(0);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(0);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawParameterType(0);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
61	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(1);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(1);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(2);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(2);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(2);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(0));  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(type.getRawParameterType(0));	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
64	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(0);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  this.type.getRawParameterType(0);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  this.type.getRawParameterType(0);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
65	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  -  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(size()  -  1);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(size()  -  1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
66	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(type);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(type);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
67	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(1);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawParameterType(1);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawParameterType(1);	  Class    <?    super    T>    raw    =    type.getRawParameterType(0);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
68	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toSuperClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.toSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
69	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(0);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(0);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
70	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
71	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toSuperType();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.toSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
72	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  TypeToken  <  T>  raw  =  gson.getType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getType();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
73	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	TypeToken  <  T>  raw  =  gson.getRawType();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
74	[BUG]  [BUGGY]  Class  <  T>  raw  =  gson.getRawClass();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <  T>  raw  =  gson.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <  T>  raw  =  gson.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
75	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getQualifiedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type  ==  null?  null  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
76	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getQualifiedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  null  :  type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
77	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ "+type.getQualifiedName();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ "+type.getQualifiedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getQualifiedName()  + "_ "+type.getQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
78	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toRawClass();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.toRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
79	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawType();  [CE]  cannot  find  symbol  genson  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  genson.getRawType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  genson.getRawType();	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol  genson	2	None	replace
80	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType(type);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  gson.getRawType(type);	  Class    <?    super    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
81	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.withSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
82	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.serializedName();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.serializedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.serializedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
83	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.withQualifiedName();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.withQualifiedName();	  Class    <?    super    T>    raw    =    type.getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
84	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type.getSuperClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type.getSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type.getSuperClass();	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
85	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type;  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperClass()  :  type;	  Class    <?    super    T>    raw    =    type.getSuperClass();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
86	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.getSuperType();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.getSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type.getSuperType();	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
87	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type;  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type;  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperType()  :  type;	  Class    <?    super    T>    raw    =    type.getSuperType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
88	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type.getRawClass();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type.getRawClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawClass()  :  type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
89	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperClass();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawSuperClass();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
90	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type.getRawSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type.getRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getRawSuperclass()  :  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
91	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawSuperclass();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
92	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type.getSuperclass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type.getSuperclass();	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
93	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type;  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type;  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type!=  null?  gson.getSuperclass()  :  type;	  Class    <?    super    T>    raw    =    type.getSuperclass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
94	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperType();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.toRawSuperType();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.toRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
95	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(type);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType(type);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType(type);	  Class    <?    super    T>    raw    =    type.getRawSuperType();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
96	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass();  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass();  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getOwnerClass();	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
97	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type);  [CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(type);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(type);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T#2>  cannot  be  applied  to  given  types;	6	None	replace
98	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type);  [BUGGY]      if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	93	93	1	replace	Class  <?  super  T>  raw  =  type.getRawType(0).getSubtype(type);	  Class    <?    super    T>    raw    =    type.getRawType(0);    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	6	None	replace
