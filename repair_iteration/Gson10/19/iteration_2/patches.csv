bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    typeAdapter.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
2	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(type);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(type);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(type);	  TypeAdapter    <?>    mapped    =    typeAdapter.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	33	None	replace
3	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  constructor.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  constructor.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  constructor.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    typeAdapter.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	33	None	replace
4	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	133	None	replace
5	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	133	None	replace
6	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	133	None	replace
7	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	133	None	replace
8	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	133	None	replace
9	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	20	None	replace
10	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  context.getAnnotation(JsonAdapter.class);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
11	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	20	None	replace
12	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)	20	None	replace
13	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  description);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	20	None	replace
14	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  Object.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<Object>)  [FE]                                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  Object.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  Object.class);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<Object>)	20	None	replace
15	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
16	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
17	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructor,  fieldType);  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructor,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructor,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	12	None	replace
18	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
19	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
20	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldValue):  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldValue):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldValue):  null;	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
21	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value):  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value):  null;	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
22	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(isPrimitive):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
23	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize,  deserialize);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  :  expected	69	None	replace
24	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(type,  fieldType,  deserialize);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(type,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(type,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  :  expected	69	None	replace
25	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  deserialize);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  :  expected	69	None	replace
26	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array,  deserialize);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  :  expected	69	None	replace
27	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations,  deserialize);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  :  expected	69	None	replace
28	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
29	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
30	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
31	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
32	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
33	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	143	None	replace
34	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  type  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  type	143	None	replace
35	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
36	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
37	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	23	None	replace
38	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	23	None	replace
39	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  fieldType,  constructorConstructor,  deserialize);  [CE]  cannot  find  symbol  prototype  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  fieldType,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  prototype	27	None	replace
40	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
41	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotations):  null;  [CE]  cannot  find  symbol  annotations  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotations):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotations):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  cannot  find  symbol  annotations	3	None	replace
42	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  null;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context,  isPrimitive?  annotation.getTypeAdapter(context):  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context,  isPrimitive?  annotation.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context,  isPrimitive?  annotation.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
44	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType):  null;  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
45	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  deserialize;  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  incompatible  types	55	None	replace
46	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  deserialize?  null  :  isPrimitive;  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  deserialize?  null  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  deserialize?  null  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  incompatible  types	55	None	replace
47	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter.deserialize;  [CE]  cannot  find  symbol  typeAdapter  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter.deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter.deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	55	None	replace
48	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter?  null  :  deserialize;  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter?  null  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter?  null  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	55	None	replace
49	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null  :  deserialize;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  ';'  expected	55	None	replace
50	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    context;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	add	TypeAdapter  <?>  mapped  =  context.getAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    context;    	compilable	  [FE]  ComparisonFailure  	60	1	replace
52	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    context;    	compilable	  [FE]  ComparisonFailure  	60	1	replace
53	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.type;  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.type;	  TypeAdapter    <?>    mapped    =    context;    	non-compiled	[CE]  cannot  find  symbol  type	60	None	replace
54	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  deserialize;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    object;    	non-compiled	[CE]  incompatible  types	50	None	replace
55	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  scope;  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  scope;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  scope;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    object;    	non-compiled	[CE]  cannot  find  symbol  scope	50	None	replace
56	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  description;  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  description;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  description;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    object;    	non-compiled	[CE]  cannot  find  symbol  description	50	None	replace
57	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
58	[BUG]  [BUGGY]  Annotation  annotation  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Annotation  annotation  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Annotation  annotation  =  context.getAnnotation(JsonAdapter.class);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
59	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
60	[BUG]  [BUGGY]  Annotation  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Annotation  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Annotation  annotation  =  field.getAnnotation(JsonAdapter.class);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
61	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  dese  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  dese  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  dese	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  ')'  expected	113	None	replace
62	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  isPrimitive,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  isPrimitive,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  isPrimitive,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
63	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  mapped  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
64	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	65	None	replace
65	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  annotation);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)	65	None	replace
66	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
67	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
68	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  description);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	65	None	replace
69	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
70	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType):  null;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
71	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getTypeAdapter(isPrimitive):  null;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  fieldType.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  incompatible  types	2	None	replace
72	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array):  null;  [CE]  cannot  find  symbol  array  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  cannot  find  symbol  array	2	None	replace
73	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
74	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
75	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	9	None	replace
76	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
77	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  field.getAnnotation(JsonAdapter.class);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    annotation    instanceof    TypeAdapter?    (TypeAdapter    <?>)?(TypeAdapter    <?>)annotated    :    annotation;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
78	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  typeAdapter;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  typeAdapter;	  TypeAdapter    <?>    mapped    =    annotation    instanceof    TypeAdapter?    (TypeAdapter    <?>)?(TypeAdapter    <?>)annotated    :    annotation;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
79	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)typeAdapter  :  annotation;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)typeAdapter  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)typeAdapter  :  annotation;	  TypeAdapter    <?>    mapped    =    annotation    instanceof    TypeAdapter?    (TypeAdapter    <?>)?(TypeAdapter    <?>)annotated    :    annotation;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
80	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  field;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  field;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  field;	  TypeAdapter    <?>    mapped    =    annotation    instanceof    TypeAdapter?    (TypeAdapter    <?>)?(TypeAdapter    <?>)annotated    :    annotation;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
81	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  object;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  object;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  object;	  TypeAdapter    <?>    mapped    =    annotation    instanceof    TypeAdapter?    (TypeAdapter    <?>)?(TypeAdapter    <?>)annotated    :    annotation;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
82	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  field.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  field.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  field.getRawType()  :  field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
83	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  context.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType()  :  context.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	16	None	replace
84	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive?  context.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive?  context.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive?  context.getRawType()  :  field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	16	None	replace
85	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
86	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	16	None	replace
87	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context):  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType):    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
88	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  fieldType.getTypeAdapter(fieldType):  null;  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  fieldType.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  fieldType.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType):    null;    	non-compiled	[CE]  :  expected	1	None	replace
89	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fields.getTypeAdapter(fieldType):  null;  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fields.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fields.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType):    null;    	non-compiled	[CE]  cannot  find  symbol  fields	1	None	replace
90	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldNamingStrategy,  annotation);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldNamingStrategy,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldNamingStrategy,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	109	None	replace
91	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldNamingStrategy,  annotation);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldNamingStrategy,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldNamingStrategy,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	109	None	replace
92	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
93	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldNamingPolicy,  context,  constructor,  annotation);  [CE]  cannot  find  symbol  constructor  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldNamingPolicy,  context,  constructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldNamingPolicy,  context,  constructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
94	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  annotation);  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
95	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldNamingPolicy,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldNamingPolicy,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldNamingPolicy,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	109	None	replace
96	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldNamingStrategy,  annotation);  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldNamingStrategy,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldNamingStrategy,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
97	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation.getTypeAdapter(fieldType,  isPrimitive);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    annotation.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	88	None	replace
98	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation.getTypeAdapter(fieldType,  deserialize);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation.getTypeAdapter(fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation.getTypeAdapter(fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    annotation.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	88	None	replace
99	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	87	None	replace
100	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	87	None	replace
101	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields?  null  :  fieldType.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields?  null  :  fieldType.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields?  null  :  fieldType.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fields	87	None	replace
102	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  context);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
103	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compiler	42	None	replace
104	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  annotation,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  annotation,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
105	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
106	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
107	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
108	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
109	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
110	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  field,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  field,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  field,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
111	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
112	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  typeAdapter.mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  typeAdapter.mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  typeAdapter.mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
113	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(context);	  TypeAdapter    <?>    mapped    =    fieldtype.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
114	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(context);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(context);	  TypeAdapter    <?>    mapped    =    fieldtype.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	139	None	replace
115	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(field);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(field);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(field);	  TypeAdapter    <?>    mapped    =    fieldtype.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
116	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
117	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	81	None	replace
118	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
119	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	81	None	replace
120	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	81	None	replace
121	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
122	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
123	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType.getRawType());  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType.getRawType());  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType.getRawType());	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
124	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  null;  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
125	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  annotation);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
126	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation);  [CE]  :  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
127	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize);  [CE]  :  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
128	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation);  [CE]  :  expected  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
129	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array);  [CE]  :  expected  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(array);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
130	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getReturnType()  :  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getReturnType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getReturnType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
131	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getSerialize()  :  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getSerialize()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getSerialize()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
132	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  annotation;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  annotation;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
133	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getNativeType()  :  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getNativeType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getNativeType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
134	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  typeAdapter;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  typeAdapter;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
135	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	118	None	replace
136	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	118	None	replace
137	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	118	None	replace
138	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	118	None	replace
139	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	118	None	replace
140	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  context):  null;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  context):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    null;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
141	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType,  isPrimitive):  null;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType,  isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType,  isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    null;    	non-compiled	[CE]  incompatible  types	67	None	replace
142	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations):  null;  [CE]  cannot  find  symbol  annotations  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    null;    	non-compiled	[CE]  cannot  find  symbol  annotations	67	None	replace
143	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType,  isPrimitive):  null;  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType,  isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType,  isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    null;    	non-compiled	[CE]  :  expected	67	None	replace
144	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
145	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
146	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	10	None	replace
147	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.isPrimitive?  null  :  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  isPrimitive  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.isPrimitive?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.isPrimitive?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	126	None	replace
148	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  context.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	126	None	replace
149	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()?  null  :  field.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawType()?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	126	None	replace
150	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fields	126	None	replace
151	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  typeAdapter.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  isPrimitive  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  typeAdapter.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  typeAdapter.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	126	None	replace
152	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getPrimitive()  :  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getPrimitive()  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getPrimitive()  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	126	None	replace
153	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  mapped  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  isPrimitive);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
154	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
155	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  context.getConstructorConstructor();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ConstructorConstructor  constructorConstructor  =  context.getConstructorConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ConstructorConstructor  constructorConstructor  =  context.getConstructorConstructor();	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
156	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
157	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
158	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
159	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  context.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  context.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	135	None	replace
160	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  annotations  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotations):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  annotations	135	None	replace
161	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  field.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  field.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  field.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
162	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	117	None	replace
163	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	117	None	replace
164	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	117	None	replace
165	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  jsonAdapterPresent;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  jsonAdapterPresent;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  jsonAdapterPresent;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	53	None	replace
166	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.typeAdapter;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	53	None	replace
167	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType):  null;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    annotation?    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  incompatible  types	4	None	replace
168	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(isPrimitive):  null;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    annotation?    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
169	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field,  isPrimitive?  null  :  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field,  isPrimitive?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field,  isPrimitive?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	75	None	replace
170	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field?  null  :  field.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	75	None	replace
171	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
172	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
173	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
174	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldType,  isPrimitive;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldType,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  fieldType,  isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
175	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive,  annotation;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive,  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive,  annotation;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
176	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  annotation,  isPrimitive;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  annotation,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  annotation,  isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
177	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  deserialize;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  deserialize;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
178	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field,  isPrimitive;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field,  isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
179	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter,  annotation,  isPrimitive;  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter,  annotation,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter,  annotation,  isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	95	None	replace
180	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType?  isPrimitive  :  null;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType?  isPrimitive  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType?  isPrimitive  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  incompatible  types	157	None	replace
181	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  ';'  expected	157	None	replace
182	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  isPrimitive  :  null;  [CE]  cannot  find  symbol  isPrimitive  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  isPrimitive  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  isPrimitive  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	157	None	replace
183	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType  ||  isPrimitive?  fieldType  :  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType  ||  isPrimitive?  fieldType  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType  ||  isPrimitive?  fieldType  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	157	None	replace
184	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  fieldType  :  null;  [CE]  cannot  find  symbol  fields  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  fieldType  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  fieldType  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  cannot  find  symbol  fields	157	None	replace
185	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  isPrimitive.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  isPrimitive.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  isPrimitive.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	73	None	replace
186	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  fieldType.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  fieldType.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  fieldType.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fields	73	None	replace
187	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	73	None	replace
188	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	121	None	replace
189	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	121	None	replace
190	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	121	None	replace
191	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	121	None	replace
192	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  context);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	121	None	replace
193	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructor	121	None	replace
194	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  serialize?  null  :  isPrimitive;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  serialize?  null  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  serialize?  null  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    serialize;    	non-compiled	[CE]  incompatible  types	54	None	replace
195	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null  :  serialize;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null  :  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null  :  serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    serialize;    	non-compiled	[CE]  ';'  expected	54	None	replace
196	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  serialize,  deserialize;  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  serialize,  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  serialize,  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    serialize;    	non-compiled	[CE]  incompatible  types	54	None	replace
197	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
198	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
199	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	25	None	replace
200	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	25	None	replace
201	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(annotation):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
202	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation):  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
203	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(annotation):  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
204	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation):  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
205	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.value;  [CE]  cannot  find  symbol  value  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.value;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  cannot  find  symbol  value	57	None	replace
206	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.fieldType;  [CE]  cannot  find  symbol  fieldType  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  cannot  find  symbol  fieldType	57	None	replace
207	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped,  fieldType.type;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped,  fieldType.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped,  fieldType.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  ';'  expected	57	None	replace
208	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter.type;  [CE]  cannot  find  symbol  typeAdapter  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	57	None	replace
209	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.serialize;  [CE]  cannot  find  symbol  serialize  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  cannot  find  symbol  serialize	57	None	replace
210	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    context;    	non-compiled	[CE]  ';'  expected	91	None	replace
211	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getRawType()  :  fieldType;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getRawType()  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getRawType()  :  fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    context;    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
212	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getRawType()?  fieldType.getRawType()  :  isPrimitive;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getRawType()?  fieldType.getRawType()  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getRawType()?  fieldType.getRawType()  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    context;    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
213	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive;	  final    TypeAdapter    <?>    mapped    =    typeAdapter;    	non-compiled	[CE]  incompatible  types	35	None	replace
214	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType;  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType;	  final    TypeAdapter    <?>    mapped    =    typeAdapter;    	non-compiled	[CE]  incompatible  types	35	None	replace
215	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  context;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  context;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  context;	  final    TypeAdapter    <?>    mapped    =    typeAdapter;    	non-compiled	[CE]  incompatible  types	35	None	replace
216	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  constructor;  [CE]  cannot  find  symbol  constructor  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  constructor;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  constructor;	  final    TypeAdapter    <?>    mapped    =    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  constructor	35	None	replace
217	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldValue):  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldValue):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldValue):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
218	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context):  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
219	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(context):  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
220	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(field):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(field):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(field):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
221	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  annotation.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
222	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	148	None	replace
223	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
224	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  annotation);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)	148	None	replace
225	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  description);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	148	None	replace
226	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
227	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  mapped;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  mapped;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	123	None	replace
228	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  jsonAdapterPresent;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  jsonAdapterPresent;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  jsonAdapterPresent;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	123	None	replace
229	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  fieldType;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	123	None	replace
230	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  deserialize;  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	123	None	replace
231	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  serialize;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	123	None	replace
232	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  method;  [CE]  cannot  find  symbol  method  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  method;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  method;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  method	123	None	replace
233	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	156	None	replace
234	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	156	None	replace
235	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compiler	156	None	replace
236	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation);  [CE]  cannot  find  symbol  type  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  type	156	None	replace
237	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  annotation);  [CE]  cannot  find  symbol  type  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  type	156	None	replace
238	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotation).mapped;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotation).mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotation).mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
239	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotated).mapped;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotated).mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotated).mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
240	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotations).mapped;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotations).mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?(TypeAdapter  <?>)?((  TypeAdapter  <?>)annotations).mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
241	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldValue);  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldValue);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldValue);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
242	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation);  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
243	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawTypeAdapter(annotation);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
244	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(jsonAdapterPresent);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(jsonAdapterPresent);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(jsonAdapterPresent);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
245	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(value);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(value);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(value);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
246	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(typeAdapter);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(typeAdapter);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(typeAdapter);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
247	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.mapped;  [CE]  cannot  find  symbol  mapped  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.mapped;	  TypeAdapter    <?>    mapped    =    fieldType;    	non-compiled	[CE]  cannot  find  symbol  mapped	59	None	replace
248	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined();	  TypeAdapter    <?>    mapped    =    fieldType;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
249	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.type;  [CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.type;	  TypeAdapter    <?>    mapped    =    fieldType;    	non-compiled	[CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	59	None	replace
250	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.map();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.map();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.map();	  TypeAdapter    <?>    mapped    =    fieldType;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
251	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.asParameterType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.asParameterType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.asParameterType();	  TypeAdapter    <?>    mapped    =    fieldType;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
252	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.value;  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.value;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  value	97	None	replace
253	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getValue();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getValue();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getValue();	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
254	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.value;  [CE]  cannot  find  symbol  typeAdapter  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.value;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	97	None	replace
255	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.setValue(isPrimitive);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.setValue(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.setValue(isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
256	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getType();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getType();	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
257	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	106	None	replace
258	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	106	None	replace
259	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  jsonAdapterPresent;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  jsonAdapterPresent;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  jsonAdapterPresent;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	122	None	replace
260	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  serialize;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	122	None	replace
261	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  deserialize;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	122	None	replace
262	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  annotation;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  annotation;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  incompatible  types	122	None	replace
263	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped.typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped.typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped.typeAdapter;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	122	None	replace
264	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(field);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(field);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(field);	  TypeAdapter    <?>    mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
265	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	144	None	replace
266	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	144	None	replace
267	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	144	None	replace
268	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	144	None	replace
269	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(jsonAdapterPresent);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(jsonAdapterPresent);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(jsonAdapterPresent);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
270	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  context.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
271	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(element);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(element);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(element);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
272	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(array);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(array);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(array);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
273	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(annotations);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(annotations);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(annotations);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
274	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(type);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(type);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
275	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	21	None	replace
276	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  annotation.type;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotated  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
277	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.type;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
278	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.get(0):  annotation.type;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.get(0):  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.get(0):  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
279	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.get(fieldType);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.get(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)?(TypeAdapter  <?>)annotations.get(fieldType);	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
280	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
281	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	41	None	replace
282	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compiler	41	None	replace
283	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
284	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  type	84	None	replace
285	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  annotation);  [CE]  cannot  find  symbol  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  annotation);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
286	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  mapped  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
287	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  annotation);  }  [CE]  cannot  find  symbol  mapped  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
288	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructor,  isPrimitive,  annotation);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructor,  isPrimitive,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructor,  isPrimitive,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
289	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType):  null;  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
290	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(annotation):  null;  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
291	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(type):  null;  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(type):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(type):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
292	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(serialize):  null;  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(serialize):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(serialize):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
293	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getRawTypeAdapter(annotation):  null;  [CE]  :  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getRawTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getRawTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
294	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(typeAdapter):  null;  [CE]  :  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(typeAdapter):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(typeAdapter):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
295	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getRawType()  :  null;  [CE]  :  expected  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getRawType()  :  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
296	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
297	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	39	None	replace
298	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
299	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
300	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  isPrimitive,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  isPrimitive,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  isPrimitive,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
301	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(element,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  element  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(element,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(element,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  element	39	None	replace
302	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	39	None	replace
303	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	44	None	replace
304	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation,  isPrimitive);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compiler	44	None	replace
305	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  description);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  description);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(annotation,    fieldType);    	non-compiled	[CE]  :  expected	72	None	replace
306	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive  &&  context.getTypeAdapter(annotation,  fieldType);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive  &&  context.getTypeAdapter(annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive  &&  context.getTypeAdapter(annotation,  fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(annotation,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
307	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  context);  [CE]  :  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  context);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(annotation,    fieldType);    	non-compiled	[CE]  :  expected	72	None	replace
308	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  typeAdapter);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  typeAdapter);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	replace
309	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
310	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  jsonAdapterPresent);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	7	None	replace
311	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  descriptor);  [CE]  cannot  find  symbol  descriptor  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  descriptor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  descriptor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  descriptor	7	None	replace
312	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
313	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  ')'  expected	116	None	replace
314	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  mapped  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  cannot  find  symbol  mapped	116	None	replace
315	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  dese  [CE]  ')'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  dese  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  dese	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  ')'  expected	116	None	replace
316	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
317	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(isPrimitive):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    field.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	129	None	replace
318	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  field.getTypeAdapter(fieldType):  null;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  field.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  field.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    field.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
319	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
320	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructorConstructor,  deserialize);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	22	None	replace
321	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
322	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  annotation.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  annotation.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
323	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldType.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
324	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(isPrimitive);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  context.getConstructor(isPrimitive);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
325	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType,  isPrimitive);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
326	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotation);  [CE]  cannot  find  symbol  FieldUtils  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	141	None	replace
327	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotation,  fieldType);  [CE]  cannot  find  symbol  FieldUtils  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotation,  fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	141	None	replace
328	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  FieldUtils.safeMultiply(isPrimitive);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  FieldUtils.safeMultiply(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  FieldUtils.safeMultiply(isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  ';'  expected	141	None	replace
329	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(type);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(type);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(type);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	141	None	replace
330	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldType,  deserialize);  [CE]  cannot  find  symbol  FieldUtils  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	141	None	replace
331	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotations);  [CE]  cannot  find  symbol  annotations  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotations);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(annotations);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	141	None	replace
332	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
333	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
334	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
335	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  constructorConstructor,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	104	None	replace
336	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
337	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
338	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  structorConstructor  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	40	None	replace
339	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  declaration);  [CE]  cannot  find  symbol  declaration  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  declaration);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  declaration);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  declaration	40	None	replace
340	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(isPrimitive);  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	77	None	replace
341	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getTypeAdapter(context);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
342	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getTypeAdapter(context);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
343	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  context.getTypeAdapter(fieldType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  context.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  context.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	77	None	replace
344	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  context.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.isPrimitive?  null  :  context.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	77	None	replace
345	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  context.getAnnotation(JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  context.getAnnotation(JsonReader.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
346	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  annotation);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  annotation);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
347	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  isPrimitive);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
348	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.class,  JsonReader.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
349	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonReader.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
350	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.TYPE_OBJECT);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.TYPE_OBJECT);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonReader.TYPE_OBJECT);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
351	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
352	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
353	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
354	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  context);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
355	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  context);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
356	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
357	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
358	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
359	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
360	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(fieldType);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	38	None	replace
361	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(fieldType);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	38	None	replace
362	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
363	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
364	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
365	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter();  [CE]  cannot  find  symbol  typeAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	96	None	replace
366	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
367	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field,  annotation.getTypeAdapter();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field,  annotation.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field,  annotation.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  ';'  expected	96	None	replace
368	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getRawType()  :  isPrimitive;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getRawType()  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  fieldType.getRawType()  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    annotation;    	non-compiled	[CE]  incompatible  types	48	None	replace
369	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.type;  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    annotation;    	non-compiled	[CE]  cannot  find  symbol  type	48	None	replace
370	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation,  deserialize;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation,  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation,  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    annotation;    	non-compiled	[CE]  incompatible  types	48	None	replace
371	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldValue);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldValue);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	28	None	replace
372	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped.type;  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  cannot  find  symbol  type	124	None	replace
373	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  isPrimitive  :  mapped;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  isPrimitive  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  isPrimitive  :  mapped;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  incompatible  types	124	None	replace
374	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  isPrimitive  :  mapped;  [CE]  cannot  find  symbol  isPrimitive  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  isPrimitive  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  isPrimitive  :  mapped;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	124	None	replace
375	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  annotation;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  annotation;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  incompatible  types	124	None	replace
376	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  serialize;  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  incompatible  types	124	None	replace
377	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  context.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
378	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	137	None	replace
379	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
380	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
381	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
382	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	137	None	replace
383	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	15	None	replace
384	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  annotation);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)	15	None	replace
385	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType()  :  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	15	None	replace
386	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
387	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  description);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	15	None	replace
388	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.TYPE);  [CE]  cannot  find  symbol  TYPE  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.TYPE);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.TYPE);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  TYPE	15	None	replace
389	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive()?  isPrimitive  :  mapped;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive()?  isPrimitive  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive()?  isPrimitive  :  mapped;	  TypeAdapter    <?>    mapped    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
390	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.isPrimitive()?  isPrimitive  :  mapped;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.isPrimitive()?  isPrimitive  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.isPrimitive()?  isPrimitive  :  mapped;	  TypeAdapter    <?>    mapped    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
391	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive();	  TypeAdapter    <?>    mapped    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
392	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive()?  isPrimitive  :  null;  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive()?  isPrimitive  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive()?  isPrimitive  :  null;	  TypeAdapter    <?>    mapped    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
393	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(isPrimitive);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  incompatible  types	89	None	replace
394	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.getTypeAdapter(isPrimitive);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  incompatible  types	89	None	replace
395	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getTypeAdapter(isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
396	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields?  null  :  fieldType.getTypeAdapter(isPrimitive);  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields?  null  :  fieldType.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields?  null  :  fieldType.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fields	89	None	replace
397	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  annotation,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  annotation,  constructorConstructor,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
398	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  field,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  field,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  field,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
399	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  constructorConstructor,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  constructorConstructor,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
400	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
401	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
402	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  constructor	11	None	replace
403	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  constructor	11	None	replace
404	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  context,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  context,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  context,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
405	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	93	None	replace
406	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	93	None	replace
407	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	93	None	replace
408	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	93	None	replace
409	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.values();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
410	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.values();  [CE]  cannot  find  symbol  typeAdapter  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	98	None	replace
411	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.values();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
412	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.values();  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol  fields	98	None	replace
413	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.values();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
414	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getValues();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getValues();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getValues();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
415	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(context,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
416	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive.getTypeAdapter(fieldType,  context);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive.getTypeAdapter(fieldType,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive.getTypeAdapter(fieldType,  context);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	31	None	replace
417	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
418	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive,  deserialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive,  deserialize);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
419	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fields	31	None	replace
420	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(context,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
421	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
422	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	26	None	replace
423	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
424	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	80	None	replace
425	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	80	None	replace
426	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	80	None	replace
427	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	80	None	replace
428	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	105	None	replace
429	[BUG]  [BUGGY]  ObjectConstructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
430	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
431	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
432	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
433	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
434	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(fieldType):  null;  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	128	None	replace
435	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  fieldType.getRawType()  :  null;  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  fieldType.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  fieldType.getRawType()  :  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	128	None	replace
436	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(context):  null;  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	128	None	replace
437	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(isPrimitive):  null;  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	128	None	replace
438	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  jsonAdapterPresent;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  jsonAdapterPresent;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  jsonAdapterPresent;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	47	None	replace
439	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  null;  [CE]  incompatible  types  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  null;	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	18	None	replace
440	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  typeAdapter;	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	18	None	replace
441	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getSerialize()  :  field.getRawType();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getSerialize()  :  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getSerialize()  :  field.getRawType();	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
442	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  deserialize;  [CE]  incompatible  types  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  deserialize;	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	18	None	replace
443	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType();  [CE]  incompatible  types  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType();	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	18	None	replace
444	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  item;  [CE]  cannot  find  symbol  item  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  item;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  item;	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  item	18	None	replace
445	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field;  [CE]  incompatible  types  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field;	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	18	None	replace
446	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  context);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
447	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
448	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
449	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	82	None	replace
450	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  typeAdapter  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	82	None	replace
451	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	82	None	replace
452	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	82	None	replace
453	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	82	None	replace
454	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  typeAdapter  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	82	None	replace
455	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	90	None	replace
456	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  constructorConstructor);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  type	90	None	replace
457	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	90	None	replace
458	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	115	None	replace
459	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  isPrimitive;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  incompatible  types	52	None	replace
460	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.type;  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  cannot  find  symbol  type	52	None	replace
461	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
462	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.toString();  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.toString();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.toString();	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  incompatible  types	52	None	replace
463	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.map;  [CE]  cannot  find  symbol  map  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.map;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.map;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  cannot  find  symbol  map	52	None	replace
464	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(type);  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(type);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(type);	  TypeAdapter    <?>    mapped    =    field.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol  type	29	None	replace
465	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getTypeToken();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldType.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
466	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  annotation.getTypeToken();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  annotation.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  annotation.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
467	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fields.getTypeToken();  [CE]  cannot  find  symbol  fields  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fields.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fields.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  fields	19	None	replace
468	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  context.getTypeToken();  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  context.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  context.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
469	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  type.getTypeToken();  [CE]  cannot  find  symbol  type  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  type.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  type.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  type	19	None	replace
470	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field,  annotation.getTypeToken();  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  field,  annotation.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  field,  annotation.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  ';'  expected	19	None	replace
471	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	85	None	replace
472	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	85	None	replace
473	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	85	None	replace
474	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.type;  [CE]  type  has  private  access  in  Field  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.type;	  TypeAdapter    <?>    mapped    =    field;    	non-compiled	[CE]  type  has  private  access  in  Field	119	None	replace
475	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getRawType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getRawType();	  TypeAdapter    <?>    mapped    =    field;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
476	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.mapped;  [CE]  cannot  find  symbol  mapped  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.mapped;	  TypeAdapter    <?>    mapped    =    field;    	non-compiled	[CE]  cannot  find  symbol  mapped	119	None	replace
477	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getType();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getType();	  TypeAdapter    <?>    mapped    =    field;    	non-compiled	[CE]  incompatible  types	119	None	replace
478	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.TYPE_OBJECT);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.TYPE_OBJECT);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.TYPE_OBJECT);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
479	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  context.getAnnotation(JsonToken.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  context.getAnnotation(JsonToken.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
480	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonToken.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonToken.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
481	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  isPrimitive);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
482	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.CLASS);  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.CLASS);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.CLASS);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
483	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  annotation);  [CE]  cannot  find  symbol  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  annotation);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
484	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getRawType()  :  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getRawType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
485	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getRawType()  :  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getRawType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
486	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getReturnType()  :  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getReturnType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getReturnType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
487	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getRawType()  :  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getRawType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
488	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getValue()  :  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getValue()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getValue()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
489	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(element);  [CE]  cannot  find  symbol  element  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(element);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(element);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  element	138	None	replace
490	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  value	138	None	replace
491	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  context.getAnnotation(JsonAdapter.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
492	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
493	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
494	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldType.getAnnotation(JsonAdapter.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
495	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
496	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  description);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
497	[BUG]  [BUGGY]  mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  context.getAnnotation(JsonAdapter.class);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
498	[BUG]  [BUGGY]  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  annotation.getAnnotation(JsonAdapter.class);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
499	[BUG]  [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  mapped  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
500	[BUG]  [BUGGY]  mapped  =  typeAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  typeAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  typeAdapter.getAnnotation(JsonAdapter.class);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
501	[BUG]  [BUGGY]  mapped  =  fields.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  fields.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  fields.getAnnotation(JsonAdapter.class);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
502	[BUG]  [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.TYPE);  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.TYPE);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  field.getAnnotation(JsonAdapter.TYPE);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
503	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  mapped  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  mapped	145	None	replace
504	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
505	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  mapped  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  mapped	145	None	replace
506	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(isPrimitive):  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  ';'  expected	100	None	replace
507	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(isPrimitive):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  ';'  expected	100	None	replace
508	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive):  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  ';'  expected	100	None	replace
509	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(isPrimitive):  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  ';'  expected	100	None	replace
510	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	111	None	replace
511	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
512	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  annotation);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,JsonAdapter)	111	None	replace
513	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  description);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	111	None	replace
514	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  annotation.getAnnotation(JsonAdapter.class);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
515	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  name);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	111	None	replace
516	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(isPrimitive);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getConstructor(isPrimitive);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
517	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldConstructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldConstructor.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldConstructor.getConstructor();	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
518	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field,  annotation.getConstructor();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field,  annotation.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field,  annotation.getConstructor();	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  ';'  expected	149	None	replace
519	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	37	None	replace
520	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	37	None	replace
521	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	37	None	replace
522	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  type  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  type	37	None	replace
523	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  isPrimitive);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	37	None	replace
524	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.values;  [CE]  cannot  find  symbol  values  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.values;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.values;	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol  values	99	None	replace
525	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.path;  [CE]  cannot  find  symbol  path  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.path;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.path;	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol  path	99	None	replace
526	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getMap();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getMap();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getMap();	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
527	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.data;  [CE]  cannot  find  symbol  data  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.data;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.data;	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol  data	99	None	replace
528	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  annotation,  fieldType);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  annotation,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
529	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  fieldType,  annotation);  [CE]  cannot  find  symbol  prototype  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  prototype	45	None	replace
530	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  mapped;  [CE]  variable  mapped  might  not  have  been  initialized  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  mapped;	  TypeAdapter    <?>    mapped    =    input;    	non-compiled	[CE]  variable  mapped  might  not  have  been  initialized	94	None	replace
531	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	130	None	replace
532	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	130	None	replace
533	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  fieldType,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	130	None	replace
534	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  method,  fieldType,  deserialize);  [CE]  cannot  find  symbol  method  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  method,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  method,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  method	130	None	replace
535	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	132	None	replace
536	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	132	None	replace
537	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  annotation,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  annotation,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	132	None	replace
538	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation,  isPrimitive);  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  type	132	None	replace
539	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  constructorConstructor;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  constructorConstructor;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  constructorConstructor;	  TypeAdapter    <?>    mapped    =    constructor;    	non-compiled	[CE]  incompatible  types	61	None	replace
540	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getConstructor();	  TypeAdapter    <?>    mapped    =    constructor;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
541	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(fieldType);  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	78	None	replace
542	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(fieldType,  isPrimitive);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	78	None	replace
543	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(fieldType,  annotation);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  context.getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	78	None	replace
544	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
545	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(fieldType,  isPrimitive);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  annotation.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    annotation.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	74	None	replace
546	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	24	None	replace
547	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  context,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	24	None	replace
548	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	24	None	replace
549	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  deserialize);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
550	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  fieldValue);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  fieldValue);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  fieldValue);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
551	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType);  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
552	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  typeAdapter);  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  typeAdapter);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  typeAdapter);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
553	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  serialize);  [CE]  :  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  serialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
554	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  annotation);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	136	None	replace
555	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation,  context);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation,  context);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
556	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  isPrimitive);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  incompatible  types	136	None	replace
557	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  mapped.getTypeAdapter(fieldType,  annotation);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  mapped.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  mapped.getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	136	None	replace
558	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize):  null;  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
559	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize):  null;  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
560	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
561	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
562	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
563	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class,  isPrimitive);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
564	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.TYPE);  [CE]  cannot  find  symbol  Annotation  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.TYPE);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.TYPE);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol  Annotation	64	None	replace
565	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
566	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getAnnotation(Annotation.class);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  incompatible  types	120	None	replace
567	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field?  null  :  field.getAnnotation(Annotation.class);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  incompatible  types	120	None	replace
568	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field,  isPrimitive?  null  :  field.getAnnotation(Annotation.class);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field,  isPrimitive?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field,  isPrimitive?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  ';'  expected	120	None	replace
569	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
570	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields?  null  :  field.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  fields  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol  fields	120	None	replace
571	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getRawType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getRawType();	  TypeAdapter    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
572	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getReturnType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getReturnType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getReturnType();	  TypeAdapter    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
573	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getRawType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getRawType();	  TypeAdapter    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
574	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getRawType();  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getRawType();	  TypeAdapter    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fields	92	None	replace
575	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  isPrimitive);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,boolean)	17	None	replace
576	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,boolean)  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  serialize);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,boolean)	17	None	replace
577	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  jsonAdapterPresent);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  jsonAdapterPresent);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	17	None	replace
578	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,String)  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  name);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  name);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,String)	17	None	replace
579	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  description);  [CE]  cannot  find  symbol  description  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  description);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol  description	17	None	replace
580	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  context.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  context.getAnnotation(JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  context.getAnnotation(JsonReader.class);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
581	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,JsonAdapter)  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  annotation);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonReader>,JsonAdapter)	17	None	replace
582	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
583	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	108	None	replace
584	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
585	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
586	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
587	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
588	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(field,  context,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(field,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(field,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
589	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  isPrimitive;  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  incompatible  types	56	None	replace
590	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  fieldType;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  ';'  expected	56	None	replace
591	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null;  [CE]  incompatible  types  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  incompatible  types	56	None	replace
592	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getRawType();  [CE]  incompatible  types  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  incompatible  types	56	None	replace
593	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.restrictByNotNullOrUndefined();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.restrictByNotNullOrUndefined();	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
594	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(annotation,  isPrimitive);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	76	None	replace
595	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	107	None	replace
596	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	107	None	replace
597	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.mapped;  [CE]  cannot  find  symbol  mapped  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.mapped;	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol  mapped	34	None	replace
598	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.type;  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.type;	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol  type	34	None	replace
599	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.map;  [CE]  cannot  find  symbol  map  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.map;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.map;	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol  map	34	None	replace
600	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive;	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  incompatible  types	34	None	replace
601	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter();	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
602	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
603	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
604	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
605	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
606	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	86	None	replace
607	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  typeAdapter;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	36	None	replace
608	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.type;  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  mapped.type;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  cannot  find  symbol  type	36	None	replace
609	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation;  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  annotation;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  incompatible  types	36	None	replace
610	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped;  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  incompatible  types	36	None	replace
611	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  serialize;  [CE]  incompatible  types  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  serialize;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  incompatible  types	36	None	replace
612	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getRawType();  [CE]  incompatible  types  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.getRawType();	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  incompatible  types	36	None	replace
613	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	131	None	replace
614	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	131	None	replace
615	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(type,  context,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	131	None	replace
616	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	131	None	replace
617	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	154	None	replace
618	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  typeAdapter;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	154	None	replace
619	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation;  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  incompatible  types	154	None	replace
620	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	154	None	replace
621	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeNegate(fieldType.getRawType());  [CE]  cannot  find  symbol  FieldUtils  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeNegate(fieldType.getRawType());  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeNegate(fieldType.getRawType());	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	154	None	replace
622	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getRawType();  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType.getRawType();	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  incompatible  types	154	None	replace
623	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
624	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
625	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
626	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  context.getRawType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  context.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  context.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  ';'  expected	134	None	replace
627	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  isPrimitive.getRawType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  isPrimitive.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  isPrimitive.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  ';'  expected	134	None	replace
628	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType,  isPrimitive):  field.getRawType();  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType,  isPrimitive):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  context.getTypeAdapter(fieldType,  isPrimitive):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  incompatible  types	134	None	replace
629	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  serialize?  fieldType.getRawType()  :  isPrimitive;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  serialize?  fieldType.getRawType()  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  serialize?  fieldType.getRawType()  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    serialize;    	non-compiled	[CE]  incompatible  types	51	None	replace
630	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  serialize,  deserialize;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  serialize,  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  serialize,  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    serialize;    	non-compiled	[CE]  incompatible  types	51	None	replace
631	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  serialize;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawType()  :  serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    serialize;    	non-compiled	[CE]  ';'  expected	51	None	replace
632	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	22	None	replace
633	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldtype.getTypeAdapter(context);  [CE]  cannot  find  symbol  fieldtype  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldtype.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldtype.getTypeAdapter(context);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldtype	38	None	replace
634	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
635	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	replace
636	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldValue.values();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldValue.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  fieldValue.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  ';'  expected	98	None	replace
637	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	24	None	replace
638	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  fieldType);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	15	None	replace
639	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  serialize);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	15	None	replace
640	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  annotation.getTypeAdapter(annotation):  null;  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  annotation.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  annotation.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ')'  expected	5	None	replace
641	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  context.getTypeAdapter(annotation):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  context.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  context.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
642	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType),  null;  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType),  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(fieldType),  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
643	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields[isPrimitive?  null  :  field.getAnnotation(Annotation.class);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields[isPrimitive?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields[isPrimitive?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  ']'  expected	120	None	replace
644	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
645	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
646	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldNamingStrategy,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldNamingStrategy,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldNamingStrategy,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	43	None	replace
647	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.hasType()?  null  :  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.hasType()?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.hasType()?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
648	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.isPrimitive?  null  :  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.isPrimitive?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.isPrimitive?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	126	None	replace
649	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
650	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
651	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
652	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
653	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
654	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
655	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  annotation;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  annotation;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  ';'  expected	52	None	replace
656	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  field.getAnnotation(Annotation.class);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  ';'  expected	52	None	replace
657	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  fieldType;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive?  null  :  fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  ';'  expected	52	None	replace
658	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  null  :  annotation;  [CE]  cannot  find  symbol  isPrimitive  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  null  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  null  :  annotation;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	52	None	replace
659	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	27	None	replace
660	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructor,  deserialize);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	27	None	replace
661	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  annotation.getAnnotation(JsonAdapter.class);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
662	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	20	None	replace
663	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context,  annotation):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context,  annotation):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context,  annotation):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
664	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation):  field.getRawType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType,  annotation):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  ';'  expected	134	None	replace
665	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  context.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldType):  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	137	None	replace
666	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getNativeType(UNKNOWN_TYPE):  fieldType.getRawType();  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getNativeType(UNKNOWN_TYPE):  fieldType.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getNativeType(UNKNOWN_TYPE):  fieldType.getRawType();	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	18	None	replace
667	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getRawType();	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
668	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  fieldValue;  [CE]  cannot  find  symbol  fieldValue  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  fieldValue;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  fieldValue;	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
669	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getJsonType().getRawType();  [CE]  :  expected  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getJsonType().getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getJsonType().getRawType();	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  :  expected	18	None	replace
670	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive);  [CE]  cannot  find  symbol  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
671	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  isPrimitive);  }  [CE]  cannot  find  symbol  mapped  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  isPrimitive);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  isPrimitive);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
672	[BUG]  [BUGGY]  if(!serialize)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  mapped  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!serialize)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!serialize)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	110	None	replace
673	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
674	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
675	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
676	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
677	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  constructorConstructor,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
678	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive;  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	97	None	replace
679	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	37	None	replace
680	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  compiler	37	None	replace
681	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context?  null  :  fieldType.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context?  null  :  fieldType.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context?  null  :  fieldType.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	78	None	replace
682	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  constructor;  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  constructor;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  constructor;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  constructor	123	None	replace
683	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	23	None	replace
684	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
685	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	105	None	replace
686	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeConstructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  typeConstructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(typeConstructor,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeConstructor	105	None	replace
687	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  serialize);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  :  expected	155	None	replace
688	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
689	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
690	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  prototype  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(prototype,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  prototype	26	None	replace
691	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  serialized;  [CE]  cannot  find  symbol  serialized  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  serialized;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  serialized;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    serialize;    	non-compiled	[CE]  cannot  find  symbol  serialized	51	None	replace
692	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context  :  context;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context  :  context;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context  :  context;	  TypeAdapter    <?>    mapped    =    context;    	non-compiled	[CE]  incompatible  types	60	None	replace
693	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getNativeType(UNKNOWN_TYPE):  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getNativeType(UNKNOWN_TYPE):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getNativeType(UNKNOWN_TYPE):  null;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
694	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  type;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  type;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
695	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
696	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fields.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fields  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fields.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fields.getRawType()  :  field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fields	16	None	replace
697	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	107	None	replace
698	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  array;  [CE]  cannot  find  symbol  array  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  array;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  array;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    object;    	non-compiled	[CE]  cannot  find  symbol  array	50	None	replace
699	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	replace
700	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
701	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
702	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
703	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
704	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  field,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  field,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  field,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
705	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  field,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  compiler  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  field,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  field,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
706	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	121	None	replace
707	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  fieldType.getTypeAdapter(isPrimitive);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  fieldType.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  fieldType.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  incompatible  types	89	None	replace
708	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(isPrimitive,  deserialize);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(isPrimitive,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(isPrimitive,  deserialize);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  incompatible  types	89	None	replace
709	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(value);  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(value);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(value);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(isPrimitive);    	non-compiled	[CE]  incompatible  types	89	None	replace
710	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldAdapter.getAnnotation(JsonAdapter.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
711	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  typeAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  typeAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  typeAdapter.getAnnotation(JsonAdapter.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
712	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fields.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fields.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fields.getAnnotation(JsonAdapter.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
713	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  constructor;  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  constructor;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  constructor;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    method;    	non-compiled	[CE]  cannot  find  symbol  constructor	103	None	replace
714	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(field):  null;  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(field):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  annotation.getTypeAdapter(field):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	128	None	replace
715	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  context.getTypeAdapter(annotation):  null;  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  context.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType,  context.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	128	None	replace
716	[BUG]  [BUGGY]  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
717	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
718	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  isPrimitive;  [CE]  cannot  find  symbol  isPrimitive  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  isPrimitive;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	56	None	replace
719	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  constructor.getTypeAdapter(context);  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  constructor.getTypeAdapter(context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  constructor.getTypeAdapter(context);	  TypeAdapter    <?>    mapped    =    fieldtype.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol  constructor	139	None	replace
720	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType;  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  incompatible  types	36	None	replace
721	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	148	None	replace
722	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<JsonAdapter>)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<JsonAdapter>)	148	None	replace
723	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  constructor;  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  constructor;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  constructor;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  constructor	122	None	replace
724	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(annotation):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
725	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
726	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
727	[BUG]  [BUGGY]  mapped  =  constructor.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  constructor.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  constructor.getAnnotation(JsonAdapter.class);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
728	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  [CE]  cannot  assign  a  value  to  final  variable  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  mapped	156	None	replace
729	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	156	None	replace
730	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  structorConstructor  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	156	None	replace
731	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    annotation;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
732	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType  :  mapped;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType  :  mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType  :  mapped;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  ';'  expected	124	None	replace
733	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
734	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
735	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  typeAdapter.getConstructor();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  typeAdapter.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  typeAdapter.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
736	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	117	None	replace
737	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	117	None	replace
738	[BUG]  [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
739	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
740	[BUG]  [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
741	[BUG]  [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(value,  isPrimitive,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
742	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
743	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType);  [CE]  cannot  find  symbol  compilerConstructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  context,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	108	None	replace
744	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive  ||  mapped.isPrimitive();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive  ||  mapped.isPrimitive();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive  ||  mapped.isPrimitive();	  TypeAdapter    <?>    mapped    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
745	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	81	None	replace
746	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
747	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
748	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
749	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	80	None	replace
750	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	80	None	replace
751	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	80	None	replace
752	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	80	None	replace
753	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	80	None	replace
754	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.getAnnotation(JsonAdapter.class);	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
755	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.value;  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.value;	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol  value	34	None	replace
756	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldNamingStrategy);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldNamingStrategy);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	141	None	replace
757	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(value);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(value);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  value	141	None	replace
758	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  delegate);  [CE]  cannot  find  symbol  delegate  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  delegate);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  delegate);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  delegate	7	None	replace
759	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(fieldType);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	87	None	replace
760	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(annotation,  isPrimitive);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  fieldType.getTypeAdapter(annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	87	None	replace
761	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	25	None	replace
762	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    field.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	129	None	replace
763	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	130	None	replace
764	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  methodType,  deserialize);  [CE]  cannot  find  symbol  methodType  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  methodType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  methodType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  methodType	130	None	replace
765	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  name,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  name,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  name,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	130	None	replace
766	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  context):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  context):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  context):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
767	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(context):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
768	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotations);  [CE]  cannot  find  symbol  annotations  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotations);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotations);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  annotations	40	None	replace
769	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  info);  [CE]  cannot  find  symbol  info  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  info);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  info);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  info	40	None	replace
770	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  warning);  [CE]  cannot  find  symbol  warning  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  warning);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  warning);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  warning	40	None	replace
771	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getRawType()  :  null;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  fieldType.getRawType()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  fieldType.getRawType()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  incompatible  types	46	None	replace
772	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.field;  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.field;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.field;	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol  field	99	None	replace
773	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  constructorConstructor);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
774	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
775	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  object;  [CE]  cannot  find  symbol  object  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  object;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  object;	  final    TypeAdapter    <?>    mapped    =    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  object	35	None	replace
776	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	90	None	replace
777	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType);  [CE]  cannot  find  symbol  structorConstructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	90	None	replace
778	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  context):  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  context):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
779	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotations.getTypeAdapter(fieldType):  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotations.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotations.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
780	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(context):  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(context):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(context):  null;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	102	None	replace
781	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  typeAdapter;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	157	None	replace
782	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
783	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  isPrimitive  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  context.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  context.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	77	None	replace
784	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  JsonToken.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  JsonToken.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getAnnotation(JsonToken.class,  JsonToken.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
785	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fields.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fields.getAnnotation(JsonToken.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fields.getAnnotation(JsonToken.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
786	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	82	None	replace
787	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	82	None	replace
788	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	82	None	replace
789	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
790	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType):  context.getTypeAdapter(fieldType,  isPrimitive);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType):  context.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType):  context.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	136	None	replace
791	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  annotation);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	136	None	replace
792	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  serialize);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  serialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    serialize);    	non-compiled	[CE]  :  expected	71	None	replace
793	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  field.getTypeAdapter(isPrimitive):  null;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  field.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  field.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    annotation?    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  incompatible  types	4	None	replace
794	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  null?  context.getTypeAdapter(fieldType):  null;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  null?  context.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  null?  context.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    annotation?    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  incompatible  types	4	None	replace
795	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  fieldType.getTypeAdapter(annotation);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  fieldType.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  fieldType.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	73	None	replace
796	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  fieldType.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  fieldType.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  fieldType.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	73	None	replace
797	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType(isPrimitive);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawType(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawType(isPrimitive);	  TypeAdapter    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	92	None	replace
798	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  null;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldType,  annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    null;    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
799	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	115	None	replace
800	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	115	None	replace
801	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  dese  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  dese  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  dese	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
802	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  des  [CE]  ')'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  des  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  des	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
803	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  dese  [CE]  ')'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  dese  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  dese	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
804	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  delegate);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  delegate);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  delegate);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	115	None	replace
805	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  serialize;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  serialize;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
806	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  fieldType;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  fieldType;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
807	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  typeAdapter;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  isPrimitive,  typeAdapter;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
808	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getParameterType(0);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getParameterType(0);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getParameterType(0);	  TypeAdapter    <?>    mapped    =    field;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
809	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  structorConstructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	9	None	replace
810	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldtype.getTypeToken();  [CE]  cannot  find  symbol  fieldtype  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldtype.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldtype.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  fieldtype	19	None	replace
811	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	65	None	replace
812	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  serialize);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	65	None	replace
813	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  constructorConstructor);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
814	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.type;  [CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldType.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	57	None	replace
815	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.type;  [CE]  incompatible  types  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  mapped.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  incompatible  types	57	None	replace
816	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.type;  [CE]  type  has  private  access  in  Field  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped.type;    	non-compiled	[CE]  type  has  private  access  in  Field	57	None	replace
817	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
818	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
819	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter?  null  :  serialize;  [CE]  cannot  find  symbol  typeAdapter  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter?  null  :  serialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter?  null  :  serialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    serialize;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	54	None	replace
820	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldType.getTypeAdapter();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldType.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  fieldType.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  ';'  expected	96	None	replace
821	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  constructorConstructor);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	93	None	replace
822	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(isPrimitive);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  null  :  field.getTypeAdapter(isPrimitive);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  incompatible  types	76	None	replace
823	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldtype.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  fieldtype  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldtype.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldtype.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldtype	30	None	replace
824	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  typeAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  typeAdapter  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  typeAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  typeAdapter.getAnnotation(JsonAdapter.class);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	111	None	replace
825	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	111	None	replace
826	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
827	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
828	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
829	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
830	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  name);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  name);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  name);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
831	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.type  :  annotation.type;  [CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.type  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.type  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	62	None	replace
832	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  typeAdapter  :  annotation.type;  [CE]  cannot  find  symbol  isPrimitive  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  typeAdapter  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  typeAdapter  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	62	None	replace
833	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType  :  annotation.type;  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	62	None	replace
834	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  typeAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  typeAdapter.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	127	None	replace
835	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fields	127	None	replace
836	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation,  context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation,  context);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(annotation,  context);	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
837	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  incompatible  types	154	None	replace
838	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  object;  [CE]  cannot  find  symbol  object  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  object;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  object;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  cannot  find  symbol  object	154	None	replace
839	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)typeAdapter  :  annotation.mapped;  [CE]  cannot  find  symbol  typeAdapter  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)typeAdapter  :  annotation.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)typeAdapter  :  annotation.mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	63	None	replace
840	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)typeAdapter;  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  (TypeAdapter  <?>)typeAdapter;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  :  expected	63	None	replace
841	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
842	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	39	None	replace
843	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType):  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType):    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
844	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  JsonReader.getAnnotation(field.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  JsonReader.getAnnotation(field.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  JsonReader.getAnnotation(field.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
845	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fields.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fields.getAnnotation(JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fields.getAnnotation(JsonReader.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
846	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  typeAdapter.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  typeAdapter.getAnnotation(JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  typeAdapter.getAnnotation(JsonReader.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
847	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  instance,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  instance  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  instance,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  instance,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  instance	131	None	replace
848	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  type;  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  type;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
849	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldNamingPolicy,  annotation);  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldNamingPolicy,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldNamingPolicy,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
850	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  fieldNamingPolicy);  [CE]  cannot  find  symbol  constructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  fieldNamingPolicy);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  fieldNamingPolicy);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
851	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotations.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotations.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotations.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
852	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotated.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotated.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotated.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
853	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldtype?  null  :  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fieldtype  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldtype?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldtype?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldtype	75	None	replace
854	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  serialize?  null  :  deserialize;  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  serialize?  null  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  serialize?  null  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  incompatible  types	55	None	replace
855	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
856	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  factory,  fieldType,  annotation);  [CE]  cannot  find  symbol  factory  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  factory,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  factory,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  factory	12	None	replace
857	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(value);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(value);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(value);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
858	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  context  :  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  context  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  context  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
859	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  fieldNamingStrategy);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  fieldNamingStrategy);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  fieldNamingStrategy);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
860	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  context,  deserialize);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  context,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation.getTypeAdapter(fieldType,  context,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  :  expected	70	None	replace
861	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(jsonAdapterPresent)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	80	None	replace
862	[BUG]  [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(!isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	80	None	replace
863	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldValue.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fieldValue.getAnnotation(JsonReader.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fieldValue.getAnnotation(JsonReader.class);	  Constructor    <?>    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
864	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  fieldNamingStrategy,  isPrimitive);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  fieldNamingStrategy,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  fieldNamingStrategy,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	132	None	replace
865	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	132	None	replace
866	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  deserialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  deserialize,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  deserialize,  isPrimitive);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	132	None	replace
867	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	143	None	replace
868	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	143	None	replace
869	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
870	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
871	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeToken  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeToken    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	143	None	replace
872	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(annotation);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  field.getConstructor(annotation);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
873	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType);	  final    TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
874	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldValue);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldValue);	  TypeAdapter    <?>    mapped    =    field.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	29	None	replace
875	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldPrimitive?  null  :  field.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  fieldPrimitive  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldPrimitive?  null  :  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldPrimitive?  null  :  field.getAnnotation(Annotation.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol  fieldPrimitive	120	None	replace
876	[BUG]  [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
877	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
878	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(serializedName,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(serializedName,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	114	None	replace
879	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  annotation);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  ';'  expected	124	None	replace
880	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  deserialize;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  mapped,  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    mapped;    	non-compiled	[CE]  incompatible  types	124	None	replace
881	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  fieldNamingStrategy);  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  fieldNamingStrategy);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  constructor,  fieldNamingStrategy);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	109	None	replace
882	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldNamingStrategy,  annotation);  [CE]  cannot  find  symbol  structorConstructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldNamingStrategy,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldNamingStrategy,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	109	None	replace
883	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldName,  annotation);  [CE]  cannot  find  symbol  fieldName  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldName,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldName,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldNamingStrategy,    context,    constructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldName	109	None	replace
884	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	85	None	replace
885	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(structor,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(structor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(structor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	85	None	replace
886	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonAdapter.class,  name);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	20	None	replace
887	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
888	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
889	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(fieldType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	77	None	replace
890	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
891	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  field.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  isPrimitive  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  field.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  field.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	77	None	replace
892	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  serialize,  deserialize,  fieldNamingStrategy);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	39	None	replace
893	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  objectType,  deserialize);  [CE]  cannot  find  symbol  objectType  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  objectType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  objectType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  objectType	130	None	replace
894	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  bean,  fieldType,  deserialize);  [CE]  cannot  find  symbol  bean  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  bean,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  bean,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  bean	130	None	replace
895	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  beanType,  deserialize);  [CE]  cannot  find  symbol  beanType  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  beanType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  beanType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanType	130	None	replace
896	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  deserialize?  null  :  deserialize;  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  deserialize?  null  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  deserialize?  null  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  incompatible  types	55	None	replace
897	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  deserialize;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  deserialize;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  deserialize;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    deserialize;    	non-compiled	[CE]  ';'  expected	55	None	replace
898	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
899	[BUG]  [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    Constructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
900	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
901	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	142	None	replace
902	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	142	None	replace
903	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  ObjectConstructor  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    ObjectConstructor    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	142	None	replace
904	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorconstructor,  context,  fieldType,  annotation);  [CE]  cannot  find  symbol  constructorconstructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorconstructor,  context,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorconstructor,  context,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructorconstructor	41	None	replace
905	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType):  field.getRawType();	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
906	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  context.getTypeAdapter(fieldType);	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
907	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class);	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
908	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  incompatible  types	34	None	replace
909	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.map();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  annotation.map();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  annotation.map();	  final    TypeAdapter    <?>    mapped    =    annotation;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
910	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.mapped;  [CE]  :  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  :  expected	63	None	replace
911	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.mapped;  [CE]  :  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  :  expected	63	None	replace
912	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.mapped;  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  :  expected	63	None	replace
913	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  field.mapped;  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  field.mapped;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  field.mapped;	  TypeAdapter    <?>    mapped    =    annotation.mapped;    	non-compiled	[CE]  :  expected	63	None	replace
914	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawClass()  :  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawClass()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawClass()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	46	None	replace
915	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawParameterType(0);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getRawParameterType(0);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getRawParameterType(0);	  TypeAdapter    <?>    mapped    =    fieldType.getRawType()    :    null;    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
916	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.value  :  annotation.value;  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.value  :  annotation.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.value  :  annotation.value;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  value	97	None	replace
917	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldValue.value  :  annotation.value;  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldValue.value  :  annotation.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldValue.value  :  annotation.value;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  fieldValue	97	None	replace
918	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.toString()  :  annotation.value;  [CE]  cannot  find  symbol  value  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.toString()  :  annotation.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.toString()  :  annotation.value;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  value	97	None	replace
919	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.value  :  annotation.value;  [CE]  cannot  find  symbol  value  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.value  :  annotation.value;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.value  :  annotation.value;	  TypeAdapter    <?>    mapped    =    annotation.value;    	non-compiled	[CE]  cannot  find  symbol  value	97	None	replace
920	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  isPrimitive):  field.getRawType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  isPrimitive):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  isPrimitive):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getRawType();    	non-compiled	[CE]  ';'  expected	134	None	replace
921	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.getTypeAdapter()  :  annotation;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.getTypeAdapter()  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.getTypeAdapter()  :  annotation;	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
922	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.getTypeAdapter()  :  annotation.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.getTypeAdapter()  :  annotation.getTypeAdapter();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation!=  null?  fieldType.getTypeAdapter()  :  annotation.getTypeAdapter();	  TypeAdapter    <?>    mapped    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
923	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
924	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value,  isPrimitive);  [CE]  cannot  find  symbol  value  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(value,  isPrimitive);	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  value	31	None	replace
925	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation,  deserialize);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    annotation;    	non-compiled	[CE]  ';'  expected	48	None	replace
926	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.toString();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.toString();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  annotation.toString();	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    annotation;    	non-compiled	[CE]  incompatible  types	48	None	replace
927	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	117	None	replace
928	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(structorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	117	None	replace
929	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  deserialize?  null  :  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  deserialize?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  deserialize?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	76	None	replace
930	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType  |  null  :  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType  |  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType  |  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	76	None	replace
931	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  constructorConstructor,  serialize);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  constructorConstructor,  serialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  fieldType,  constructorConstructor,  serialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	106	None	replace
932	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType().getTypeAdapter(annotation);  [CE]  :  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType().getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType().getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  :  expected	68	None	replace
933	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldValue):  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldValue):  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(fieldValue):  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	68	None	replace
934	[BUG]  [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
935	[BUG]  [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	112	None	replace
936	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  fieldType  :  null;  [CE]  cannot  find  symbol  isPrimitive  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  fieldType  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  fieldType  :  null;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    null;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	157	None	replace
937	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
938	[BUG]  [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(isPrimitive)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
939	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
940	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	145	None	replace
941	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  object;  [CE]  cannot  find  symbol  object  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  object;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  object;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  object	122	None	replace
942	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  method;  [CE]  cannot  find  symbol  method  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  method;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType  :  method;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  method	122	None	replace
943	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  serializedName);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	FieldNamingStrategy  constructor  =  field.getAnnotation(JsonReader.class,  serializedName);	  FieldNamingStrategy    constructor    =    field.getAnnotation(JsonReader.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	17	None	replace
944	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	107	None	replace
945	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation,  fieldType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field.getTypeAdapter(annotation,  fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
946	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  field.getTypeAdapter(annotation):  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  field.getTypeAdapter(annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  annotation  :  field.getTypeAdapter(annotation):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    annotation.getTypeAdapter(context):    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
947	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldValue;  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldValue;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldValue;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    method;    	non-compiled	[CE]  cannot  find  symbol  fieldValue	103	None	replace
948	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.isPrimitive()?  isPrimitive  :  typeAdapter;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.isPrimitive()?  isPrimitive  :  typeAdapter;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.isPrimitive()?  isPrimitive  :  typeAdapter;	  TypeAdapter    <?>    mapped    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
949	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    fieldType.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	101	None	replace
950	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	replace
951	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	replace
952	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	118	None	replace
953	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
954	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
955	[BUG]  [BUGGY]  TypeAdapter  <  Object>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <  Object>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <  Object>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
956	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
957	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	104	None	replace
958	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	104	None	replace
959	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getParameterTypes();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getParameterTypes();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getParameterTypes();	  TypeAdapter    <?>    mapped    =    fieldType;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
960	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	82	None	replace
961	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	82	None	replace
962	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
963	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(typeAdapter,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(typeAdapter,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	82	None	replace
964	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.toString()  :  field.toString();  [CE]  incompatible  types  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.toString()  :  field.toString();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.toString()  :  field.toString();	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	18	None	replace
965	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldValue);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldValue);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
966	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeNegate(fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeNegate(fieldValue);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeNegate(fieldValue);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
967	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  context.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  context.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  context.getTypeAdapter(annotation):  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
968	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getRawTypeAdapter(annotation);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getRawTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  field.getRawTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	125	None	replace
969	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.findTypeAdapter(fieldType):  null;  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.findTypeAdapter(fieldType):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.findTypeAdapter(fieldType):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
970	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(serializers):  null;  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(serializers):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context,  annotation.getTypeAdapter(serializers):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context,    annotation.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  :  expected	5	None	replace
971	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  object;  [CE]  cannot  find  symbol  object  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  object;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  object;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    typeAdapter;    	non-compiled	[CE]  cannot  find  symbol  object	53	None	replace
972	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  annotation);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	156	None	replace
973	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  Class  <?>?  null  :  annotation.getTypeAdapter(fieldType);  [CE]  inconvertible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  Class  <?>?  null  :  annotation.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  Class  <?>?  null  :  annotation.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    annotation.getTypeAdapter(fieldType);    	non-compiled	[CE]  inconvertible  types	88	None	replace
974	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  null  :  annotation.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  null  :  annotation.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  instanceof  TypeAdapter?  null  :  annotation.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    annotation?    null    :    annotation.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
975	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
976	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Annotation  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Annotation  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
977	[BUG]  [BUGGY]  if(annotation  ==  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
978	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  if(isPrimitive)  {  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(name,    serialize,    deserialize    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
979	[BUG]  [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(fieldType,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	115	None	replace
980	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldPrimitive?  null  :  field.getTypeAdapter(annotation);  [CE]  cannot  find  symbol  fieldPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldPrimitive?  null  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldPrimitive?  null  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldPrimitive	75	None	replace
981	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeAdd(annotation,  fieldType);  [CE]  cannot  find  symbol  FieldUtils  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeAdd(annotation,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeAdd(annotation,  fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    FieldUtils.safeMultiply(fieldType);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	141	None	replace
982	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
983	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
984	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
985	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  isPrimitive);	  final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	93	None	replace
986	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation?  null  :  annotation;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    annotation;    	non-compiled	[CE]  incompatible  types	52	None	replace
987	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined()  :  field.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined()  :  field.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined()  :  field.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	126	None	replace
988	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  field.getTypeAdapter(annotation,  deserialize);  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  field.getTypeAdapter(annotation,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  field.getTypeAdapter(annotation,  deserialize);	  TypeAdapter    <?>    mapped    =    fieldType.isPrimitive?    null    :    field.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	126	None	replace
989	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldType.getRawType());  [CE]  cannot  find  symbol  FieldUtils  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldType.getRawType());  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  FieldUtils.safeMultiply(fieldType.getRawType());	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	154	None	replace
990	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  new  TypeAdapter  <  Object>(fieldType.getRawType());  [CE]  TypeAdapter  is  abstract;  cannot  be  instantiated  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  new  TypeAdapter  <  Object>(fieldType.getRawType());  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  new  TypeAdapter  <  Object>(fieldType.getRawType());	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  TypeAdapter  is  abstract;  cannot  be  instantiated	154	None	replace
991	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldValue;  [CE]  cannot  find  symbol  fieldValue  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldValue;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  fieldValue;	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  cannot  find  symbol  fieldValue	36	None	replace
992	[BUG]  [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getRawType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	final  TypeAdapter  <?>  mapped  =  isPrimitive?  null  :  field.getRawType();	  final    TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    mapped;    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
993	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  context.getTypeAdapter(isPrimitive):  null;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType?  context.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType?  context.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    annotation?    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  incompatible  types	4	None	replace
994	[BUG]  [BUGGY]  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
995	[BUG]  [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  annotation);  [CE]  cannot  find  symbol  mapped  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	mapped  =  field.getAnnotation(JsonAdapter.class,  annotation);	  mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	14	None	replace
996	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.type  :  annotation.type;  [CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.type  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation  ==  null?  fieldType.type  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	62	None	replace
997	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.getRawType()  :  annotation.type;  [CE]  cannot  find  symbol  isPrimitive  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.getRawType()  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.getRawType()  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	62	None	replace
998	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.toString()  :  annotation.type;  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.toString()  :  annotation.type;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.isPrimitive?  fieldType.toString()  :  annotation.type;	  TypeAdapter    <?>    mapped    =    annotation.type;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	62	None	replace
999	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field;	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    context;    	non-compiled	[CE]  incompatible  types	91	None	replace
1000	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldValue;  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldValue;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldValue;	  TypeAdapter    <?>    mapped    =    input;    	non-compiled	[CE]  cannot  find  symbol  fieldValue	94	None	replace
1001	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize):  field.getRawType();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize):  field.getRawType();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  context.getTypeAdapter(fieldType,  deserialize):  field.getRawType();	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1002	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  deserialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1003	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.map();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.map();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.map();	  TypeAdapter    <?>    mapped    =    field;    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1004	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType);  [CE]  cannot  find  symbol  structorConstructor  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(structorConstructor,  context,  fieldType);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	108	None	replace
1005	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
1006	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	147	None	replace
1007	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    field,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	147	None	replace
1008	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  fieldType,  constructorConstructor,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(type,    fieldType,    constructorConstructor,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
1009	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(isPrimitive):  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fields.getTypeAdapter(isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(isPrimitive):    null;    	non-compiled	[CE]  ';'  expected	100	None	replace
1010	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldValue.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldValue.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldValue.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	30	None	replace
1011	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  annotation.getTypeAdapter(fieldType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  annotation.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  null  :  annotation.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    fieldType?    null    :    annotation.getTypeAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	74	None	replace
1012	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  type);  [CE]  cannot  find  symbol  type  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  type);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class,  type);	  TypeToken    <?>    mapped    =    isPrimitive?    fieldType.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  type	15	None	replace
1013	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  description);  [CE]  cannot  find  symbol  description  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  description);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  description);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  description	7	None	replace
1014	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  context.getTypeAdapter(fieldType);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1015	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field,  context.getTypeAdapter(annotation);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field,  context.getTypeAdapter(annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation):  field,  context.getTypeAdapter(annotation);	  TypeAdapter    <?>    mapped    =    isPrimitive?    fieldType.getTypeAdapter(annotation):    context.getTypeAdapter(annotation);    	non-compiled	[CE]  ';'  expected	137	None	replace
1016	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(annotation,  field,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
1017	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  compilerConstructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  serialize,  deserialize);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructor,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	105	None	replace
1018	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	83	None	replace
1019	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	83	None	replace
1020	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	83	None	replace
1021	[BUG]  [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation  ==  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	83	None	replace
1022	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(compiler,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(compiler,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1023	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  deserialize):  context.getTypeAdapter(fieldType,  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  deserialize):  context.getTypeAdapter(fieldType,  deserialize);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  isPrimitive?  fieldType.getTypeAdapter(annotation,  deserialize):  context.getTypeAdapter(fieldType,  deserialize);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1024	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  deserialize?  context.getTypeAdapter(fieldType,  isPrimitive);  [CE]  :  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  deserialize?  context.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  deserialize?  context.getTypeAdapter(fieldType,  isPrimitive);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    deserialize);    	non-compiled	[CE]  :  expected	69	None	replace
1025	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldValue,  isPrimitive;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation,  fieldValue,  isPrimitive;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation,  fieldValue,  isPrimitive;	  TypeAdapter    <?>    mapped    =    annotation,    isPrimitive;    	non-compiled	[CE]  incompatible  types	95	None	replace
1026	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fields.getConstructor();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  fields.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  fields.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1027	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getConstructor();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	Constructor  <?>  constructor  =  constructor.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1028	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType  ||  isPrimitive?  null  :  fieldType;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType  ||  isPrimitive?  null  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType  ||  isPrimitive?  null  :  fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	56	None	replace
1029	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  fieldType;  [CE]  cannot  find  symbol  isPrimitive  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  fieldType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.isPrimitive?  null  :  fieldType;	  TypeAdapter    <?>    mapped    =    isPrimitive?    null    :    fieldType;    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	56	None	replace
1030	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldValue.getTypeToken();  [CE]  cannot  find  symbol  fieldValue  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  fieldValue.getTypeToken();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  fieldValue.getTypeToken();	  TypeToken    <?>    mapped    =    field.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	19	None	replace
1031	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  compilerConstructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructorConstructor,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(compilerConstructor,  fieldType,  constructorConstructor,  annotation);	  TypeAdapter    <?>    mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compilerConstructor	8	None	replace
1032	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldValue.values();  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldValue.values();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldValue.values();	  TypeAdapter    <?>    mapped    =    annotation.values();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	98	None	replace
1033	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.fieldValue;  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.fieldValue;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.fieldValue;	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol  fieldValue	99	None	replace
1034	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.baseType;  [CE]  cannot  find  symbol  baseType  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.baseType;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.baseType;	  TypeAdapter    <?>    mapped    =    annotation.map;    	non-compiled	[CE]  cannot  find  symbol  baseType	99	None	replace
1035	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldValue):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldValue):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  context.getTypeAdapter(fieldValue):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
1036	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation):  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation):  null;	  TypeAdapter    <?>    mapped    =    context.getTypeAdapter(annotation):    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
1037	[BUG]  [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  isPrimitive,  serialize,  deserialize);  }  [CE]  cannot  find  symbol  mapped  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  isPrimitive,  serialize,  deserialize);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  else  {  return  new  ReflectiveTypeAdapterFactory.BoundField(fieldType,  isPrimitive,  serialize,  deserialize);  }	  if(isPrimitive)    {    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    }    else    {    return    new    ReflectiveTypeAdapterFactory.BoundField(value,    isPrimitive,    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  mapped	113	None	replace
1038	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  constructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	81	None	replace
1039	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  typeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1040	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  TypeAdapter  <?>  mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	81	None	replace
1041	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  typeAdapter.mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  typeAdapter.mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  typeAdapter.mapped  =  getTypeAdapter(field,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    TypeAdapter    <?>    mapped    =    getTypeAdapter(field,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	81	None	replace
1042	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	144	None	replace
1043	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	144	None	replace
1044	[BUG]  [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	if(annotation!=  null)  {  TypeAdapter  <?>  mapped  =  getTypeAdapter(fieldType,  context,  fieldType,  annotation);  final  TypeAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }	  TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    final    TypeAdapter    <?>    mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	144	None	replace
1045	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  arePrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  arePrimitive  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeToken  <?>  mapped  =  arePrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeToken  <?>  mapped  =  arePrimitive?  fieldType.getRawType()  :  field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    isPrimitive?    context.getRawType()    :    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  arePrimitive	16	None	replace
1046	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType.getTypeAdapter(fieldType,  annotation):  field.getAnnotation(JsonAdapter.class);	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	135	None	replace
1047	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawClass()  :  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawClass()  :  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawClass()  :  null;	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
1048	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  Collections.emptyList();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  Collections.emptyList();  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  fieldType,  isPrimitive?  fieldType.getRawType()  :  Collections.emptyList();	  TypeAdapter    <?>    mapped    =    fieldType,    isPrimitive?    fieldType.getRawType()    :    null;    	non-compiled	[CE]  ';'  expected	49	None	replace
1049	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  isPrimitive):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  isPrimitive):  null;  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  annotation.getTypeAdapter(fieldType,  isPrimitive):  null;	  TypeAdapter    <?>    mapped    =    isPrimitive?    context.getTypeAdapter(fieldType,    annotation):    null;    	non-compiled	[CE]  ';'  expected	67	None	replace
1050	[BUG]  [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class,  annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);      [BUGGY]  TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class,  annotation);  [BUGGY]      if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	109	109	1	replace	TypeAdapter  <?>  mapped  =  field.getAnnotation(Annotation.class,  annotation);	  TypeAdapter    <?>    mapped    =    field.getAnnotation(Annotation.class);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
