bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
2	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
3	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
4	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
5	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  deserialize);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
6	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(type,  annotation,  constructorConstructor);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(type,  annotation,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(type,  annotation,  constructorConstructor);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
7	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  context);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  context);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  context);	  mapped    =    getTypeAdapter(annotation,    context,    constructor,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	6	None	replace
8	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructor,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	6	None	replace
9	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  context);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  context);	  mapped    =    getTypeAdapter(annotation,    context,    constructor,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
10	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldValue,  constructor,  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldValue,  constructor,  fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldValue,  constructor,  fieldType);	  mapped    =    getTypeAdapter(annotation,    context,    constructor,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	6	None	replace
11	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive,  constructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive,  constructor);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructor	1	None	replace
12	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
13	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  context);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  context);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
16	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	12	None	replace
17	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
18	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  serialize);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
19	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
20	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
21	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(field,  annotation,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(field,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(field,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
22	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  annotation,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
23	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(compiler,  annotation,  constructorConstructor,  isPrimitive);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(compiler,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(compiler,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
24	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  annotation,  context,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(constructor,  annotation,  context,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(constructor,  annotation,  context,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  constructor	7	None	replace
25	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(type,  annotation,  constructorConstructor,  isPrimitive);  [CE]  cannot  find  symbol  type  [FE]                              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(type,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(type,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
26	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor,  annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor,  annotation);	  mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	3	None	replace
27	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  annotation);	  mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
28	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  isPrimitive);	  mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
29	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(type,  fieldType,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(type,  fieldType,  constructorConstructor,  annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(type,  fieldType,  constructorConstructor,  annotation);	  mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
30	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
31	[BUG]  [BUGGY]      mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  context.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
32	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  context.getAdapter(fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	add	        mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	1	add
33	[BUG]  [BUGGY]      mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  context.getAdapter(fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	1	add
34	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonFactory.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonFactory.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonFactory.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
35	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonConstants.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonConstants.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonConstants.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
36	[BUG]  [BUGGY]      TypeToken  <?>  mapped  =  annotation.getTypeToken();  [CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      TypeToken  <?>  mapped  =  annotation.getTypeToken();  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        TypeToken  <?>  mapped  =  annotation.getTypeToken();	  	non-compiled	[CE]  variable  mapped  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	8	None	add
37	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonReader.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonReader.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonReader.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
38	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonNull.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
39	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  context,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  context,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  context,  constructorConstructor);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
40	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  annotation,  constructorConstructor);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
41	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  annotation,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  annotation,  constructorConstructor);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
42	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  annotation,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  annotation,  fieldType,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  annotation,  fieldType,  constructorConstructor);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
43	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
44	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
45	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  constructorConstructor);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	10	None	replace
46	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldNamingStrategy);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  fieldNamingStrategy);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	10	None	replace
47	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  serialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  serialize);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
48	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
49	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  context);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  context);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
50	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  deserialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  deserialize);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
51	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  serialize,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
52	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
53	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  annotation,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  annotation,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
54	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  annotation,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  annotation,  fieldType,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  annotation,  fieldType,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
55	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
56	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive,  deserialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  isPrimitive,  deserialize);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
57	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  mapped,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  mapped,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  mapped,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
58	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  context,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  context,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  context,  constructorConstructor);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
59	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
60	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(compiler,  fieldType,  constructorConstructor,  annotation);  [CE]  cannot  find  symbol  compiler  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(compiler,  fieldType,  constructorConstructor,  annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(compiler,  fieldType,  constructorConstructor,  annotation);	  mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
61	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  typeAdapter);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  typeAdapter);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	1	None	replace
62	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldNamingStrategy,  constructor,  fieldType);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldNamingStrategy,  constructor,  fieldType);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldNamingStrategy,  constructor,  fieldType);	  mapped    =    getTypeAdapter(annotation,    context,    constructor,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	6	None	replace
63	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  delegate);  [CE]  cannot  find  symbol  delegate  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  delegate);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  delegate);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  delegate	12	None	replace
64	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  descriptor);  [CE]  cannot  find  symbol  descriptor  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  descriptor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  descriptor);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  descriptor	12	None	replace
65	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());	      	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	9	None	replace
66	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  context.getAnnotation(JsonAdapter.class);	      	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	9	None	replace
67	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  field.getAnnotation(JsonAdapter.class);  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  field.getAnnotation(JsonAdapter.class);	      	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	9	None	replace
68	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  context.getAdapter(annotation);  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  context.getAdapter(annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  context.getAdapter(annotation);	      	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	9	None	replace
69	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  mapped  =  annotation.getAnnotation(JsonAdapter.class);	      	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	9	None	replace
70	[BUG]  [BUGGY]  mapped  =  context.getAdapter(annotation);  [CE]  no  suitable  method  found  for  getAdapter(JsonAdapter)  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  context.getAdapter(annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  context.getAdapter(annotation);	      	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(JsonAdapter)	9	None	replace
71	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  context);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  context);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
72	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
73	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
74	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  deserialize,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
75	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
76	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  fieldNamingPolicy);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  fieldNamingPolicy);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  fieldNamingPolicy);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
77	[BUG]  [BUGGY]      final  boolean  isPrimitive  =  context.isPrimitive(fieldType.getRawType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      final  boolean  isPrimitive  =  context.isPrimitive(fieldType.getRawType());  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        final  boolean  isPrimitive  =  context.isPrimitive(fieldType.getRawType());	  	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	8	None	add
78	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldNamingStrategy,  annotation,  constructorConstructor,  isPrimitive);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldNamingStrategy,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldNamingStrategy,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	7	None	replace
79	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  constructorConstructor,  fieldType,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
80	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  annotation,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  annotation,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
81	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  annotation,  constructorConstructor,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(constructor,  annotation,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(constructor,  annotation,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  constructor	7	None	replace
82	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  typeAdapter);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  typeAdapter);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	2	None	replace
83	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  fieldNamingStrategy);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  annotation,  fieldNamingStrategy);	  mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	3	None	replace
84	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  context,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  context,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  context,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
85	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  fieldType,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  fieldType,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  fieldType,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
86	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldType,  annotation,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
87	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  methodNamingStrategy);  [CE]  cannot  find  symbol  methodNamingStrategy  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  methodNamingStrategy);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  methodNamingStrategy);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  methodNamingStrategy	12	None	replace
88	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter,  constructor);  [CE]  cannot  find  symbol  typeAdapter  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter,  constructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  typeAdapter,  constructor);	  mapped    =    getTypeAdapter(annotation,    context,    fieldType,    constructor);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	1	None	replace
89	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  context,  constructorConstructor);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  context,  constructorConstructor);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldNamingStrategy,  context,  constructorConstructor);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	10	None	replace
90	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonParser.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonParser.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonParser.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
91	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonToken.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
92	[BUG]  [BUGGY]      mapped  =  annotation.getAnnotation(JsonObjectAdapter.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]      mapped  =  annotation.getAnnotation(JsonObjectAdapter.class);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	        mapped  =  annotation.getAnnotation(JsonObjectAdapter.class);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
93	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  isPrimitive);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  isPrimitive);	  mapped    =    getTypeAdapter(annotation,    context,    constructorConstructor,    isPrimitive);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
94	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  serialize);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  serialize);	  mapped    =    getTypeAdapter(annotation,    fieldType,    constructorConstructor);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
95	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {    [BUGGY]  mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  fieldNamingStrategy);  [BUGGY]    }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3779644730092272	111	111	1	replace	mapped  =  getTypeAdapter(fieldType,  annotation,  constructorConstructor,  fieldNamingStrategy);	  mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	4	None	replace
