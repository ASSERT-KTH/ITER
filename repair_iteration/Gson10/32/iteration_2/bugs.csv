bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType,  false);  [CE]  no  suitable  method  found  for  excludeField(Field,Type,boolean)  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  declaredType,  false);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,Type,boolean)	5	None	replace
2	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true,  declaredType);  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type)  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true,  declaredType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  true,  declaredType);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type)	5	None	replace
3	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(declaredType,  false,  field);  [CE]  no  suitable  method  found  for  excludeField(Type,boolean,Field)  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(declaredType,  false,  field);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(declaredType,  false,  field);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,boolean,Field)	5	None	replace
4	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getGenericType());  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type,Type)  [FE]                    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getGenericType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getGenericType());	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type,Type)	5	None	replace
5	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getGenericValue());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getGenericValue());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getGenericValue());	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]                        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  isPrimitive);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType,  isPrimitive);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	5	None	replace
7	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getDeclaredType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType,  field.getDeclaredType());	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
8	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true)&&  declaredType.isPrimitive();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true)&&  declaredType.isPrimitive();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  true)&&  declaredType.isPrimitive();	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
9	[BUG]  [BUGGY]  Boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isPrimitive();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isPrimitive();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isPrimitive();	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
10	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true,  declaredType.isPrimitive());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true,  declaredType.isPrimitive());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  true,  declaredType.isPrimitive());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
11	[BUG]  [BUGGY]  Boolean  deserialize  =  excludeField(field,  false,  declaredType.isPrimitive());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Boolean  deserialize  =  excludeField(field,  false,  declaredType.isPrimitive());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Boolean  deserialize  =  excludeField(field,  false,  declaredType.isPrimitive());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
12	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.isPrimitive(),  isPrimitive);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.isPrimitive(),  isPrimitive);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType.isPrimitive(),  isPrimitive);	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
13	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.getDeclaredType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType.getDeclaredType());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
14	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType,  null);  [CE]  no  suitable  method  found  for  excludeField(Field,Type,<null>)  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType,  null);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  declaredType,  null);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,Type,<null>)	11	None	replace
15	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  declaredType);  [CE]  no  suitable  method  found  for  excludeField(Field,<null>,Type)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  declaredType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  null,  declaredType);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,<null>,Type)	11	None	replace
16	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType);  [CE]  no  suitable  method  found  for  excludeField(Field,Type)  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  declaredType);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,Type)	11	None	replace
17	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType.isPrimitive());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType.isPrimitive());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  declaredType.isPrimitive());	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
18	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  true);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    boolean  deserialize  =  excludeField(field,  true);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
19	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    boolean  deserialize  =  excludeField(field,  false);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
20	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  BoundField  deserialize  =  excludeField(field,  true);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  BoundField  deserialize  =  excludeField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    BoundField  deserialize  =  excludeField(field,  true);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
21	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deerialize  =  excludeField(field,  true);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deerialize  =  excludeField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    boolean  deerialize  =  excludeField(field,  true);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
22	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  int  deserialize  =  excludeField(field,  true);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  int  deserialize  =  excludeField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    int  deserialize  =  excludeField(field,  true);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
23	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  isPrimitive);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  isPrimitive);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	3	None	replace
24	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  true);  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,boolean)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  true);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,boolean)	3	None	replace
25	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  condition);  [CE]  cannot  find  symbol  condition  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  condition);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  condition);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  condition	3	None	replace
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Boolean  deserialize  =  excludeField(field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	add	Boolean  deserialize  =  excludeField(field,  false);	  boolean    deserialize    =    excludeField(field,    true);    	compilable	  [FE]  ComparisonFailure  	2	1	replace
27	[BUG]  [BUGGY]  Boolean  deserialize  =  excludeField(field,  false);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Boolean  deserialize  =  excludeField(field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Boolean  deserialize  =  excludeField(field,  false);	  boolean    deserialize    =    excludeField(field,    true);    	compilable	  [FE]  ComparisonFailure  	2	1	replace
28	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getType(),  true);  [CE]  no  suitable  method  found  for  excludeField(Class<CAP#1>,boolean)  [FE]      ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getType(),  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getType(),  true);	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Class<CAP#1>,boolean)	2	None	replace
29	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(declaredType,  true);  [CE]  no  suitable  method  found  for  excludeField(Type,boolean)  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(declaredType,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(declaredType,  true);	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,boolean)	2	None	replace
30	[BUG]  [BUGGY]  BoundField  deserialize  =  excludeField(field,  false);  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  BoundField  deserialize  =  excludeField(field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	BoundField  deserialize  =  excludeField(field,  false);	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  incompatible  types	2	None	replace
31	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field);  [CE]  no  suitable  method  found  for  excludeField(Field)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field);	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field)	2	None	replace
32	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  declaredType;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  declaredType;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  declaredType;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	8	None	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  serialize;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	add	boolean  deserialize  =  excludeField(field,  false)&&  serialize;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	compilable	  [FE]  ComparisonFailure  	8	1	replace
34	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  serialize;  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  serialize;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  serialize;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	compilable	  [FE]  ComparisonFailure  	8	1	replace
35	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  jsonAdapterPresent;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  jsonAdapterPresent;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  jsonAdapterPresent;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	8	None	replace
36	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  serialized;  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  serialized;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  serialized;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  serialized	8	None	replace
37	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  status;  [CE]  cannot  find  symbol  status  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  status;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  status;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  status	8	None	replace
38	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType.getGenericType());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType.getGenericType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  declaredType.getGenericType());	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
39	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  declaredType);  [CE]  no  suitable  method  found  for  excludeField(Type,Type)  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  declaredType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  declaredType);	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Type)	9	None	replace
40	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  field.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  field.getDeclaredType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  field.getDeclaredType());	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
41	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  field.getGenericType());  [CE]  no  suitable  method  found  for  excludeField(Field,Type)  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  field.getGenericType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  field.getGenericType());	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,Type)	9	None	replace
42	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  true);  [CE]  no  suitable  method  found  for  excludeField(Type,boolean)  [FE]                    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  true);	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,boolean)	9	None	replace
43	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  raw);  [CE]  no  suitable  method  found  for  excludeField(Type,Class<CAP#1>)  [FE]                      ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  raw);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  raw);	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Class<CAP#1>)	9	None	replace
44	[BUG]  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  [CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  serialize  =  excludeField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  serialize  =  excludeField(field,  true);	      	non-compiled	[CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
45	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Field[]  fields  =  field.getDeclaredFields();	      	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
46	[BUG]  [BUGGY]  boolean  serialize  =  excludeField(field,  false);  [CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  serialize  =  excludeField(field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  serialize  =  excludeField(field,  false);	      	non-compiled	[CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
47	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Field[]  fields  =  field.getFields();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Field[]  fields  =  field.getFields();	      	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
48	[BUG]  [BUGGY]  Field[]  replaced  =  field.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Field[]  replaced  =  field.getDeclaredFields();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Field[]  replaced  =  field.getDeclaredFields();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
49	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Field[]  fieldNames  =  field.getDeclaredFields();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Field[]  fieldNames  =  field.getDeclaredFields();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
50	[BUG]  [BUGGY]  Field[]  raw  =  field.getRawTypes();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Field[]  raw  =  field.getRawTypes();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Field[]  raw  =  field.getRawTypes();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
51	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType.getGenericType(),  false);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  declaredType.getGenericType(),  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  declaredType.getGenericType(),  false);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
52	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  field,  false);  [CE]  no  suitable  method  found  for  excludeField(Type,Field,boolean)  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  field,  false);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Field,boolean)	7	None	replace
53	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  raw,  false);  [CE]  no  suitable  method  found  for  excludeField(Type,Class<CAP#1>,boolean)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  raw,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  raw,  false);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Class<CAP#1>,boolean)	7	None	replace
54	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  declaredType,  false);  [CE]  no  suitable  method  found  for  excludeField(Type,Type,boolean)  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  declaredType,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  declaredType,  false);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Type,boolean)	7	None	replace
55	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  field.getGenericType(),  false);  [CE]  no  suitable  method  found  for  excludeField(Field,Type,boolean)  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  field.getGenericType(),  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  field.getGenericType(),  false);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,Type,boolean)	7	None	replace
56	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  fields,  false);  [CE]  no  suitable  method  found  for  excludeField(Type,Field[],boolean)  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  fields,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  fields,  false);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Field[],boolean)	7	None	replace
57	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  fieldType,  declaredType);  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  fieldType,  declaredType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  fieldType,  declaredType);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  cannot  find  symbol  fieldType	5	None	replace
58	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field);  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type,Field)  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  field);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType,  field);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type,Field)	5	None	replace
59	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  serializedType);  [CE]  cannot  find  symbol  serializedType  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  serializedType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  serializedType);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  cannot  find  symbol  serializedType	5	None	replace
60	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  raw);  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,Class<CAP#1>)  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  raw);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  raw);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,Class<CAP#1>)	3	None	replace
61	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  serialized);  [CE]  cannot  find  symbol  serialized  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  serialized);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  serialized);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  serialized	3	None	replace
62	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  null);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	add	boolean  deserialize  =  excludeField(field,  false,  null);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	compilable	  [FE]  NullPointerException  	3	9	replace
63	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  null);  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  null);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  null);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	compilable	  [FE]  NullPointerException  	3	9	replace
64	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  false);  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,boolean)  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  false);	  boolean    deserialize    =    excludeField(field,    false,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,boolean)	3	None	replace
65	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  false,  raw);  [CE]  no  suitable  method  found  for  excludeField(Type,boolean,Class<CAP#1>)  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  false,  raw);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  false,  raw);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,boolean,Class<CAP#1>)	7	None	replace
66	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  field.isPrimitive());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  field.isPrimitive());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  field.isPrimitive());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
67	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  fieldType.isPrimitive());  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  fieldType.isPrimitive());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  fieldType.isPrimitive());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol  fieldType	4	None	replace
68	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.serialize());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.serialize());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType.serialize());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
69	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  type;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  type;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  type;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	8	None	replace
70	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  result;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  result;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  result;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	8	None	replace
71	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getType());  [CE]  no  suitable  method  found  for  excludeField(Class<CAP#1>)  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getType());	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Class<CAP#1>)	2	None	replace
72	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getDeclaredType());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getDeclaredType());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getDeclaredType());	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
73	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.isPrimitive());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.isPrimitive());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.isPrimitive());	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
74	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  false);  [CE]  no  suitable  method  found  for  excludeField(Field,<null>,boolean)  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  null,  false);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,<null>,boolean)	11	None	replace
75	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  true);  [CE]  no  suitable  method  found  for  excludeField(Field,<null>,boolean)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  null,  true);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,<null>,boolean)	11	None	replace
76	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  isPrimitive);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  null,  isPrimitive);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	11	None	replace
77	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  serialized);  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  serialized);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  null,  serialized);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  cannot  find  symbol  serialized	11	None	replace
78	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  derialize  =  excludeField(field,  true);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  derialize  =  excludeField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    boolean  derialize  =  excludeField(field,  true);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
79	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  field.isPrimitive();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  field.isPrimitive();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  field.isPrimitive();	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
80	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isInterface();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isInterface();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isInterface();	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
81	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  isPrimitive.isPrimitive();  [CE]  cannot  find  symbol  isPrimitive  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  isPrimitive.isPrimitive();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  isPrimitive.isPrimitive();	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	10	None	replace
82	[BUG]  [BUGGY]  boolean  serialize  =  excludeField(field.getGenericType(),  isPrimitive);  [CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  serialize  =  excludeField(field.getGenericType(),  isPrimitive);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  serialize  =  excludeField(field.getGenericType(),  isPrimitive);	      	non-compiled	[CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
83	[BUG]  [BUGGY]  boolean  serialize  =  excludeField(field.getGenericType(),  false);  [CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  serialize  =  excludeField(field.getGenericType(),  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  serialize  =  excludeField(field.getGenericType(),  false);	      	non-compiled	[CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
84	[BUG]  [BUGGY]  boolean  serialize  =  excludeField(field.getGenericType(),  true);  [CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  serialize  =  excludeField(field.getGenericType(),  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  serialize  =  excludeField(field.getGenericType(),  true);	      	non-compiled	[CE]  variable  serialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
85	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  field);  [CE]  no  suitable  method  found  for  excludeField(Type,Field)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  field);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  field);	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Field)	9	None	replace
86	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  fields);  [CE]  no  suitable  method  found  for  excludeField(Type,Field[])  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  fields);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  fields);	  boolean    deserialize    =    excludeField(field.getGenericType());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Type,Field[])	9	None	replace
87	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.toString());  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,String)  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType.toString());  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType.toString());	  boolean    deserialize    =    excludeField(field,    false,    declaredType.isPrimitive());    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,String)	4	None	replace
88	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	Constructor  <?>  constructor  =  field.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
89	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  null,  deserialized);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  null,  deserialized);	  boolean    deserialize    =    excludeField(field,    null);    	non-compiled	[CE]  cannot  find  symbol  deserialized	11	None	replace
90	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field.getGenericType(),  isPrimitive);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field.getGenericType(),  isPrimitive);	  boolean    deserialize    =    excludeField(field.getGenericType(),    false);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	7	None	replace
91	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type,FieldNamingStrategy)  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false,  declaredType,  fieldNamingPolicy);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false,  declaredType,  fieldNamingPolicy);	  boolean    deserialize    =    excludeField(field,    false,    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  excludeField(Field,boolean,Type,FieldNamingStrategy)	5	None	replace
92	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deserialize  =  excludedField(field,  true);  [CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  true);  boolean  deserialize  =  excludedField(field,  true);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean    deserialize    =    excludeField(field,    true);    boolean  deserialize  =  excludedField(field,  true);	  	non-compiled	[CE]  variable  deserialize  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
93	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)||  declaredType.isPrimitive();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)||  declaredType.isPrimitive();  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)||  declaredType.isPrimitive();	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
94	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isSubtype(declaredType);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isSubtype(declaredType);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  declaredType.isSubtype(declaredType);	  boolean    deserialize    =    excludeField(field,    false)&&    declaredType.isPrimitive();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
95	[BUG]  [BUGGY]  boolean  deserialize  =  excludedField(field,  false);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludedField(field,  false);  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludedField(field,  false);	  boolean    deserialize    =    excludeField(field,    true);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
96	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  deserialized;  [CE]  cannot  find  symbol  deserialized  [FE]          ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  deserialized;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  deserialized;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  deserialized	8	None	replace
97	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  deserialization;  [CE]  cannot  find  symbol  deserialization  [FE]            ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  deserialization;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  deserialization;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  deserialization	8	None	replace
98	[BUG]  [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  deserializer;  [CE]  cannot  find  symbol  deserializer  [FE]              ComparisonFailure    [CONTEXT]    Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);    [BUGGY]  boolean  deserialize  =  excludeField(field,  false)&&  deserializer;  [BUGGY]    if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	152	152	1	replace	boolean  deserialize  =  excludeField(field,  false)&&  deserializer;	  boolean    deserialize    =    excludeField(field,    false)&&    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  deserializer	8	None	replace
