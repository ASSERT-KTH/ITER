bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Field[]  fields  =  context.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  context.getDeclaredFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getDeclaredFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol	57	None	replace
2	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  declaredType.getDeclaredFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  declaredType.getDeclaredFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol	57	None	replace
3	[BUG]  [BUGGY]  Field[]  fields  =  type.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  type.getDeclaredFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  type.getDeclaredFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol	57	None	replace
4	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [CE]  cannot  find  symbol  field  [FE]          ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  field.getDeclaredFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol  field	57	None	replace
5	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  context.getFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol	57	None	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  raw.getFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	add	Field[]  fields  =  raw.getFields();	Field[]  fields  =  raw.getDeclaredFields();  	compilable	  [FE]  ComparisonFailure  	57	8	replace
7	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  raw.getFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  raw.getFields();	Field[]  fields  =  raw.getDeclaredFields();  	compilable	  [FE]  ComparisonFailure  	57	8	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]    [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	  	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol  fields	57	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  current.getDeclaredFields();  [CE]  cannot  find  symbol  current  [FE]    ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  current.getDeclaredFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  current.getDeclaredFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol  current	57	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(raw);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  context.getFields(raw);  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(raw);	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol	57	None	replace
11	[BUG]  [BUGGY]  Field[]  fields  =  row.getDeclaredFields();  [CE]  cannot  find  symbol  row  [FE]    ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  [BUGGY]  Field[]  fields  =  row.getDeclaredFields();  [BUGGY]  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  row.getDeclaredFields();	Field[]  fields  =  raw.getDeclaredFields();  	non-compiled	[CE]  cannot  find  symbol  row	57	None	replace
