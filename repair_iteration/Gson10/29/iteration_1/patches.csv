bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  type.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  type.getFields();	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  field  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  field.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  field.getFields();	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
3	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getFields();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  declaredType.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  declaredType.getFields();	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
4	[BUG]  [BUGGY]  Field[]  fields  =  new  LinkedHashMap  <  String,  BoundField>();  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  new  LinkedHashMap  <  String,  BoundField>();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  new  LinkedHashMap  <  String,  BoundField>();	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  incompatible  types	7	None	replace
5	[BUG]  [BUGGY]  Field[]  fields  =  getFields(context,  declaredType,  raw);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  getFields(context,  declaredType,  raw);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  getFields(context,  declaredType,  raw);	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  Field[]  fields  =  declarationType.getDeclaredFields();  [CE]  cannot  find  symbol  declarationType  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  declarationType.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  declarationType.getDeclaredFields();	  Field[]    fields    =    declaredType.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  declarationType	2	None	replace
7	[BUG]  [BUGGY]  Field[]  fields  =  declaredType,  field.getDeclaredFields();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  declaredType,  field.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  declaredType,  field.getDeclaredFields();	  Field[]    fields    =    declaredType.getDeclaredFields();    	non-compiled	[CE]  ';'  expected	2	None	replace
8	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getDeclaredFields();  [CE]  cannot  find  symbol  boundFields  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  boundFields.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  boundFields.getDeclaredFields();	  Field[]    fields    =    row.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	11	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  jsonAdapter.getDeclaredFields();  [CE]  cannot  find  symbol  jsonAdapter  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  jsonAdapter.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  jsonAdapter.getDeclaredFields();	  Field[]    fields    =    row.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	11	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  declarations.getDeclaredFields();  [CE]  cannot  find  symbol  declarations  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  declarations.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  declarations.getDeclaredFields();	  Field[]    fields    =    row.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  declarations	11	None	replace
11	[BUG]  [BUGGY]  Field[]  fieldFields  =  declaredType.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fieldFields  =  declaredType.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fieldFields  =  declaredType.getDeclaredFields();	  Field[]    fields    =    field.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
12	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(type,  raw);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(type,  raw);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(type,  raw);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(raw,  declaredType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(raw,  declaredType);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(raw,  declaredType);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
14	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(field,  declaredType);  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(field,  declaredType);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(field,  declaredType);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
15	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(field);  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(field);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(field);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
16	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(type);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(type);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
17	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields(context);  [CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields(context);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  raw.getFields(context);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  method  getFields  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
18	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(declaredType,  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(declaredType,  raw);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(declaredType,  raw);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
19	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
20	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
21	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  return  new  HashMap  <  String,  BoundField>();  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  return  new  HashMap  <  String,  BoundField>();  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  return  new  HashMap  <  String,  BoundField>();  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
22	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  continue;  }  field[]  fields  =  raw.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  continue;  }  field[]  fields  =  raw.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  continue;  }  field[]  fields  =  raw.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
23	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  continue;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  continue;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serialize  &&!previous.isInterface())  {  continue;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
24	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!deserialize)  {  continue;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!deserialize)  {  continue;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serialize  &&!deserialize)  {  continue;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
25	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!serialize)  {  continue;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serialize  &&!serialize)  {  continue;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serialize  &&!serialize)  {  continue;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
26	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  field[]  fields  =  raw.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  field[]  fields  =  raw.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  field[]  fields  =  raw.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
27	[BUG]  [BUGGY]  Field[]  fields  =  _context.getFields();  [CE]  cannot  find  symbol  _context  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  _context.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  _context.getFields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol  _context	5	None	replace
28	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(true);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(true);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(true);	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
29	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(false);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(false);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(false);	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
30	[BUG]  [BUGGY]  Field[]  fields  =  context.getDeclaredFields(declaredType);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getDeclaredFields(declaredType);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getDeclaredFields(declaredType);	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
31	[BUG]  [BUGGY]  Field[]  fields  =  _context.getDeclaredFields();  [CE]  cannot  find  symbol  _context  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  _context.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  _context.getDeclaredFields();	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  _context	1	None	replace
32	[BUG]  [BUGGY]  Field[]  fields  =  context.getDeclaredFields(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getDeclaredFields(type);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getDeclaredFields(type);	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
33	[BUG]  [BUGGY]  Field[]  fields  =  context.getDeclaredFields(true);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getDeclaredFields(true);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getDeclaredFields(true);	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
34	[BUG]  [BUGGY]  Field[]  fields  =  result.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  result.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  result.getDeclaredFields();	  Field[]    fields    =    current.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
35	[BUG]  [BUGGY]  Field[]  fields  =  context.getGsonFields();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getGsonFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getGsonFields();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  getFields(context,  declaredType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  getFields(context,  declaredType);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  getFields(context,  declaredType);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  Field[]  fields  =  context.getTypes();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getTypes();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getTypes();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields(declaredType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getFields(declaredType);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getFields(declaredType);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
39	[BUG]  [BUGGY]  Field[]  fields  =  this.context.getFields();  [CE]  cannot  find  symbol  context  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  this.context.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  this.context.getFields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol  context	5	None	replace
40	[BUG]  [BUGGY]  Field[]  fields  =  this.fields.getFields();  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  this.fields.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  this.fields.getFields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol  fields	5	None	replace
41	[BUG]  [BUGGY]  Field[]  fields  =  context.fields();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.fields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.fields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
42	[BUG]  [BUGGY]  Field[]  fields  =  current.getFields();  [CE]  cannot  find  symbol  current  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  current.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  current.getFields();	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol  current	7	None	replace
43	[BUG]  [BUGGY]  Field[]  fields  =  getFields(context,  raw);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  getFields(context,  raw);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  getFields(context,  raw);	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
44	[BUG]  [BUGGY]  Field  field  =  context.getField(declaredType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field  field  =  context.getField(declaredType);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field  field  =  context.getField(declaredType);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
45	[BUG]  [BUGGY]  Field[]  fields  =  context.getDeclaredFields(raw);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getDeclaredFields(raw);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getDeclaredFields(raw);	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
46	[BUG]  [BUGGY]  Field[]  fields  =  context.getDeclaredFields(raw,  context);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  context.getDeclaredFields(raw,  context);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  context.getDeclaredFields(raw,  context);	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
47	[BUG]  [BUGGY]  Field[]  fields  =  this.context.getDeclaredFields();  [CE]  cannot  find  symbol  context  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  this.context.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  this.context.getDeclaredFields();	  Field[]    fields    =    context.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  context	1	None	replace
48	[BUG]  [BUGGY]  Field[]  fields  =  _fields.getDeclaredFields();  [CE]  cannot  find  symbol  _fields  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  _fields.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  _fields.getDeclaredFields();	  Field[]    fields    =    field.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  _fields	4	None	replace
49	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  this.fields  =  raw.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  this.fields  =  raw.getFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  this.fields  =  raw.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
50	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  continue;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  continue;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  continue;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
51	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  true))  {  continue;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  true))  {  continue;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!excludeField(field,  true))  {  continue;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
52	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  return  result;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  return  result;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  return  result;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
53	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  true))  {  return  result;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  true))  {  return  result;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!excludeField(field,  true))  {  return  result;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
54	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  return  null;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  return  null;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!excludeField(field,  false))  {  return  null;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
55	[BUG]  [BUGGY]  Field[]  fields  =  _constructor.getDeclaredFields();  [CE]  cannot  find  symbol  _constructor  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  _constructor.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  _constructor.getDeclaredFields();	  Field[]    fields    =    type.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  _constructor	3	None	replace
56	[BUG]  [BUGGY]  Field[]  fields  =  input.getDeclaredFields();  [CE]  cannot  find  symbol  input  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  input.getDeclaredFields();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  input.getDeclaredFields();	  Field[]    fields    =    current.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  input	9	None	replace
57	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields(raw);  [CE]  cannot  find  symbol  field  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  field.getFields(raw);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  field.getFields(raw);	  Field[]    fields    =    context.getFields(raw);    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
58	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[raw.getFields().size()  ];  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  new  Field[raw.getFields().size()  ];  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  new  Field[raw.getFields().size()  ];	  Field[]    fields    =    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
59	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  new  Field[raw.getFields().length];  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	add	Field[]  fields  =  new  Field[raw.getFields().length];	  Field[]    fields    =    raw.getFields();    	compilable	  [FE]  ComparisonFailure  	7	8	replace
60	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[raw.getFields().length];  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  new  Field[raw.getFields().length];  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]  fields  =  new  Field[raw.getFields().length];	  Field[]    fields    =    raw.getFields();    	compilable	  [FE]  ComparisonFailure  	7	8	replace
61	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor.getRawClass());  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor.getRawClass());  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor.getRawClass());	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
62	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  context.getConstructor();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  context.getConstructor();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  context.getConstructor();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
63	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor.getClass());  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor.getClass());  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor.getClass());	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
64	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor,  fieldNames);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor,  fieldNames);  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  new  ObjectConstructor(constructor,  fieldNames);	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
65	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serializedName)  {  continue;  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  if(!serializedName)  {  continue;  }  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  if(!serializedName)  {  continue;  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
66	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  context.getCurrentConstructor();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {    [BUGGY]  Field[]  fields  =  raw.getFields();  Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  context.getCurrentConstructor();  [BUGGY]    for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	149	149	1	replace	Field[]    fields    =    raw.getFields();    Field[]  fields  =  raw.getFields();  ObjectConstructor  constructor  =  context.getCurrentConstructor();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	add
