bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(name  ==  0)serialize  =  true;  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  0)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  0)serialize  =  true;	  if(i    ==    0)serialize    =    true;    	non-compiled	[CE]  incomparable  types:  String  and  int	24	None	replace
2	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;	  if(i    ==    0)serialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  boundField	24	None	replace
3	[BUG]  [BUGGY]  if(serialize  ==  0)serialize  =  true;  [CE]  incomparable  types:  boolean  and  int  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  0)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  0)serialize  =  true;	  if(i    ==    0)serialize    =    true;    	non-compiled	[CE]  incomparable  types:  boolean  and  int	24	None	replace
4	[BUG]  [BUGGY]  if(name!=  null)destinator  =  false;  [CE]  cannot  find  symbol  destinator  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)destinator  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)destinator  =  false;	  if(name!=    null)denominator    =    false;    	non-compiled	[CE]  cannot  find  symbol  destinator	99	None	replace
5	[BUG]  [BUGGY]  if(name  ==  null)denominator  =  false;  [CE]  cannot  find  symbol  denominator  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)denominator  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)denominator  =  false;	  if(name!=    null)denominator    =    false;    	non-compiled	[CE]  cannot  find  symbol  denominator	99	None	replace
6	[BUG]  [BUGGY]  if(name!=  null)denominator  =  true;  [CE]  cannot  find  symbol  denominator  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)denominator  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)denominator  =  true;	  if(name!=    null)denominator    =    false;    	non-compiled	[CE]  cannot  find  symbol  denominator	99	None	replace
7	[BUG]  [BUGGY]  if(name!=  null)dereference  =  false;  [CE]  cannot  find  symbol  dereference  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)dereference  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)dereference  =  false;	  if(name!=    null)denominator    =    false;    	non-compiled	[CE]  cannot  find  symbol  dereference	99	None	replace
8	[BUG]  [BUGGY]  if(name!=  null)destrialize  =  false;  [CE]  cannot  find  symbol  destrialize  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)destrialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)destrialize  =  false;	  if(name!=    null)denominator    =    false;    	non-compiled	[CE]  cannot  find  symbol  destrialize	99	None	replace
9	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  true;  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  true;	  if(i!=    0)deserialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  boundField	23	None	replace
10	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
11	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
12	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
13	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
14	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
15	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	85	None	replace
16	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	85	None	replace
17	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	86	None	replace
18	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	86	None	replace
19	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	86	None	replace
20	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	86	None	replace
21	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	112	None	replace
22	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	112	None	replace
23	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	112	None	replace
24	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  ],  name);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  ],  name);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  incompatible  types	93	None	replace
25	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name);  [CE]  ']'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  ']'  expected	93	None	replace
26	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name  ]);  [CE]  ']'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name  ]);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  ']'  expected	93	None	replace
27	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name));  [CE]  ']'  expected  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name));  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name));	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  ']'  expected	93	None	replace
28	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  -  1]);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  -  1]);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	93	None	replace
29	[BUG]  [BUGGY]  Field[]  fieldTypes  =  field.toArray(new  Field[field.getType()  ]);  [CE]  incompatible  types  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  field.toArray(new  Field[field.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  field.toArray(new  Field[field.getType()  ]);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  incompatible  types	93	None	replace
30	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
31	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
32	[BUG]  [BUGGY]  if(serializedName  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
33	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
34	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    >=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	26	None	replace
35	[BUG]  [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i    >=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	26	None	replace
36	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
37	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
38	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
39	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
40	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
41	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
42	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
43	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  }  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	106	None	replace
44	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  continue;  }  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  continue;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  continue;  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	106	None	replace
45	[BUG]  [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
46	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
47	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
48	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
49	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
50	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  typeToken  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeToken	115	None	replace
51	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	115	None	replace
52	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	115	None	replace
53	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(i),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(i),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	115	None	replace
54	[BUG]  [BUGGY]  If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
55	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	117	None	replace
56	[BUG]  [BUGGY]  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
57	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
58	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
59	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
60	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
61	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
62	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)  {  serialize  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)  {  serialize  =  false;  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
63	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)  {  serialize  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)  {  serialize  =  false;  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
64	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  continue;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  continue;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  continue;  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
65	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  ';'  expected	114	None	replace
66	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	114	None	replace
67	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	114	None	replace
68	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	114	None	replace
69	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	114	None	replace
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(i  ==  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
71	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
72	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(i!=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
73	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
74	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(i!=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
75	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
76	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  false;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  false;	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
77	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
79	[BUG]  [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
80	[BUG]  [BUGGY]  If(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
81	[BUG]  [BUGGY]  if(serialize  ==  0)deserialize  =  false;  [CE]  incomparable  types:  boolean  and  int  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  0)deserialize  =  false;	  if(serialize!=    0)deserialize    =    true;    	non-compiled	[CE]  incomparable  types:  boolean  and  int	65	None	replace
82	[BUG]  [BUGGY]  if(serialize  >=  0)deserialize  =  false;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  >=  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  >=  0)deserialize  =  false;	  if(serialize!=    0)deserialize    =    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	65	None	replace
83	[BUG]  [BUGGY]  if(deserialize!=  0)deserialize  =  true;  [CE]  incomparable  types:  boolean  and  int  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(deserialize!=  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(deserialize!=  0)deserialize  =  true;	  if(serialize!=    0)deserialize    =    true;    	non-compiled	[CE]  incomparable  types:  boolean  and  int	65	None	replace
84	[BUG]  [BUGGY]  if(serialize!=  null)deserialize  =  true;  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  null)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  null)deserialize  =  true;	  if(serialize!=    0)deserialize    =    true;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	65	None	replace
85	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
86	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
87	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
88	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replacement  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replacement  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  replacement  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
89	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
90	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replaceBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replaceBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  replaceBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  ';'  expected	63	None	add
91	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
92	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
93	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	104	None	replace
94	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	104	None	replace
95	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	104	None	replace
96	[BUG]  [BUGGY]  If(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	104	None	replace
97	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
98	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
99	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
100	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
101	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
102	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
103	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  replacement  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  replacement  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  replacement  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
104	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	100	None	replace
105	[BUG]  [BUGGY]  If(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	100	None	replace
106	[BUG]  [BUGGY]  if(name  ==  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	100	None	replace
107	[BUG]  [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	100	None	replace
108	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	9	None	replace
109	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	9	None	replace
110	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
111	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
112	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
113	[BUG]  [BUGGY]  Field[]  resultFields  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
114	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
115	[BUG]  [BUGGY]  Field[]  resultFields  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
116	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
117	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
118	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames!=  null?  fields.toArray(new  Field[fields.size()  ]  :  name);  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames!=  null?  fields.toArray(new  Field[fields.size()  ]  :  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames!=  null?  fields.toArray(new  Field[fields.size()  ]  :  name);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  ')'  expected	38	None	replace
119	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
120	[BUG]  [BUGGY]  if(name!=  null)dererialize  =  false;  [CE]  cannot  find  symbol  dererialize  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)dererialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)dererialize  =  false;	  if(name!=    null)seserialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  dererialize	59	None	replace
121	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
122	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
123	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
124	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
125	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
126	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  oldField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  oldField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  oldField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
127	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  b  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  b  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  b  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
128	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  found  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  found  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  found  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
129	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
130	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(name  ==  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
131	[BUG]  [BUGGY]  if(name  ==  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
132	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  	64	None	replace
133	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
134	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
135	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
136	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
137	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
138	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  true;  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  true;	  if(name!=    null)deserialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  boundField	66	None	replace
139	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[field.getType()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[field.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[field.getType()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
140	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[field.getType()  ];  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  new  Field[field.getType()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  new  Field[field.getType()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
141	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[field.getType()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[field.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[field.getType()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
142	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  ],  name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  ],  name);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
143	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[field.getType()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[field.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  name.toArray(new  Field[field.getType()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
144	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
145	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	48	None	replace
146	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	48	None	replace
147	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	48	None	replace
148	[BUG]  [BUGGY]  if(name  ==  0)serialize  =  false;  [CE]  incomparable  types:  String  and  int  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  0)serialize  =  false;	  if(i    ==    0)serialize    =    false;    	non-compiled	[CE]  incomparable  types:  String  and  int	32	None	replace
149	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;	  if(i    >=    0)serialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  boundField	30	None	replace
150	[BUG]  [BUGGY]  if(i  >  0)serialize  =  false;  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)serialize  =  false;	  if(i    >=    0)serialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  boundField	30	None	replace
151	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  +  1];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  +  1];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fieldNames.size()  +  1];	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	77	None	replace
152	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  -  1];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  -  1];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fieldNames.size()  -  1];	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	77	None	replace
153	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  >  0?  fieldNames.size()  :  0;  [CE]  ']'  expected  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  >  0?  fieldNames.size()  :  0;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fieldNames.size()  >  0?  fieldNames.size()  :  0;	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  ']'  expected	77	None	replace
154	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  *  2];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  *  2];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fieldNames.size()  *  2];	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	77	None	replace
155	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fields.size()  ];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fields.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fields.size()  ];	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	77	None	replace
156	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	62	None	replace
157	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	62	None	replace
158	[BUG]  [BUGGY]  if(serializedName!=  null)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)deserialize  =  false;  //  only  serialize  the  default  name	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  serializedName	62	None	replace
159	[BUG]  [BUGGY]  if(fieldType!=  null)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldType!=  null)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldType!=  null)deserialize  =  false;  //  only  serialize  the  default  name	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	62	None	replace
160	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(serializedName!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
161	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  }	  if(serializedName!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
162	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(serializedName!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
163	[BUG]  [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	56	None	replace
164	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	56	None	replace
165	[BUG]  [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	56	None	replace
166	[BUG]  [BUGGY]  If(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	56	None	replace
167	[BUG]  [BUGGY]  Field[]  resultFields  =  fields.toArray(new  Field[fieldType.size()  ]);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fields.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fields.toArray(new  Field[fieldType.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
168	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
169	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
170	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
171	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	71	None	replace
172	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	71	None	replace
173	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	71	None	replace
174	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	71	None	replace
175	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	7	None	replace
176	[BUG]  [BUGGY]  If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	103	None	replace
177	[BUG]  [BUGGY]  if(name  ==  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	103	None	replace
178	[BUG]  [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	103	None	replace
179	[BUG]  [BUGGY]  if(name!=  null)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	103	None	replace
180	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	97	None	replace
181	[BUG]  [BUGGY]  If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
182	[BUG]  [BUGGY]  if(name  ==  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	97	None	replace
183	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	97	None	replace
184	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	19	None	replace
185	[BUG]  [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	19	None	replace
186	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
187	[BUG]  [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
188	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
189	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
190	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
191	[BUG]  [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  name.toArray(new  Field[fieldType.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
192	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fieldNames.size()  ];  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  new  Field[fieldNames.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  new  Field[fieldNames.size()  ];	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
193	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ]));  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ]));  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ]));	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  ';'  expected	39	None	replace
194	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
195	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[fieldNames.size()  ];  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  new  Field[fieldNames.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  new  Field[fieldNames.size()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
196	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  name.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
197	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name).toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name).toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  getFieldNames(name).toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
198	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
199	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
200	[BUG]  [BUGGY]  if(serialize  ==  null)deserialize  =  false;  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  null)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  null)deserialize  =  false;	  if(name    ==    null)deserialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	6	None	replace
201	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	90	None	replace
202	[BUG]  [BUGGY]  if(i!=  0)  {  if(serialize!=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  if(serialize!=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  if(serialize!=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
203	[BUG]  [BUGGY]  if(i!=  0  ||  name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0  ||  name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0  ||  name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	90	None	replace
204	[BUG]  [BUGGY]  if(i!=  0)  {  if(serialize  ==  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  if(serialize  ==  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  if(serialize  ==  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
205	[BUG]  [BUGGY]  if(i  ==  0)  {  if(serialize!=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  if(serialize!=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  if(serialize!=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
206	[BUG]  [BUGGY]  if(i!=  0)  {  if(serialize  >=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  if(serialize  >=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  if(serialize  >=  false)  {  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
207	[BUG]  [BUGGY]  if(serialize  ==  null)serialize  =  false;  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  null)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  null)serialize  =  false;	  if(name    ==    null)serialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	3	None	replace
208	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
209	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
210	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.get(i);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.get(i);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.get(i);	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	107	None	replace
211	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor();  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Constructor  <?>  constructor  =  context.getConstructor();	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
212	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	34	None	replace
213	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	34	None	replace
214	[BUG]  [BUGGY]  if(name!=  null)  {  if  (i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if  (i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if  (i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if    (i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
215	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if    (i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
216	[BUG]  [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	51	None	replace
217	[BUG]  [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	51	None	replace
218	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
219	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
220	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
221	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
222	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
223	[BUG]  [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	50	None	replace
224	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
225	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
226	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
227	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
228	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
229	[BUG]  [BUGGY]  if(i!=  0)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
230	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	88	None	replace
231	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	88	None	replace
232	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serializedName,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
233	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
234	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
235	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize,  raw);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize,  raw);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize,  raw);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
236	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	79	None	replace
237	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  cannot  find  symbol  boundField  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	79	None	replace
238	[BUG]  [BUGGY]  Field[]  resultFields  =  new  Field[fieldNames.size()  ];  [CE]  cannot  find  symbol  boundField  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  new  Field[fieldNames.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  new  Field[fieldNames.size()  ];	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	79	None	replace
239	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldTypes.size()  ]);  [CE]  cannot  find  symbol  fieldTypes  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldTypes.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldTypes.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	79	None	replace
240	[BUG]  [BUGGY]  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
241	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
242	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	96	None	replace
243	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	57	None	replace
244	[BUG]  [BUGGY]  If(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	57	None	replace
245	[BUG]  [BUGGY]  if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	57	None	replace
246	[BUG]  [BUGGY]  if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  skip  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  skip	57	None	replace
247	[BUG]  [BUGGY]  if(serialize!=  null)serialize  =  true;  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  null)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  null)serialize  =  true;	  if(serialize!=    null)serialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
248	[BUG]  [BUGGY]  if(serialize  ==  null)serialize  =  true;  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  null)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  null)serialize  =  true;	  if(serialize!=    null)serialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
249	[BUG]  [BUGGY]  if(declaredType!=  null)serialize  =  false;  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(declaredType!=  null)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(declaredType!=  null)serialize  =  false;	  if(serialize!=    null)serialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  boundField	5	None	replace
250	[BUG]  [BUGGY]  if(i  ==  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	47	None	replace
251	[BUG]  [BUGGY]  if(i  ==  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  skip  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  skip	47	None	replace
252	[BUG]  [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i    ==    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	47	None	replace
253	[BUG]  [BUGGY]  If(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
254	[BUG]  [BUGGY]  If(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
255	[BUG]  [BUGGY]  If(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
256	[BUG]  [BUGGY]  If(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
257	[BUG]  [BUGGY]  If(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
258	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fields.toArray(new  Field[fieldType.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
259	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
260	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
261	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
262	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)scherialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	73	None	replace
263	[BUG]  [BUGGY]  if(i!=  0)skip  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  skip  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)skip  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)skip  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  skip	73	None	replace
264	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
265	[BUG]  [BUGGY]  if(i  ==  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
266	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
267	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
268	[BUG]  [BUGGY]  if(i  >=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  size  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  size	119	None	replace
269	[BUG]  [BUGGY]  If(i!=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	119	None	replace
270	[BUG]  [BUGGY]  if(i  ==  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  size  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  size	119	None	replace
271	[BUG]  [BUGGY]  if(i!=  0)size  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  size  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)size  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)size  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  size	119	None	replace
272	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
273	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
274	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
275	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
276	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	76	None	replace
277	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	76	None	replace
278	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	76	None	replace
279	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	76	None	replace
280	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	102	None	replace
281	[BUG]  [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	102	None	replace
282	[BUG]  [BUGGY]  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  ';'  expected	102	None	replace
283	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
284	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	120	None	replace
285	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	120	None	replace
286	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	120	None	replace
287	[BUG]  [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	54	None	replace
288	[BUG]  [BUGGY]  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	54	None	replace
289	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	54	None	replace
290	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
291	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
292	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  new  Field[fields.size()  ];	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
293	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
294	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
295	[BUG]  [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fields.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fields.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  name.toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
296	[BUG]  [BUGGY]  Field[]  fields  =  getFieldNames(name).toArray(new  Field[fields.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  getFieldNames(name).toArray(new  Field[fields.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  getFieldNames(name).toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
297	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	55	None	replace
298	[BUG]  [BUGGY]  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	55	None	replace
299	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
300	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
301	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
302	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	111	None	replace
303	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	111	None	replace
304	[BUG]  [BUGGY]  if(name!=  null)seserialize  =  true;  [CE]  cannot  find  symbol  seserialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)seserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)seserialize  =  true;	  if(name!=    null)serialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  seserialize	1	None	replace
305	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	20	None	replace
306	[BUG]  [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	20	None	replace
307	[BUG]  [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    ==    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	20	None	replace
308	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
309	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
310	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
311	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	52	None	replace
312	[BUG]  [BUGGY]  if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incompatible  types	52	None	replace
313	[BUG]  [BUGGY]  if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  skip  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  skip	52	None	replace
314	[BUG]  [BUGGY]  if(i!=  0)setValue  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  setValue  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)setValue  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)setValue  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  setValue	52	None	replace
315	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serializedName,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serializedName,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
316	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
317	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
318	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
319	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
320	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
321	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  predecessor  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
322	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  replaced  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
323	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  returned  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
324	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
325	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
326	[BUG]  [BUGGY]  if(serialize!=  null)deserialize  =  false;  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  null)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  null)deserialize  =  false;	  if(name!=    null)deserialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	2	None	replace
327	[BUG]  [BUGGY]  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	49	None	replace
328	[BUG]  [BUGGY]  if(i  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
329	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
330	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
331	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
332	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
333	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serializedName,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
334	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
335	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getType(),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getType(),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getType(),  serializedName,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
336	[BUG]  [BUGGY]  If(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
337	[BUG]  [BUGGY]  if(i  ==  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
338	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
339	[BUG]  [BUGGY]  if(serialize  ==  0)deserialize  =  true;  [CE]  incomparable  types:  boolean  and  int  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  0)deserialize  =  true;	  if(serialize!=    0)deserialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  int	75	None	replace
340	[BUG]  [BUGGY]  if(serialize  >=  0)deserialize  =  true;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  >=  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  >=  0)deserialize  =  true;	  if(serialize!=    0)deserialize    =    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	75	None	replace
341	[BUG]  [BUGGY]  if(deserialize!=  0)deserialize  =  false;  [CE]  incomparable  types:  boolean  and  int  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(deserialize!=  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(deserialize!=  0)deserialize  =  false;	  if(serialize!=    0)deserialize    =    false;    	non-compiled	[CE]  incomparable  types:  boolean  and  int	75	None	replace
342	[BUG]  [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	74	None	replace
343	[BUG]  [BUGGY]  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	74	None	replace
344	[BUG]  [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)serialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	74	None	replace
345	[BUG]  [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)serialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	74	None	replace
346	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	18	None	replace
347	[BUG]  [BUGGY]  if(name  ==  0)deserialize  =  false;  [CE]  incomparable  types:  String  and  int  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  0)deserialize  =  false;	  if(i    ==    0)deserialize    =    false;    	non-compiled	[CE]  incomparable  types:  String  and  int	67	None	replace
348	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
349	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
350	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[field.getType()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[field.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fields.toArray(new  Field[field.getType()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
351	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
352	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType(),  name);  [CE]  ']'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType(),  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getType(),  name);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  ']'  expected	41	None	replace
353	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
354	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	21	None	replace
355	[BUG]  [BUGGY]  if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  skip  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)skip  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  skip	21	None	replace
356	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	21	None	replace
357	[BUG]  [BUGGY]  if(name!=  null)denomination  =  false;  [CE]  cannot  find  symbol  denomination  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)denomination  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)denomination  =  false;	  if(name!=    null)derialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  denomination	58	None	replace
358	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
359	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
360	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
361	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
362	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[field.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[field.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fields.toArray(new  Field[field.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
363	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
364	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
365	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[field.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
366	[BUG]  [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
367	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
368	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
369	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
370	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
371	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
372	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
373	[BUG]  [BUGGY]  if(i  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
374	[BUG]  [BUGGY]  Deserialize  <?>  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Deserialize  <?>  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Deserialize  <?>  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
375	[BUG]  [BUGGY]  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	98	None	replace
376	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  type.getGenericType(),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
377	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
378	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
379	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
380	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
381	[BUG]  [BUGGY]  Field[]  results  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  results  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  results  =  fieldNames.toArray(new  Field[fields.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
382	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  }  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	82	None	replace
383	[BUG]  [BUGGY]  if(name  ==  null)  {  serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  serialize  =  false;  //  only  serialize  the  default  name	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
384	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  serializedName	82	None	replace
385	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	82	None	replace
386	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  continue;  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  continue;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  continue;  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  boundField	82	None	replace
387	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  type.getGenericType(),  deserialize);  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  type.getGenericType(),  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  type.getGenericType(),  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
388	[BUG]  [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize    	non-compiled	[CE]  ')'  expected	81	None	replace
389	[BUG]  [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize    	non-compiled	[CE]  ')'  expected	81	None	replace
390	[BUG]  [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize    	non-compiled	[CE]  ')'  expected	81	None	replace
391	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
392	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	9	None	replace
393	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	9	None	replace
394	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  field,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  field,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  field,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	71	None	replace
395	[BUG]  [BUGGY]  if(serializedName  ==  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName  ==  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName  ==  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(serializedName!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
396	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
397	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  If(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  If(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    If(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  ';'  expected	60	None	add
398	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	111	None	replace
399	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  ')'  expected	110	None	replace
400	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  typeToken.get(i);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  typeToken.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  typeToken.get(i);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
401	[BUG]  [BUGGY]  if(serializedName!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	100	None	replace
402	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(name!=  null)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	100	1	replace
403	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	100	1	replace
404	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	21	None	replace
405	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  If(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  If(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    If(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  ';'  expected	68	None	add
406	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(i  ==  0)deserialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(i  ==  0)deserialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	add
407	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)serialize  =  false;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)serialize  =  false;	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
408	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
409	[BUG]  [BUGGY]  if(name!=  null)  {  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
410	[BUG]  [BUGGY]  If(i!=  0)serialize  =  false;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)serialize  =  false;	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
411	[BUG]  [BUGGY]  if(name!=  null)  {  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  If(i!=  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
412	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  typeToken  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeToken	115	None	replace
413	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	34	None	replace
414	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	34	None	replace
415	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	34	None	replace
416	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i  >=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if    (i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
417	[BUG]  [BUGGY]  Field[]  previousFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  previousFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  previousFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	79	None	replace
418	[BUG]  [BUGGY]  if(name!=  null)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  scherialize  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	73	None	replace
419	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  scherialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)scherialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scherialize	73	None	replace
420	[BUG]  [BUGGY]  if(i!=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  size  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  size	119	None	replace
421	[BUG]  [BUGGY]  if(i!=  0)size  =  false;  [CE]  cannot  find  symbol  size  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)size  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)size  =  false;	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  size	119	None	replace
422	[BUG]  [BUGGY]  if(name!=  null)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  size  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)size  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  size	119	None	replace
423	[BUG]  [BUGGY]  if(previous!=  null)deserialize  =  true;  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous!=  null)deserialize  =  true;	  if(name!=    null)deserialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  boundField	66	None	replace
424	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
425	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldCount.size()  ]);  [CE]  cannot  find  symbol  fieldCount  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldCount.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldCount.size()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fieldCount	40	None	replace
426	[BUG]  [BUGGY]  If(name!=  null)deserialize  =  true;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)deserialize  =  true;	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
427	[BUG]  [BUGGY]  If(name!=  null  &&  name.length()  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null  &&  name.length()  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null  &&  name.length()  ==  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
428	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(i  >=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  NullPointerException  	69	8	replace
429	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  NullPointerException  	69	8	replace
430	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(i  >=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
431	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	69	1	replace
432	[BUG]  [BUGGY]  if(name  ==  0)deserialize  =  true;  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  0)deserialize  =  true;	  if(i    ==    0)serialize    =    true;    	non-compiled	[CE]  incomparable  types:  String  and  int	24	None	replace
433	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	19	None	replace
434	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType(),  name));  [CE]  ']'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType(),  name));  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getType(),  name));	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  ']'  expected	41	None	replace
435	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  ],  raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  ],  raw);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getType()  ],  raw);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
436	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	33	None	replace
437	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	33	None	replace
438	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	33	None	replace
439	[BUG]  [BUGGY]  Field[]  fieldNames  =  currentFieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  currentFieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  currentFieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
440	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	78	None	replace
441	[BUG]  [BUGGY]  if(name!=  null)denerialize  =  false;  [CE]  cannot  find  symbol  denerialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)denerialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)denerialize  =  false;	  if(name!=    null)derialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  denerialize	58	None	replace
442	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  nameBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  nameBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  nameBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	7	None	replace
443	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
444	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  ')'  expected	16	None	replace
445	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	replace
446	[BUG]  [BUGGY]  if(fieldType!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldType!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldType!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
447	[BUG]  [BUGGY]  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
448	[BUG]  [BUGGY]  if(serializedName  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
449	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  true;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  true;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  true;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
450	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
451	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  returnedField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  returnedField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  returnedField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
452	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
453	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  fieldType,  TypeToken.get(name),  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  fieldType,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  fieldType,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
454	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  serialize,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
455	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
456	[BUG]  [BUGGY]  if(name  ==  null)  {  serialize  =  false;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  serialize  =  false;	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
457	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  true;  }  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  true;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  true;  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incompatible  types	82	None	replace
458	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  continue;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  continue;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  continue;	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
459	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  nameBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  nameBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  nameBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	114	None	replace
460	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  0)deserialize  =  false;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(jsonAdapterPresent!=  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(jsonAdapterPresent!=  0)deserialize  =  false;	  if(serialize!=    0)deserialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	75	None	replace
461	[BUG]  [BUGGY]  if(serializedName!=  null)deserialize  =  false;  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)deserialize  =  false;	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  serializedName	62	None	replace
462	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;/  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;/  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;/  only  serialize  the  default  name	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
463	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  0)deserialize  =  true;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(jsonAdapterPresent!=  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(jsonAdapterPresent!=  0)deserialize  =  true;	  if(i!=    0)deserialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	31	None	replace
464	[BUG]  [BUGGY]  if(serializedName!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	97	None	replace
465	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	44	None	replace
466	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
467	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	18	None	replace
468	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	18	None	replace
469	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
470	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
471	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
472	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	116	8	replace
473	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	116	8	replace
474	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
475	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
476	[BUG]  [BUGGY]  if(previous!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
477	[BUG]  [BUGGY]  if(serializedName  ==  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName  ==  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName  ==  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
478	[BUG]  [BUGGY]  if(previous!=  null)deserialize  =  false;  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous!=  null)deserialize  =  false;	  if(name!=    null)deserialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  boundField	2	None	replace
479	[BUG]  [BUGGY]  if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
480	[BUG]  [BUGGY]  if(i  ==  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
481	[BUG]  [BUGGY]  if(!serializedName)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
482	[BUG]  [BUGGY]  if(!serializedName)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName)  {  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
483	[BUG]  [BUGGY]  if(i!=  0)  {  method  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  method  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  method  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
484	[BUG]  [BUGGY]  if(i!=  0)prototype  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  prototype  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)prototype  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)prototype  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  prototype	57	None	replace
485	[BUG]  [BUGGY]  if(fieldType!=  null)  {  if(name!=  null)  {  serialize  =  false;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldType!=  null)  {  if(name!=  null)  {  serialize  =  false;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldType!=  null)  {  if(name!=  null)  {  serialize  =  false;  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
486	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
487	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	86	None	replace
488	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)return  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)return  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)return  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	86	None	replace
489	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	86	None	replace
490	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
491	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	92	None	replace
492	[BUG]  [BUGGY]  if(serializedName  ==  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName  ==  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName  ==  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
493	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
494	[BUG]  [BUGGY]  if(previous!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
495	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
496	[BUG]  [BUGGY]  if(i  ==  0)seserialize  =  true;  [CE]  cannot  find  symbol  seserialize  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)seserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)seserialize  =  true;	  if(i    ==    0)serialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  seserialize	32	None	replace
497	[BUG]  [BUGGY]  if(name  ==  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
498	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldNames[i]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldNames[i]);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldNames[i]);  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
499	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(field.getName());  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(field.getName());  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(field.getName());  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
500	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldType.getName());  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldType.getName());  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldType.getName());  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
501	[BUG]  [BUGGY]  if(name  ==  null)derialize  =  false;  [CE]  cannot  find  symbol  derialize  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)derialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)derialize  =  false;	  if(name    ==    null)serialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  derialize	3	None	replace
502	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	89	None	replace
503	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  replaceBoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
504	[BUG]  [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	add
505	[BUG]  [BUGGY]  if(i!=  0)prototype  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  prototype  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)prototype  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)prototype  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  prototype	52	None	replace
506	[BUG]  [BUGGY]  if(serializedName!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
507	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(name  ==  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	61	1	replace
508	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	61	1	replace
509	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(previous!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	61	1	replace
510	[BUG]  [BUGGY]  if(previous!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]        NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	61	1	replace
511	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  NullPointerException  	61	8	replace
512	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);	  if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  NullPointerException  	61	8	replace
513	[BUG]  [BUGGY]  if(name!=  null)derialize  =  true;  [CE]  cannot  find  symbol  derialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)derialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)derialize  =  true;	  if(name!=    null)serialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  derialize	1	None	replace
514	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
515	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
516	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
517	[BUG]  [BUGGY]  if(name  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
518	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
519	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serial  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serial  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serial	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
520	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  true;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  true;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  true;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
521	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize    	non-compiled	[CE]  ')'  expected	81	None	replace
522	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize    	non-compiled	[CE]  ')'  expected	81	None	replace
523	[BUG]  [BUGGY]  if(name  >=  0)serialize  =  true;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  >=  0)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  >=  0)serialize  =  true;	  if(i    >=    0)serialize    =    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
524	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
525	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
526	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	106	None	replace
527	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  true;  }  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  true;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  true;  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incompatible  types	106	None	replace
528	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  type.getGenericType(),  deserialize);  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  type.getGenericType(),  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  type.getGenericType(),  deserialize);  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
529	[BUG]  [BUGGY]  if(name  ==  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
530	[BUG]  [BUGGY]  if(serializedName!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
531	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
532	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
533	[BUG]  [BUGGY]  if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
534	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
535	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
536	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
537	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
538	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
539	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
540	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
541	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
542	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  raw,  serialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
543	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
544	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
545	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	90	None	replace
546	[BUG]  [BUGGY]  if(field!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(field!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(field!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	90	None	replace
547	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	90	None	replace
548	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	90	None	replace
549	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  -  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
550	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  +  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  +  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getType()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
551	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name  -  1]);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType(),  name  -  1]);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  ']'  expected	93	None	replace
552	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fields.toArray(new  Field[field.getType()  ]);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fields.toArray(new  Field[field.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fields.toArray(new  Field[field.getType()  ]);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  incompatible  types	93	None	replace
553	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  BoundField  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  BoundField	103	None	replace
554	[BUG]  [BUGGY]  if(serializedName!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	103	None	replace
555	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.get(i)];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fieldNames.get(i)];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fieldNames.get(i)];	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	77	None	replace
556	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  ],  fieldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  ],  fieldType);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  new  Field[fieldNames.size()  ],  fieldType);	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  ';'  expected	77	None	replace
557	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
558	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  type.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
559	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
560	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	113	None	replace
561	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  boundField.createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  ')'  expected	17	None	replace
562	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  continue;  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  continue;  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
563	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [CE]  unclosed  string  literal  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  unclosed  string  literal	17	None	replace
564	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	85	None	replace
565	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
566	[BUG]  [BUGGY]  if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
567	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
568	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
569	[BUG]  [BUGGY]  if(serializedName!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	64	None	replace
570	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	64	None	replace
571	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(previous!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
572	[BUG]  [BUGGY]  if(previous!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous!=  null)serialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
573	[BUG]  [BUGGY]  if(name!=  null)return  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)return  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)return  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incompatible  types	64	None	replace
574	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
575	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getClass()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getClass()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getClass()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
576	[BUG]  [BUGGY]  if(previous  ==  null)deserialize  =  false;  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(previous  ==  null)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(previous  ==  null)deserialize  =  false;	  if(name    ==    null)deserialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  boundField	6	None	replace
577	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  headerField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  headerField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  headerField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
578	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  leftField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  leftField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  leftField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
579	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  rowField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  rowField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  rowField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
580	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  row  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  row  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    BoundField  row  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
581	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
582	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name	  if(name!=    null)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
583	[BUG]  [BUGGY]  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
584	[BUG]  [BUGGY]  if(i!=  0)size  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  size  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)size  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)size  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  size	102	None	replace
585	[BUG]  [BUGGY]  if(name!=  null)DESerialize  =  true;  [CE]  cannot  find  symbol  DESerialize  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)DESerialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)DESerialize  =  true;	  if(name!=    null)deserialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  DESerialize	66	None	replace
586	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	if(name!=  null)serialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
587	[BUG]  [BUGGY]  if(name!=  null)serialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  true;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
588	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  serializedName	108	None	replace
589	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  }  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  }	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incompatible  types	108	None	replace
590	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
591	[BUG]  [BUGGY]  if(i  >  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
592	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false,  deserialize;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false,  deserialize;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false,  deserialize;	  if(name!=    null)deserialize    =    false;    	non-compiled	[CE]  ';'  expected	2	None	replace
593	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
594	[BUG]  [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)serialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	54	None	replace
595	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incomparable  types:  boolean  and  int  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  int	48	None	replace
596	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	48	None	replace
597	[BUG]  [BUGGY]  if(j!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  j  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(j!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(j!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  j	48	None	replace
598	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incomparable  types:  boolean  and  int  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incomparable  types:  boolean  and  int	53	None	replace
599	[BUG]  [BUGGY]  if(j!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  j  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(j!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(j!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  j	53	None	replace
600	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(name),  serialize,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
601	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  [CE]  incomparable  types:  boolean  and  int  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    	non-compiled	[CE]  incomparable  types:  boolean  and  int	74	None	replace
602	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
603	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
604	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
605	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
606	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
607	[BUG]  [BUGGY]  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	19	None	replace
608	[BUG]  [BUGGY]  if(i  >=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
609	[BUG]  [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	19	None	replace
610	[BUG]  [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
611	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  (see  http://bugs.eclipse.org/bugs/show_bug).html();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  (see  http://bugs.eclipse.org/bugs/show_bug).html();  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  (see  http://bugs.eclipse.org/bugs/show_bug).html();  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
612	[BUG]  [BUGGY]  if(serialize!=  null)serialize  =  false,  deserialize;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  null)serialize  =  false,  deserialize;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  null)serialize  =  false,  deserialize;	  if(serialize!=    null)serialize    =    false;    	non-compiled	[CE]  ';'  expected	5	None	replace
613	[BUG]  [BUGGY]  if(name  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  incomparable  types:  String  and  int  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  0)deserialize  =  false;  //  only  serialize  the  default  name	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incomparable  types:  String  and  int	70	None	replace
614	[BUG]  [BUGGY]  if(serialize  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  incomparable  types:  boolean  and  int  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize  ==  0)deserialize  =  false;  //  only  serialize  the  default  name	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incomparable  types:  boolean  and  int	70	None	replace
615	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  }  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	106	None	replace
616	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);  [CE]  no  suitable  method  found  for  toArray(Field[],String)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Field[],String)	79	None	replace
617	[BUG]  [BUGGY]  if(jsonAdapterPresent)deserialize  =  false;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(jsonAdapterPresent)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(jsonAdapterPresent)deserialize  =  false;	  if(i    ==    0)deserialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	67	None	replace
618	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)deserialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    return    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	90	None	replace
619	[BUG]  [BUGGY]  if(name  >=  0)serialize  =  false;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  >=  0)serialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  >=  0)serialize  =  false;	  if(i    >=    0)serialize    =    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	30	None	replace
620	[BUG]  [BUGGY]  if(name  >=  0)deserialize  =  false;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  >=  0)deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  >=  0)deserialize  =  false;	  if(i    >=    0)serialize    =    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	30	None	replace
621	[BUG]  [BUGGY]  if(name  >=  0)deserialize  =  true;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  >=  0)deserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  >=  0)deserialize  =  true;	  if(i    >=    0)serialize    =    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
622	[BUG]  [BUGGY]  if(i  >  0)serialize  =  true;  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)serialize  =  true;	  if(i    >=    0)serialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  boundField	22	None	replace
623	[BUG]  [BUGGY]  if(name!=  0)serialize  =  true;  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  0)serialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  0)serialize  =  true;	  if(i    >=    0)serialize    =    true;    	non-compiled	[CE]  incomparable  types:  String  and  int	22	None	replace
624	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	114	None	replace
625	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	114	None	replace
626	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  des	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
627	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getClass()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getClass()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getClass()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
628	[BUG]  [BUGGY]  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	80	None	replace
629	[BUG]  [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
630	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(fieldNames!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames.get(i);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(fieldNames!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames.get(i);  }	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
631	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serializedName,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  type.get(fieldType),  serializedName,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
632	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	12	None	replace
633	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	111	None	replace
634	[BUG]  [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  ==  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serializedName,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	111	None	replace
635	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	103	None	replace
636	[BUG]  [BUGGY]  if(field!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(field!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(field!=  null)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	103	None	replace
637	[BUG]  [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(name),  serialize,  deserialize);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
638	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
639	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
640	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  ==  0)  {  serialize  =  false;  return  new  BoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
641	[BUG]  [BUGGY]  if(i!=  0)  {  method  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  method  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  method  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
642	[BUG]  [BUGGY]  if(i!=  0)  {  schema  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  schema  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  schema  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
643	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	21	None	replace
644	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);	  if(name!=    null)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	100	None	replace
645	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	11	None	replace
646	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  //  only  serialize  the  default  name	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
647	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
648	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getClass()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getClass()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getClass()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
649	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getGenericType()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getGenericType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[field.getGenericType()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
650	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  ],  raw);  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  ],  raw);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getType()  ],  raw);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  incompatible  types	93	None	replace
651	[BUG]  [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getClass()  ]);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getClass()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fieldTypes  =  fieldNames.toArray(new  Field[field.getClass()  ]);	  Field[]    fieldTypes    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  incompatible  types	93	None	replace
652	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0) ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0) ");  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  (see  http://bugs.eclipse.org/bugs/show_bug.cgi?id=0) ");  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
653	[BUG]  [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  serialize  =  false;  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),	  if(name!=    null)    {    serialize    =    false;    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  ')'  expected	83	None	replace
654	[BUG]  [BUGGY]  if(name  ==  null)deserialize  =  false,  deserialize;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)deserialize  =  false,  deserialize;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)deserialize  =  false,  deserialize;	  if(name    ==    null)deserialize    =    false;    	non-compiled	[CE]  ';'  expected	6	None	replace
655	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name    ==    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
656	[BUG]  [BUGGY]  if(serializedName!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
657	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
658	[BUG]  [BUGGY]  if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
659	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
660	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  if(name!=  null)deserialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=    null)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    if(name!=  null)deserialize  =  false;  BoundField  old  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  	non-compiled	[CE]  variable  boundField  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	60	None	add
661	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	add	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	9	1	replace
662	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	compilable	  [FE]  ComparisonFailure  	9	1	replace
663	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType)&  0xffff);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      ComparisonFailure    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType)&  0xffff);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType)&  0xffff);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	9	None	replace
664	[BUG]  [BUGGY]  if(jsonAdapterPresent)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]    NullPointerException    [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(jsonAdapterPresent)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(jsonAdapterPresent)deserialize  =  false;  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	69	None	replace
665	[BUG]  [BUGGY]  if(i!=  0)  {  schema  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  schema  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  schema  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
666	[BUG]  [BUGGY]  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  scherialize  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)scherialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  scherialize	57	None	replace
667	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scheduled  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scheduled  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scheduled  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(serializedName!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
668	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incomparable  types:  boolean  and  int  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incomparable  types:  boolean  and  int	18	None	replace
669	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	18	None	replace
670	[BUG]  [BUGGY]  if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)return  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)size    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  incompatible  types	119	None	replace
671	[BUG]  [BUGGY]  if(name  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incomparable  types:  String  and  int  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  0)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incomparable  types:  String  and  int	71	None	replace
672	[BUG]  [BUGGY]  if(jsonAdapterPresent)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(jsonAdapterPresent)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(jsonAdapterPresent)deserialize  =  false;  //  only  serialize  the  default  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    ==    0)deserialize    =    false;    //    only    serialize    the    default    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	71	None	replace
673	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    des    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
674	[BUG]  [BUGGY]  if(name!=  null)denominate  =  false;  [CE]  cannot  find  symbol  denominate  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)denominate  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)denominate  =  false;	  if(name!=    null)derialize    =    false;    	non-compiled	[CE]  cannot  find  symbol  denominate	58	None	replace
675	[BUG]  [BUGGY]  Field[]  previous  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  previous  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  previous  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	76	None	replace
676	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)deserialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	86	None	replace
677	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  if(i!=  0)serialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	86	None	replace
678	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)scherialize  =  false;  BoundField  previous  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    BoundField    previous    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  serializedName	86	None	replace
679	[BUG]  [BUGGY]  if(i  >  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    >=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	26	None	replace
680	[BUG]  [BUGGY]  if(i  >  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
681	[BUG]  [BUGGY]  if(i  >=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i    >=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
682	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames!=  null?  fields.toArray(new  Field[fields.size()  ]):  new  Field[fields.size()  ];  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames!=  null?  fields.toArray(new  Field[fields.size()  ]):  new  Field[fields.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames!=  null?  fields.toArray(new  Field[fields.size()  ]):  new  Field[fields.size()  ];	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
683	[BUG]  [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(name!=    null)    {    if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
684	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getComponentType()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getComponentType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.getComponentType()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
685	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  deserialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  deserialize,  deserialize);	  if(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    typeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	115	None	replace
686	[BUG]  [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
687	[BUG]  [BUGGY]  if(serialize!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
688	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incomparable  types:  boolean  and  int  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  int	85	None	replace
689	[BUG]  [BUGGY]  if(i!=  0)return  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)return  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)return  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)scherialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incompatible  types	73	None	replace
690	[BUG]  [BUGGY]  if(name  ==  null)derialize  =  true;  [CE]  cannot  find  symbol  derialize  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)derialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)derialize  =  true;	  if(name    ==    null)serialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  derialize	4	None	replace
691	[BUG]  [BUGGY]  if(name  ==  null)seserialize  =  true;  [CE]  cannot  find  symbol  seserialize  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name  ==  null)seserialize  =  true;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name  ==  null)seserialize  =  true;	  if(name    ==    null)serialize    =    true;    	non-compiled	[CE]  cannot  find  symbol  seserialize	4	None	replace
692	[BUG]  [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
693	[BUG]  [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
694	[BUG]  [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null  &&  name.length()  >  0)  {  deserialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  If(name!=    null)deserialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	10	None	replace
695	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  [CE]  incomparable  types:  boolean  and  int  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  false;  //  only  serialize  the  default  name	  if(i!=    0)deserialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incomparable  types:  boolean  and  int	120	None	replace
696	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getClass()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[field.getClass()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[field.getClass()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[field.getType()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
697	[BUG]  [BUGGY]  if(serializedName!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serializedName!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serializedName!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
698	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
699	[BUG]  [BUGGY]  if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
700	[BUG]  [BUGGY]  if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  bounds  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
701	[BUG]  [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(!serializedName.equals(name))  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(!serializedName.equals(name))  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  des	  if(i!=    0)    {    deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
702	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incomparable  types:  boolean  and  int  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  int	25	None	replace
703	[BUG]  [BUGGY]  Field[]  previous  =  new  Field[fieldNames.size()  ];  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  previous  =  new  Field[fieldNames.size()  ];  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  previous  =  new  Field[fieldNames.size()  ];	  Field[]    result    =    new    Field[fieldNames.size()    ];    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	77	None	replace
704	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)scherialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if(i!=    0)scherialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
705	[BUG]  [BUGGY]  If(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
706	[BUG]  [BUGGY]  If(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
707	[BUG]  [BUGGY]  If(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
708	[BUG]  [BUGGY]  If(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
709	[BUG]  [BUGGY]  If(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(name!=  null)  {  serialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
710	[BUG]  [BUGGY]  If(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  If(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	If(i!=  0)  {  deserialize  =  true;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  If(i!=    0)serialize    =    true;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  ';'  expected	28	None	replace
711	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  incomparable  types:  boolean  and  int  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  int	104	None	replace
712	[BUG]  [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	104	None	replace
713	[BUG]  [BUGGY]  if(j!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  j  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(j!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(j!=  0)deserialize  =  true;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i!=    0)deserialize    =    true;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  j	104	None	replace
714	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  incompatible  types	82	None	replace
715	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  cannot  find  symbol  serializedName	82	None	replace
716	[BUG]  [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  serialize  =  false;  return  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    serialize    =    false;    //    only    serialize    the    default    name    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	82	None	replace
717	[BUG]  [BUGGY]  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  if(i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  boundField	50	None	replace
718	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getRawClass()  ]);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getRawClass()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getRawClass()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
719	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getGenericType()  ]);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getGenericType()  ]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.getGenericType()  ]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
720	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);	  Field[]    resultFields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
721	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
722	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)  {  throw  new  IllegalArgumentException(fieldType  + "  declares  multiple  JSON  fields  named   "  +  name);  }	  if(name!=    null)    {    if(i!=    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
723	[BUG]  [BUGGY]  if(serialize!=  0)deserialize  =  null;  [CE]  incomparable  types:  boolean  and  int  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(serialize!=  0)deserialize  =  null;  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(serialize!=  0)deserialize  =  null;	  if(serialize!=    0)deserialize    =    true;    	non-compiled	[CE]  incomparable  types:  boolean  and  int	65	None	replace
724	[BUG]  [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  }	  if(name!=    null)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  cannot  find  symbol  boundField	97	None	replace
725	[BUG]  [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i!=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  dese	  if(name!=    null)    {    if(i!=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    dese    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
726	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >  0)serialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if    (i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
727	[BUG]  [BUGGY]  if(name!=  null)  {  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(name!=  null)  {  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(name!=  null)  {  if(i  >=  0)deserialize  =  false;  //  only  serialize  the  default  name  BoundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  }	  if(name!=    null)    {    if    (i    >=    0)serialize    =    false;    //    only    serialize    the    default    name    BoundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
728	[BUG]  [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  type.get(fieldType),  serializedName,  deserialize);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  BoundField  result  =  createBoundField(context,  field,  name,  type.get(fieldType),  serializedName,  deserialize);  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	BoundField  result  =  createBoundField(context,  field,  name,  type.get(fieldType),  serializedName,  deserialize);	  BoundField    result    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
729	[BUG]  [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);      [BUGGY]  if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }  [BUGGY]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	162	164	1	replace	if(i!=  0)  {  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  typeToken.get(fieldType),  serialize,  deserialize);  }	  if(i!=    0)    {    serialize    =    false;    //    only    serialize    the    default    name    BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
