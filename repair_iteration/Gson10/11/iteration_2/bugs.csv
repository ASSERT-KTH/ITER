bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	4	None	replace
7	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
8	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
9	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
10	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName());  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	4	None	replace
11	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  name  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
12	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	8	None	replace
13	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	8	None	replace
14	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	8	None	replace
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getName();  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	add	String  name  =  f.getName();	      	compilable	  [FE]  ComparisonFailure  	8	1	replace
16	[BUG]  [BUGGY]  String  name  =  f.getName();  [FE]  ComparisonFailure  [FE]                              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getName();  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName();	      	compilable	  [FE]  ComparisonFailure  	8	1	replace
17	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor();  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
18	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  null  :  f.translateName(annotation);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  null  :  annotation.translateName(f);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  null  :  annotation.translateName(f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  null  :  annotation.translateName(f);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  annotation.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
21	[BUG]  [BUGGY]  String  name  =  this.f.translateName(annotation);  [CE]  cannot  find  symbol  f  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  this.f.translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.f.translateName(annotation);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  f	2	None	replace
22	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  serializedName.translateName(f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
23	[BUG]  [BUGGY]  String  name  =  annotations.translateName(f);  [CE]  cannot  find  symbol  annotations  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  annotations.translateName(f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotations.translateName(f);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  annotations	2	None	replace
24	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	6	None	replace
25	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
26	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
27	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	6	None	replace
28	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
29	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getDeclaringClass(),  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getDeclaringClass(),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
30	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
31	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getSerializedName());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
32	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
33	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName,  fieldNamingPolicy.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
34	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
35	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
36	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName);	  String    name    =    f.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	1	None	replace
37	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy);	  String    name    =    f.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
38	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  fieldNamingPolicy);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName,  fieldNamingPolicy);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  fieldNamingPolicy);	  String    name    =    f.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	1	None	replace
39	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serializedName);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
40	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  deserializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  deserializedName);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	10	None	replace
41	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  annotation);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName,  annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  annotation);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
42	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.name().translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
43	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  null);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  null);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  null);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
44	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
45	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.value());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value());	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
46	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
47	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
48	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
49	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
50	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	14	None	replace
51	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	14	None	replace
52	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serialize);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	14	None	replace
53	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
54	[BUG]  [BUGGY]  String  name  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.getAnnotation(SerializedName.class);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	14	None	replace
55	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	14	None	replace
56	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
57	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
58	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getValue());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
59	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
60	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
61	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
62	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	13	None	replace
63	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
64	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
65	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
66	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(name,  annotation);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	13	None	replace
67	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name);  [CE]  cannot  find  symbol  name  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.name);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
68	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name);  [CE]  name  has  private  access  in  Field  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f.name);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  name  has  private  access  in  Field	15	None	replace
69	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.name);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName.name);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.name);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	15	None	replace
70	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
71	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  name  has  private  access  in  Field	15	None	replace
72	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  annotation);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  annotation);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
73	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	9	None	replace
74	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
75	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	9	None	replace
76	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  field	9	None	replace
77	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
78	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class);	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
79	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
80	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  ')'  expected	12	None	replace
81	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.class);	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
82	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.value());	  String    name    =    f.translateName(fieldNamingPolicy.value());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
83	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.value());  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(serializedName.value());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.value());	  String    name    =    f.translateName(fieldNamingPolicy.value());    	non-compiled	[CE]  cannot  find  symbol  serializedName	16	None	replace
84	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializedName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.value());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
85	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.value());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.value());	  String    name    =    f.translateName(fieldNamingPolicy.value());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
86	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(f.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
87	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
88	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	13	None	replace
89	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  excluder);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  excluder);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	13	None	replace
90	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  constructor);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  constructor);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  constructor	13	None	replace
91	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.getName());  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(f.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol  fields	4	None	replace
92	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
93	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
94	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
95	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.value());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.value());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.value());	  String    name    =    f.translateName(fieldNamingPolicy.value());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
96	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f);  [CE]  cannot  find  symbol  name  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
97	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
98	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fields	6	None	replace
99	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	6	None	replace
100	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingStrategy);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingStrategy);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	10	None	replace
101	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  fieldNames);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNames);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	10	None	replace
102	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
103	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
104	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
105	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value()).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation.value()).getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value()).getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
106	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	8	None	replace
107	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	8	None	replace
108	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	8	None	replace
109	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(f.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
110	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  annotation.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  annotation.getAnnotation(SerializedName.class);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
111	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.translateName(annotation);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.translateName(annotation);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
112	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  annotation.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  annotation.getAnnotation(SerializedName.class);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
113	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  annotation.value();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  annotation.value();  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  annotation.value();	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
114	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f);	  String    name    =    f.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	1	None	replace
115	[BUG]  [BUGGY]  String  name  =  fields.translateName(f);  [CE]  cannot  find  symbol  fields  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f);	  String    name    =    f.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  fields	1	None	replace
116	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  name  has  private  access  in  Field	14	None	replace
117	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  type  has  private  access  in  Field	14	None	replace
118	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  null);	  String    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	14	None	replace
119	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
120	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.type);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
121	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSerializedName());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
122	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSerializedName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
123	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  f.getAnnotation(SerializedName.class);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
124	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
125	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
126	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.getAnnotation(SerializedName.class);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
127	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation);	  String    name    =    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
128	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	11	None	replace
129	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
130	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  fields  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy);	  String    name    =    f.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  fields	1	None	replace
131	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	15	None	replace
132	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f.type);  [CE]  cannot  find  symbol  name  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f.type);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name);    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
133	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  deserializedName);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  deserializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	13	None	replace
134	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getClass());	  String    name    =    f.translateName(fieldNamingPolicy.class);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	12	None	replace
135	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor();  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
136	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  incompatible  types	8	None	replace
137	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
138	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.value());	  String    name    =    f.translateName(fieldNamingPolicy.value());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	16	None	replace
139	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getValue());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
140	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getValue());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
141	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getValue());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getValue());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.getValue());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
142	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	6	None	replace
143	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getDeclaringClass());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
144	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getName());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
145	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
146	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	4	None	replace
147	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getName());	  String    name    =    f.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
148	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
149	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
150	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName());  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
151	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  f.translateName(annotation,  deserialized);  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  deserialized);	  String    name    =    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserialized	10	None	replace
152	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	9	None	replace
153	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {    [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]    return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
