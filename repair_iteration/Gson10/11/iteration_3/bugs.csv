bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  name  =  f.translateName(name,  annotation);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name,  annotation);	  String    name    =    fieldNamingPolicy.translateName(name,    annotation);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
2	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  name);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  name);	  String    name    =    fieldNamingPolicy.translateName(name,    annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	66	None	replace
3	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  name);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  name);	  String    name    =    fieldNamingPolicy.translateName(name,    annotation);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
4	[BUG]  [BUGGY]  String  name  =  annotation.translateName(name,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(name,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(name,  fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(name,    annotation);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
5	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
6	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	20	None	replace
7	[BUG]  [BUGGY]  String  name  =  serialize.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	20	None	replace
8	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serializedName.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  serializedName.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serializedName.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	20	None	replace
9	[BUG]  [BUGGY]  String  name  =  SerializedName.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  SerializedName.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  SerializedName.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
10	[BUG]  [BUGGY]  String  name  =  serialized.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialized  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialized.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialized.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialized	20	None	replace
11	[BUG]  [BUGGY]  String  name  =  annotations.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  annotations  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotations.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotations.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  annotations	20	None	replace
12	[BUG]  [BUGGY]  SerializedName  serializedName  =  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  serialize.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  serialize.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	11	None	replace
13	[BUG]  [BUGGY]  SerializedName  serializedName  =  serialized.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialized  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  serialized.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  serialized.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialized	11	None	replace
14	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  name  has  private  access  in  Field	11	None	replace
15	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  type  has  private  access  in  Field	11	None	replace
16	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Field)  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Field)	11	None	replace
17	[BUG]  [BUGGY]  SerializedName  serializedName  =  serialization.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialization  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  serialization.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  serialization.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialization	11	None	replace
18	[BUG]  [BUGGY]  String  name  =  constructor.translateName(annotation,  fieldNamingPolicy);  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(annotation,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(annotation,  fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(annotation,    constructor);    	non-compiled	[CE]  cannot  find  symbol  constructor	90	None	replace
19	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  constructorConstructor);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  constructorConstructor);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  constructorConstructor);	  String    name    =    fieldNamingPolicy.translateName(annotation,    constructor);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	90	None	replace
20	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(annotation,    constructor);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
21	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serialize);	  String    name    =    fieldNamingPolicy.translateName(annotation,    constructor);    	non-compiled	[CE]  cannot  find  symbol  serialize	90	None	replace
22	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
23	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getName(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
24	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getName());  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	144	None	replace
25	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getName());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	144	None	replace
26	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.class,  f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
27	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.class,  f);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
28	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.class,  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
29	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  serializedName);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
30	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.class,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.class,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.class,  fieldNamingPolicy);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
31	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	79	None	replace
32	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
33	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
34	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  fieldNamingStrategy.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  fieldNamingStrategy.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  fieldNamingStrategy.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
35	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	143	None	replace
36	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serialize.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serialize.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  serialize.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
37	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serialize.getSerializedName());  [CE]  cannot  find  symbol  serialize  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serialize.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  serialize.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialize	35	None	replace
38	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	35	None	replace
39	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
40	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	35	None	replace
41	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
42	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getValue(),  serializedName);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getValue(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getValue(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
43	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getValue());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol  serializedName	139	None	replace
44	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serializedName);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	107	None	replace
45	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  name  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  name);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
46	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	107	None	replace
47	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serialize);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	107	None	replace
48	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
49	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  f.getAnnotation(SerializedName.class,  null);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	107	None	replace
50	[BUG]  [BUGGY]  String  name  =  annotation.translateName(serializedName,  fieldNamingPolicy);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(serializedName,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(serializedName,  fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(serializedName,    annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
51	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serialize,  annotation);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serialize,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serialize,  annotation);	  String    name    =    fieldNamingPolicy.translateName(serializedName,    annotation);    	non-compiled	[CE]  cannot  find  symbol  serialize	61	None	replace
52	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
53	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
54	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	149	None	replace
55	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	149	None	replace
56	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
57	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSimpleName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSimpleName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getSimpleName(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
58	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  field.getValue());  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  field.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  field.getValue());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol  field	59	None	replace
59	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  serializedName);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
60	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  annotation);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  annotation);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
61	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getValue());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation.getValue());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
62	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f,  f.getValue());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
63	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
64	[BUG]  [BUGGY]  String  name  =  serialize.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
65	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
66	[BUG]  [BUGGY]  String  name  =  serialized.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialized.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialized.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
67	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
68	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serialize);	  String    name    =    f.translateName(annotation,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  serialize	100	None	replace
69	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  dataArea);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  dataArea);	  String    name    =    f.translateName(annotation,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  dataArea	100	None	replace
70	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  constructor);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  constructor);	  String    name    =    f.translateName(annotation,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  constructor	100	None	replace
71	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  deserializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	50	None	replace
72	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,SerializedName)  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  annotation);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,SerializedName)	50	None	replace
73	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
74	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  name);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
75	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
76	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
77	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName.class);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(serializedName.class);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
78	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
79	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
80	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getDeclaringClass(),  serializedName);	  String    name    =    f.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
81	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.getDeclaringClass());	  String    name    =    f.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
82	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getDeclaringClass());	  String    name    =    f.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
83	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getDeclaringClass(),  serialize);	  String    name    =    f.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
84	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getDeclaringClass(),  f);	  String    name    =    f.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
85	[BUG]  [BUGGY]  String  name  =  f.translateName(fields.getSerializedName());  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
86	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
87	[BUG]  [BUGGY]  String  name  =  f.translateName(fields,  f.getSerializedName());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields,  f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
88	[BUG]  [BUGGY]  String  name  =  serialize.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
89	[BUG]  [BUGGY]  String  name  =  this.fields.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fields.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fields.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
90	[BUG]  [BUGGY]  String  name  =  fieldNames.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNames.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNames.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
91	[BUG]  [BUGGY]  String  name  =  field.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  field.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  field.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
92	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
93	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class),  f);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	47	None	replace
94	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
95	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	47	None	replace
96	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class),  f);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	47	None	replace
97	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  field	47	None	replace
98	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.serializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
99	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.serializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	84	None	replace
100	[BUG]  [BUGGY]  String  name  =  f.serializedName().translateName(fieldNamingPolicy.serializedName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.serializedName().translateName(fieldNamingPolicy.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.serializedName().translateName(fieldNamingPolicy.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
101	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  fieldNamingPolicy.serializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  fieldNamingPolicy.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  fieldNamingPolicy.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	84	None	replace
102	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.serializedName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
103	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.serializedName();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.serializedName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.serializedName();	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
104	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializedName):  f.translateName(annotation);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializedName):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(serializedName):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	111	None	replace
105	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serialize):  f.translateName(annotation);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serialize):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serialize):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serialize	111	None	replace
106	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(f):  f.translateName(annotation);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(f):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serializedName.translateName(f):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	111	None	replace
107	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serialize.translateName(f):  f.translateName(annotation);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serialize.translateName(f):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serialize.translateName(f):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serialize	111	None	replace
108	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serialize):  f.translateName(annotation);  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serialize):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(serialize):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serialize	111	None	replace
109	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializers):  f.translateName(annotation);  [CE]  cannot  find  symbol  serializers  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializers):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializers):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializers	111	None	replace
110	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.type);  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  name  has  private  access  in  Field	132	None	replace
111	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name,  f.type);  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  cannot  find  symbol  name	132	None	replace
112	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  f.type);  [CE]  name  has  private  access  in  Field  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  name  has  private  access  in  Field	132	None	replace
113	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f.value);  [CE]  cannot  find  symbol  name  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  f.value);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  cannot  find  symbol  name	132	None	replace
114	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.name,  f.type);  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  name  has  private  access  in  Field	132	None	replace
115	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f.serializedName);  [CE]  cannot  find  symbol  name  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  f.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  f.serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  cannot  find  symbol  name	132	None	replace
116	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
117	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSimpleName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSimpleName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getSimpleName(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
118	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getValue());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
119	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getValue());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getValue());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	58	None	replace
120	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.value());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.value());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
121	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serializedName.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	110	None	replace
122	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
123	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serialize.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serialize.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serialize.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	110	None	replace
124	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  serializedName.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  serializedName.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  serializedName.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	110	None	replace
125	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
126	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  serializedName.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
127	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  serialize.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  serialize.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  serialize.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	110	None	replace
128	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
129	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	119	None	replace
130	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	119	None	replace
131	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	119	None	replace
132	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getType(),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getType(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getType(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	119	None	replace
133	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
134	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.class);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	78	None	replace
135	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.class);  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  name  has  private  access  in  Field	78	None	replace
136	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
137	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
138	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName,  f.getName());  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	146	None	replace
139	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	146	None	replace
140	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getName());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	146	None	replace
141	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
142	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f.getName());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(name,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	146	None	replace
143	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  serialize	146	None	replace
144	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	130	None	replace
145	[BUG]  [BUGGY]  String  name  =  _fieldNamingPolicy.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  _fieldNamingPolicy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _fieldNamingPolicy.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _fieldNamingPolicy.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  _fieldNamingPolicy	130	None	replace
146	[BUG]  [BUGGY]  String  name  =  constructor.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  constructor	130	None	replace
147	[BUG]  [BUGGY]  String  name  =  fieldNames.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNames.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNames.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	130	None	replace
148	[BUG]  [BUGGY]  String  name  =  annotations.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  annotations  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotations.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotations.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  annotations	130	None	replace
149	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.type);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	51	None	replace
150	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	51	None	replace
151	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.value());  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	51	None	replace
152	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.class);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.class);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	51	None	replace
153	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  deserializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	51	None	replace
154	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  serialize);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	51	None	replace
155	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getValue(),  f.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getValue(),  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getValue(),  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
156	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
157	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
158	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getKey());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getKey());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.getKey());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
159	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.getValue());  [CE]  name  has  private  access  in  Field  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getValue());    	non-compiled	[CE]  name  has  private  access  in  Field	140	None	replace
160	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
161	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getDeclaringClass());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	28	None	replace
162	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	28	None	replace
163	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serialize.getDeclaringClass());  [CE]  cannot  find  symbol  serialize  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serialize.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  serialize.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	28	None	replace
164	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  serializedName));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  serializedName));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  serializedName	128	None	replace
165	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  serializedName	128	None	replace
166	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class,  serializedName));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class,  serializedName));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  serializedName	128	None	replace
167	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  annotation));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  annotation));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  annotation));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
168	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize));  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  serialize	128	None	replace
169	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name));  [CE]  name  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  name  has  private  access  in  Field	128	None	replace
170	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
171	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
172	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	30	None	replace
173	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
174	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getSerializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
175	[BUG]  [BUGGY]  String  name  =  f.translateName(annotatedName);  [CE]  cannot  find  symbol  annotatedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotatedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotatedName);	  String    name    =    f.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  annotatedName	36	None	replace
176	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.serializedName);	  String    name    =    f.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	36	None	replace
177	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	136	None	replace
178	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  name  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  name);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  name	136	None	replace
179	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serialize);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	136	None	replace
180	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
181	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	136	None	replace
182	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.getName().translateName(annotation);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.getName().translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.getName().translateName(annotation);	  String    name    =(annotation!=    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
183	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.getName().translateName(annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.getName().translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  null  :  f.getName().translateName(annotation);	  String    name    =(annotation!=    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
184	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  null  :  f.translateName(annotation,  serializedName);	  String    name    =(annotation!=    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	18	None	replace
185	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
186	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	75	None	replace
187	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	75	None	replace
188	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	75	None	replace
189	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f.getAnnotation(SerializedName.class));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(name,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	75	None	replace
190	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	75	None	replace
191	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
192	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(annotation.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(annotation.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(annotation.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
193	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	49	None	replace
194	[BUG]  [BUGGY]  String  name  =  serializedName.translate(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translate(f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translate(f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
195	[BUG]  [BUGGY]  String  name  =  f.translateName(annotated.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotated.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotated.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
196	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
197	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  annotation.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  annotation.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  annotation.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
198	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
199	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
200	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
201	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
202	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
203	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	replace
204	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
205	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol  field	48	None	replace
206	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	replace
207	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  serializedName  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
208	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  name  has  private  access  in  Field	69	None	replace
209	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.name);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	69	None	replace
210	[BUG]  [BUGGY]  String  name  =  f.translateName(annotatedName.name);  [CE]  cannot  find  symbol  annotatedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotatedName.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotatedName.name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  cannot  find  symbol  annotatedName	69	None	replace
211	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.name);  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  cannot  find  symbol  serialize	69	None	replace
212	[BUG]  [BUGGY]  String  name  =  f.translateName(serializers.name);  [CE]  cannot  find  symbol  serializers  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializers.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializers.name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  cannot  find  symbol  serializers	69	None	replace
213	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize.name);  [CE]  cannot  find  symbol  serialize  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serialize.name);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  cannot  find  symbol  serialize	116	None	replace
214	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.name);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	116	None	replace
215	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  serializedName);  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name,  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
216	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.value);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.value);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
217	[BUG]  [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.translateName(annotation.name));  [CE]  cannot  find  symbol  name  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.translateName(annotation.name));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.equals(fieldNamingPolicy.translateName(annotation.name));	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol  name	71	None	replace
218	[BUG]  [BUGGY]  String  name  =  f.name.toLowerCase();  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.toLowerCase();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.toLowerCase();	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
219	[BUG]  [BUGGY]  String  name  =  f.name.translateName(annotation.value());  [CE]  name  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(annotation.value());	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
220	[BUG]  [BUGGY]  String  name  =  f.name.trim();  [CE]  name  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.trim();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.trim();	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
221	[BUG]  [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.translateName(annotation.value()));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.translateName(annotation.value()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.equals(fieldNamingPolicy.translateName(annotation.value()));	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	71	None	replace
222	[BUG]  [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(fieldNamingPolicy.getName());	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
223	[BUG]  [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.equals(fieldNamingPolicy.getName());	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
224	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
225	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
226	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  serializedName  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName.getDeclaringClass(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
227	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getDeclaringClass(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
228	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  serializedName  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getDeclaringClass(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
229	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation.getName());	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
230	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getName(),  serializedName);	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
231	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getName());  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f.getName());	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	10	None	replace
232	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field.getName());  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(field.getName());	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
233	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(serializedName,  f.getName());  [CE]  cannot  find  symbol  serializedName  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(serializedName,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(serializedName,  f.getName());	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
234	[BUG]  [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.name);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(fieldNamingPolicy.name);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
235	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(annotation.name);  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(annotation.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(annotation.name);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
236	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(serializedName,  f.name);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(serializedName,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(serializedName,  f.name);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	68	None	replace
237	[BUG]  [BUGGY]  String  name  =  annotation.name.translateName(f.name);  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.name.translateName(f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.name.translateName(f.name);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	68	None	replace
238	[BUG]  [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.value());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(fieldNamingPolicy.value());	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
239	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.name.translateName(f.name);  [CE]  name  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.name.translateName(f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.name.translateName(f.name);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	68	None	replace
240	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  serializedName);  [CE]  name  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f.name,  serializedName);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	68	None	replace
241	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
242	[BUG]  [BUGGY]  String  name  =  f.getName();  SerializedName  name  =  f.getName();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  SerializedName  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    SerializedName  name  =  f.getName();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
243	[BUG]  [BUGGY]  String  name  =  f.getName();  Character  name  =  f.getName();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  Character  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    Character  name  =  f.getName();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
244	[BUG]  [BUGGY]  String  name  =  f.getName();  Field  name  =  f.getName();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  Field  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    Field  name  =  f.getName();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
245	[BUG]  [BUGGY]  String  name  =  f.getName();  String  names  =  f.getName();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  names  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  names  =  f.getName();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
246	[BUG]  [BUGGY]  String  name  =  f.getName();  Name  name  =  f.getName();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  Name  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    Name  name  =  f.getName();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
247	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName());	  	non-compiled	[CE]  ';'  expected	15	None	add
248	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(annotation.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(annotation.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(annotation.getSerializedName());	  String    name    =    f.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
249	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  annotation.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  annotation.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  annotation.getSerializedName());	  String    name    =    f.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	31	None	replace
250	[BUG]  [BUGGY]  String  name  =  serialize.translateName(annotation.getSerializedName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(annotation.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(annotation.getSerializedName());	  String    name    =    f.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
251	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getSerializedName());	  String    name    =    f.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
252	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.getSerializedName());	  String    name    =    f.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
253	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  name  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  name	12	None	replace
254	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	12	None	replace
255	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  serializedName);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,String)	12	None	replace
256	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  serialize);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	12	None	replace
257	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  null);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	12	None	replace
258	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	14	None	replace
259	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  name  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  name);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  name	14	None	replace
260	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serialize);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	14	None	replace
261	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
262	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	14	None	replace
263	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class),  serializedName);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	14	None	replace
264	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f,  null);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f,  null);	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
265	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  null).toString();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  null).toString();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  null).toString();	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
266	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  annotation,  null);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  annotation,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  annotation,  null);	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	43	None	replace
267	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  null);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  null);	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
268	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  null).serializedName;  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  null).serializedName;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  null).serializedName;	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
269	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  null,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  null,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  null,  serializedName);	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	43	None	replace
270	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
271	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	120	None	replace
272	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.type,  f.class);  [CE]  type  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.type,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.type,  f.class);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	120	None	replace
273	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.type,  f.fieldNamingPolicy);  [CE]  type  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.type,  f.fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.type,  f.fieldNamingPolicy);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	120	None	replace
274	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.type);  [CE]  type  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	120	None	replace
275	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name,  fieldNamingPolicy);  [CE]  cannot  find  symbol  name  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name,  fieldNamingPolicy);	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
276	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name,  annotation);  [CE]  cannot  find  symbol  name  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name,  annotation);	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
277	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  annotation);  [CE]  name  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  annotation);	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  name  has  private  access  in  Field	72	None	replace
278	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.name,  f);  [CE]  cannot  find  symbol  name  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.name,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
279	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name,  context);  [CE]  cannot  find  symbol  name  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name,  context);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name,  context);	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
280	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  annotation.value());  [CE]  cannot  find  symbol  name  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  annotation.value());	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
281	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getValue());  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  serializedName	56	None	replace
282	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
283	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getValue(),  serializedName);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getValue(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getValue(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
284	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  annotation);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
285	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f,  fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
286	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	62	None	replace
287	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	62	None	replace
288	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getClass());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getClass());	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
289	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getClass(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	134	None	replace
290	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getClass());	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	134	None	replace
291	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getClass());	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	134	None	replace
292	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getClass());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getClass());	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	134	None	replace
293	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getClass());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.getClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.getClass());	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
294	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getClass(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	134	None	replace
295	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
296	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
297	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getValue(),  serializedName);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getValue(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getValue(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
298	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.name());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.name());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
299	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.value());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  f.value());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
300	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.value());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.value());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
301	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.value());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.value());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
302	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.value());  [CE]  name  has  private  access  in  Field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  f.value());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  name  has  private  access  in  Field	85	None	replace
303	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName.value());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  serializedName.value());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
304	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
305	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	148	None	replace
306	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  deserialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  deserialize);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  deserialize	39	None	replace
307	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  SerializedName.class);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
308	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  delegate.serializedName);  [CE]  cannot  find  symbol  delegate  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  delegate.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  delegate.serializedName);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  delegate	39	None	replace
309	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  descriptor);  [CE]  cannot  find  symbol  descriptor  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  descriptor);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  descriptor);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  descriptor	39	None	replace
310	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  value);  [CE]  cannot  find  symbol  value  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  value);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  value	39	None	replace
311	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getSimpleName());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	3	None	replace
312	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  serializedName.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
313	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value);	  String    name    =    f.translateName(annotation.name);    	non-compiled	[CE]  cannot  find  symbol  value	67	None	replace
314	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name,  serializedName);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name,  serializedName);	  String    name    =    f.translateName(annotation.name);    	non-compiled	[CE]  cannot  find  symbol  name	67	None	replace
315	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.name);	  String    name    =    f.translateName(annotation.name);    	non-compiled	[CE]  name  has  private  access  in  Field	67	None	replace
316	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getValue());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
317	[BUG]  [BUGGY]  String  name  =  f.translateName(field.getValue());  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(field.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(field.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  field	102	None	replace
318	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  serializedName);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getValue(),  serializedName);	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
319	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  annotation.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  annotation.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  annotation.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
320	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getValue());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
321	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  serialize	6	None	replace
322	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  field.getSimpleName());  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  field.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  field.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  field	4	None	replace
323	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
324	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
325	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  annotation);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  annotation);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
326	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  f.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(),  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
327	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  field.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  field.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(),  field.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
328	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  f.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
329	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  this.fieldNamingPolicy.class);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  this.fieldNamingPolicy.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(),  this.fieldNamingPolicy.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
330	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  fieldNamingPolicy.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  fieldNamingPolicy.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(),  fieldNamingPolicy.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
331	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  this.class);  [CE]  <identifier>  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(),  this.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(),  this.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
332	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.class,  serializedName);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.class,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
333	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation.getDeclaringClass());	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
334	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  serializedName);	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	99	None	replace
335	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field.getDeclaringClass());  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(field.getDeclaringClass());	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  field	99	None	replace
336	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  annotation);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  annotation);	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	99	None	replace
337	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.getSimpleName());	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
338	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getSimpleName());	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
339	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(annotation.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(annotation.getSimpleName());	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
340	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getSimpleName(),  serializedName);	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
341	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName(),  f.value());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName(),  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getSimpleName(),  f.value());	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
342	[BUG]  [BUGGY]  String  name  =  serialize.translateName(annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(annotation.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(annotation.getSimpleName());	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
343	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getAnnotation(SerializedName.class);	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	80	None	replace
344	[BUG]  [BUGGY]  String  name  =  annotation.value()?  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class):  null;  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.value()?  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class):  null;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.value()?  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class):  null;	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	80	None	replace
345	[BUG]  [BUGGY]  String  name  =  annotation.value()?  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class):  serializedName);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.value()?  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class):  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.value()?  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class):  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	80	None	replace
346	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	131	None	replace
347	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.serializedName.translateName(f.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.serializedName.translateName(f.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.serializedName.translateName(f.serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	131	None	replace
348	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.serializedName.trim();  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.serializedName.trim();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.serializedName.trim();	  String    name    =    f.translateName(fieldNamingPolicy.serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	131	None	replace
349	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize,  fieldNamingPolicy);  [CE]  cannot  find  symbol  serialize  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize,  fieldNamingPolicy);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serialize	38	None	replace
350	[BUG]  [BUGGY]  String  name  =  f.translateName(annotatedName,  fieldNamingPolicy);  [CE]  cannot  find  symbol  annotatedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotatedName,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotatedName,  fieldNamingPolicy);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  annotatedName	38	None	replace
351	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  null);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  null);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	38	None	replace
352	[BUG]  [BUGGY]  String  name  =  f.translateName(name,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name,  fieldNamingPolicy);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
353	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getSerializedName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
354	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getSerializedName());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields.getSerializedName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fields	87	None	replace
355	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy,  f.getSerializedName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
356	[BUG]  [BUGGY]  String  name  =  fields.translateName(serializedName.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(serializedName.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(serializedName.getSerializedName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	87	None	replace
357	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSerializedName(),  f);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSerializedName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getSerializedName(),  f);	  String    name    =    fields.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
358	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy,  serializedName);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	37	None	replace
359	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy,  null);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy,  null);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
360	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  annotation,  fieldNamingPolicy);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  annotation,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  annotation,  fieldNamingPolicy);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	37	None	replace
361	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy,  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy,  deserializedName);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	37	None	replace
362	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serializationName);  [CE]  cannot  find  symbol  serializationName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  serializationName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serializationName);	  String    name    =    f.translateName(annotation,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  serializationName	40	None	replace
363	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f,  serializedName);	  String    name    =    f.translateName(annotation,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	40	None	replace
364	[BUG]  [BUGGY]  String  name  =  annotation.translateName(this.f);  [CE]  cannot  find  symbol  f  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(this.f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(this.f);	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  f	21	None	replace
365	[BUG]  [BUGGY]  String  name  =  this.f.translateName(annotation.value());  [CE]  cannot  find  symbol  f  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.f.translateName(annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.f.translateName(annotation.value());	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  f	21	None	replace
366	[BUG]  [BUGGY]  String  name  =  this.field.translateName(annotation);  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.field.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.field.translateName(annotation);	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  field	21	None	replace
367	[BUG]  [BUGGY]  String  name  =  annotations.translateName(annotation);  [CE]  cannot  find  symbol  annotations  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotations.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotations.translateName(annotation);	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  annotations	21	None	replace
368	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
369	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.name());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.name());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
370	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getName());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	8	None	replace
371	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class);	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	44	None	replace
372	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  false);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  false);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  false);	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
373	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  null);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class),  null);	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
374	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	142	None	replace
375	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
376	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	142	None	replace
377	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	142	None	replace
378	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  f.getDeclaringClass());  [CE]  cannot  find  symbol  serialize  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	142	None	replace
379	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getName());	  String    name    =    f.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
380	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getName(),  serializedName);	  String    name    =    f.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
381	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.getName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.getName());	  String    name    =    f.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
382	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name());	  String    name    =    f.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
383	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getName()  +  1);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getName()  +  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getName()  +  1);	  String    name    =    f.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
384	[BUG]  [BUGGY]  String  name  =  f.translateName(fields.getSimpleName());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fields	109	None	replace
385	[BUG]  [BUGGY]  String  name  =  f.translateName(fields,  f.getSimpleName());  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields,  f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fields	109	None	replace
386	[BUG]  [BUGGY]  String  name  =  this.fields.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fields.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fields.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
387	[BUG]  [BUGGY]  String  name  =  fieldNames.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNames.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNames.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
388	[BUG]  [BUGGY]  String  name  =  field.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  field.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  field.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
389	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
390	[BUG]  [BUGGY]  String  name  =  _fields.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _fields.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _fields.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
391	[BUG]  [BUGGY]  String  name  =  f.translateName(field.getDeclaringClass());  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(field.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(field.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  field	98	None	replace
392	[BUG]  [BUGGY]  String  name  =  f.translateName(annotations.getDeclaringClass());  [CE]  cannot  find  symbol  annotations  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotations.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotations.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  annotations	98	None	replace
393	[BUG]  [BUGGY]  String  name  =  _fields.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  _fields  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _fields.translateName(f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _fields.translateName(f.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  _fields	98	None	replace
394	[BUG]  [BUGGY]  String  name  =  f.translateName(excluder.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(excluder.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(excluder.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
395	[BUG]  [BUGGY]  String  name  =  constructor.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  constructor  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(f.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  constructor	98	None	replace
396	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.type);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName.type);	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	117	None	replace
397	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  serializedName);  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.type,  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	117	None	replace
398	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize,  f.type);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serialize,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol  serialize	117	None	replace
399	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  serialize);  [CE]  type  has  private  access  in  Field  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.type,  serialize);	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	117	None	replace
400	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName.getAnnotation(SerializedName.class));	  String    name    =    serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	77	None	replace
401	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class));	  String    name    =    serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	77	None	replace
402	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  serializedName);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	127	None	replace
403	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f,  serializedName.translateName(annotation);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f,  serializedName.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f,  serializedName.translateName(annotation);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  ';'  expected	127	None	replace
404	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.name().translateName(annotation);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.name().translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.name().translateName(annotation);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
405	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  f.value();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
406	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(f):  f.value();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(f):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(f):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
407	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  f.name();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  f.name();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  f.name();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
408	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.value();  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol  serializedName	113	None	replace
409	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  serializedName.value();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  serializedName.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  serializedName.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
410	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(name):  f.value();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(name):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(name):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
411	[BUG]  [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy);  [CE]  name  has  private  access  in  Field  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.name.translateName(f);    	non-compiled	[CE]  name  has  private  access  in  Field	70	None	replace
412	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(serializedName);	  String    name    =    fieldNamingPolicy.name.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	70	None	replace
413	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(annotation);  [CE]  cannot  find  symbol  name  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(annotation);	  String    name    =    fieldNamingPolicy.name.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  name	70	None	replace
414	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  serializedName);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
415	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	13	None	replace
416	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  serialize);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	13	None	replace
417	[BUG]  [BUGGY]  Field  name  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  serializedName.getAnnotation(SerializedName.class);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
418	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
419	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class),  serializedName);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	13	None	replace
420	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(annotation.value()).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(annotation.value()).getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(annotation.value()).getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	105	None	replace
421	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.value()).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.value()).getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.value()).getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
422	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value()),  serializedName.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value()),  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value()),  serializedName.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	105	None	replace
423	[BUG]  [BUGGY]  String  name  =  serialize.translateName(annotation.value()).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(annotation.value()).getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(annotation.value()).getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	105	None	replace
424	[BUG]  [BUGGY]  String  name  =  serialize.translateName(f.value()).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(f.value()).getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(f.value()).getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
425	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  ')'  expected	129	None	replace
426	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName)+  1);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	129	None	replace
427	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class,  serializedName);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  ')'  expected	129	None	replace
428	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  ')'  expected	129	None	replace
429	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName),  annotation);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName),  annotation);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	129	None	replace
430	[BUG]  [BUGGY]  String  name  =  f.translateName(fields.getValue());  [CE]  cannot  find  symbol  fields  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
431	[BUG]  [BUGGY]  String  name  =  f.translateName(fields,  f.getValue());  [CE]  cannot  find  symbol  fields  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields,  f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
432	[BUG]  [BUGGY]  String  name  =  fieldNames.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNames.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNames.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
433	[BUG]  [BUGGY]  String  name  =  this.fields.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fields.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fields.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
434	[BUG]  [BUGGY]  String  name  =  _fields.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _fields.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _fields.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
435	[BUG]  [BUGGY]  String  name  =  field.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  field.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  field.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
436	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
437	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	121	None	replace
438	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  f);  [CE]  name  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  name  has  private  access  in  Field	96	None	replace
439	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name,  f);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
440	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(annotation.name,  f);  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(annotation.name,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(annotation.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
441	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  serializedName);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.name,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.name,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
442	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f);  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  name  has  private  access  in  Field	96	None	replace
443	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	104	None	replace
444	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	104	None	replace
445	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	104	None	replace
446	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name(),  FieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	104	None	replace
447	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	104	None	replace
448	[BUG]  [BUGGY]  String  name  =  f.translateName(annotated.getSerializedName());  [CE]  cannot  find  symbol  annotated  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotated.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotated.getSerializedName());	  String    name    =    f.translateName(serializedName.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  annotated	32	None	replace
449	[BUG]  [BUGGY]  String  name  =  f.translateName(annotations.getSerializedName());  [CE]  cannot  find  symbol  annotations  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotations.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotations.getSerializedName());	  String    name    =    f.translateName(serializedName.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  annotations	32	None	replace
450	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.value(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol  serializedName	138	None	replace
451	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.value());  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.value());	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol  serializedName	138	None	replace
452	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.value(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
453	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.name());	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
454	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.value(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol  serialize	138	None	replace
455	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  serializedName);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue(),  serializedName);	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
456	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.getValue());	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
457	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getValue());	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
458	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  f);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue(),  f);	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
459	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  serialize);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue(),  serialize);	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
460	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  false);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  false);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue(),  false);	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
461	[BUG]  [BUGGY]  String  name  =  f.translateName(field);  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(field);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(field);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  field	115	None	replace
462	[BUG]  [BUGGY]  String  name  =  f.translateName(fields);  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fields);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fields);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  fields	115	None	replace
463	[BUG]  [BUGGY]  String  name  =  f.translateName(array);  [CE]  cannot  find  symbol  array  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(array);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(array);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  array	115	None	replace
464	[BUG]  [BUGGY]  String  name  =  f.translateName(annotations);  [CE]  cannot  find  symbol  annotations  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotations);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotations);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  annotations	115	None	replace
465	[BUG]  [BUGGY]  String  name  =  constructor.translateName(f);  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(f);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
466	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializedName):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	123	None	replace
467	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializedName):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializedName):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(serializedName):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	123	None	replace
468	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serialize):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serialize):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serialize):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	123	None	replace
469	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(SerializedName.class):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(SerializedName.class):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(SerializedName.class):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
470	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(name):  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(name):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(name):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
471	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  annotation.translateName(f);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  annotation.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  annotation.translateName(f);	  String    name    =(annotation!=    null)?    null    :    annotation.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
472	[BUG]  [BUGGY]  String  name  =(annotation  >=  null)?  null  :  f.translateName(annotation);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  >=  null)?  null  :  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  >=  null)?  null  :  f.translateName(annotation);	  String    name    =(annotation!=    null)?    null    :    annotation.translateName(f);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	19	None	replace
473	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields.getAnnotation(SerializedName.class));	  String    name    =    fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  fields	153	None	replace
474	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields,  f.getAnnotation(SerializedName.class));	  String    name    =    fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  fields	153	None	replace
475	[BUG]  [BUGGY]  String  name  =  f.translateName(annotatedName,  annotation);  [CE]  cannot  find  symbol  annotatedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotatedName,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotatedName,  annotation);	  String    name    =    f.translateName(serializedName,    annotation);    	non-compiled	[CE]  cannot  find  symbol  annotatedName	41	None	replace
476	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize,  annotation);  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize,  annotation);	  String    name    =    f.translateName(serializedName,    annotation);    	non-compiled	[CE]  cannot  find  symbol  serialize	41	None	replace
477	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.constructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.constructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.constructor();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
478	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(annotation);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getConstructor(annotation);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
479	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.constructorConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.constructorConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.constructorConstructor();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
480	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f,  f.getConstructor();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f,  f.getConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f,  f.getConstructor();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  ';'  expected	135	None	replace
481	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  null);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName,  null);	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	118	None	replace
482	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  null,  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	118	None	replace
483	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize,  null);  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serialize,  null);	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serialize	118	None	replace
484	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  null,  serialize);	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serialize	118	None	replace
485	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  f.value());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  null,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
486	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(name):  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(name):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(name):  f.translateName(annotation);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
487	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializers):  f.translateName(annotation);  [CE]  cannot  find  symbol  serializers  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializers):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(serializers):  f.translateName(annotation);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializers	125	None	replace
488	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.value());  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f.value());	  String    name    =    fieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol  serializedName	82	None	replace
489	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class.value());	  String    name    =    fieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
490	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.value());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f.value());	  String    name    =    fieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
491	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.localizeName(f.value()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.localizeName(f.value()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.localizeName(f.value()));	  String    name    =    fieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
492	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serializedName);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	108	None	replace
493	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  name  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  name);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  name	108	None	replace
494	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serialize);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	108	None	replace
495	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Class<SerializedName>)	108	None	replace
496	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
497	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  serializedName.getAnnotation(SerializedName.class);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	108	None	replace
498	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name());	  String    name    =    f.translateName(fieldNamingPolicy.name());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
499	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.name());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.name());	  String    name    =    f.translateName(fieldNamingPolicy.name());    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
500	[BUG]  [BUGGY]  String  name  =  f.name().translateName(fieldNamingPolicy.name());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(fieldNamingPolicy.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(fieldNamingPolicy.name());	  String    name    =    f.translateName(fieldNamingPolicy.name());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
501	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	76	None	replace
502	[BUG]  [BUGGY]  String  name  =  f.translateName(field.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(field.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(field.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  field	76	None	replace
503	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serialized);  [CE]  cannot  find  symbol  serialized  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  serialized);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serialized);	  String    name    =    f.translateName(annotation,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serialized	151	None	replace
504	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serialization);  [CE]  cannot  find  symbol  serialization  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  serialization);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serialization);	  String    name    =    f.translateName(annotation,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serialization	151	None	replace
505	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  serializer);  [CE]  cannot  find  symbol  serializer  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  serializer);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  serializer);	  String    name    =    f.translateName(annotation,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serializer	151	None	replace
506	[BUG]  [BUGGY]  String  name  =  f.translateName(field.getName());  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(field.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(field.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  field	91	None	replace
507	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getName());  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	91	None	replace
508	[BUG]  [BUGGY]  String  name  =  f.translateName(annotations.getName());  [CE]  cannot  find  symbol  annotations  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotations.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotations.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  annotations	91	None	replace
509	[BUG]  [BUGGY]  String  name  =  f.translateName(answer.getName());  [CE]  cannot  find  symbol  answer  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(answer.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(answer.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  answer	91	None	replace
510	[BUG]  [BUGGY]  String  name  =  f.translateName(data.getName());  [CE]  cannot  find  symbol  data  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(data.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(data.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  data	91	None	replace
511	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.getName());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	145	None	replace
512	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
513	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
514	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.constructorConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.constructorConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.constructorConstructor();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
515	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f,  fieldNamingPolicy.getConstructor();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f,  fieldNamingPolicy.getConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f,  fieldNamingPolicy.getConstructor();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  ';'  expected	17	None	replace
516	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.constructor();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.constructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.constructor();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
517	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  field  [FE]                                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  field.getConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  field.getConstructor();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  field	17	None	replace
518	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor(annotation);  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getConstructor(annotation);	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
519	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getDeclaringClass());	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
520	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getDeclaringClass());  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields.getDeclaringClass());	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fields	97	None	replace
521	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass(),  serializedName);	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
522	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getDeclaringClass(),  f);	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
523	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields,  f.getDeclaringClass());  [CE]  cannot  find  symbol  fields  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields,  f.getDeclaringClass());	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fields	97	None	replace
524	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	88	None	replace
525	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	88	None	replace
526	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  f);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	88	None	replace
527	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation,  f);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation,  f);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	88	None	replace
528	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  f);  [CE]  cannot  find  symbol  serialize  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  f);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  serialize	88	None	replace
529	[BUG]  [BUGGY]  Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  serializedName.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
530	[BUG]  [BUGGY]  Annotation  annotation  =  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  serialize.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  serialize.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
531	[BUG]  [BUGGY]  Annotation  annotation  =  serialized.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  serialized.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  serialized.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
532	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class,  serializedName);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
533	[BUG]  [BUGGY]  Annotation  annotation  =  serializedFactory.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  serializedFactory.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  serializedFactory.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
534	[BUG]  [BUGGY]  Annotation  annotation  =  f,  serializedName.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  f,  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  f,  serializedName.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	137	None	replace
535	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name);  [CE]  cannot  find  symbol  name  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.name);	  String    name    =    fieldNamingPolicy.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  name	65	None	replace
536	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotatedName);  [CE]  cannot  find  symbol  annotatedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotatedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotatedName);	  String    name    =    fieldNamingPolicy.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  annotatedName	65	None	replace
537	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.serializedName);	  String    name    =    fieldNamingPolicy.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	65	None	replace
538	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
539	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	92	None	replace
540	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	92	None	replace
541	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
542	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
543	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(f.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
544	[BUG]  [BUGGY]  String  name  =  f.translateName(annotatedName.value());  [CE]  cannot  find  symbol  annotatedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotatedName.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotatedName.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol  annotatedName	83	None	replace
545	[BUG]  [BUGGY]  String  name  =  serialize.translateName(f.value());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(f.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
546	[BUG]  [BUGGY]  String  name  =  f.translateName(annotations.value());  [CE]  cannot  find  symbol  annotations  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotations.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotations.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol  annotations	83	None	replace
547	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
548	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	93	None	replace
549	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName.class));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName.class));	  String    name    =    fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
550	[BUG]  [BUGGY]  String  name  =  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
551	[BUG]  [BUGGY]  String  name  =  this.serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.serializedName.getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	54	None	replace
552	[BUG]  [BUGGY]  String  name  =  getSerializedName().getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  getSerializedName().getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  getSerializedName().getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
553	[BUG]  [BUGGY]  String  name  =  deserializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  deserializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	54	None	replace
554	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
555	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(serializedName,  f.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(serializedName,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(serializedName,  f.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
556	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  annotation.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  annotation.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
557	[BUG]  [BUGGY]  String  name  =  f.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(f.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
558	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  serializedName);	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
559	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getSimpleName());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
560	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  f.value());	  String    name    =    f.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
561	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.value());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.value());	  String    name    =    f.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
562	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  ';'  expected	73	None	replace
563	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
564	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getSimpleName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
565	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getSimpleName());  [CE]  cannot  find  symbol  fields  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields.getSimpleName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fields	150	None	replace
566	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName(),  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName(),  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName(),  f.getSimpleName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
567	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy,  f.getSimpleName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
568	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields,  f.getSimpleName());  [CE]  cannot  find  symbol  fields  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields,  f.getSimpleName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fields	150	None	replace
569	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	27	None	replace
570	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName,  f.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	27	None	replace
571	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(name,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	27	None	replace
572	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(f):  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(f):  annotation.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serializedName.translateName(f):  annotation.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	112	None	replace
573	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(SerializedName.class):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(SerializedName.class):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(SerializedName.class):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
574	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serialize):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serialize):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(serialize):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	126	None	replace
575	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation);	  String    name    =    annotation.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	64	None	replace
576	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(annotation);	  String    name    =    annotation.translateName(fieldNamingPolicy);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	64	None	replace
577	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation).translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation).translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation).translateName(fieldNamingPolicy);	  String    name    =    annotation.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
578	[BUG]  [BUGGY]  String  name  =  fields.translateName(annotation);  [CE]  cannot  find  symbol  fields  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(annotation);	  String    name    =    annotation.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  fields	64	None	replace
579	[BUG]  [BUGGY]  String  name  =  this.fieldNames.translateName(f);  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNames.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNames.translateName(f);	  String    name    =    annotations.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	23	None	replace
580	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getName());  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fields.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fields.getName());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol  fields	147	None	replace
581	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getName());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
582	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getName());  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy,  f.getName());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol  fields	147	None	replace
583	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getName(),  f);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getName(),  f);	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
584	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldSerializedName.getName());  [CE]  cannot  find  symbol  fieldSerializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldSerializedName.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldSerializedName.getName());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol  fieldSerializedName	147	None	replace
585	[BUG]  [BUGGY]  String  name  =  f.getSerializedName();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getSerializedName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getSerializedName();	  String    name    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
586	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getClass().getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	add	String  name  =  f.getName()  + ", "  +  f.getClass().getName();	  String    name    =    f.getName();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  	16	8	replace
587	[BUG]  [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getClass().getName();  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getClass().getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName()  + ", "  +  f.getClass().getName();	  String    name    =    f.getName();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  	16	8	replace
588	[BUG]  [BUGGY]  String  name  =  f.getSimpleName();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getSimpleName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getSimpleName();	  String    name    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
589	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  annotation.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	add	String  name  =  f.getName()  + ", "  +  annotation.value();	  String    name    =    f.getName();    	compilable	  [FE]  NullPointerException  	16	9	replace
590	[BUG]  [BUGGY]  String  name  =  f.getName()  + ", "  +  annotation.value();  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  annotation.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName()  + ", "  +  annotation.value();	  String    name    =    f.getName();    	compilable	  [FE]  NullPointerException  	16	9	replace
591	[BUG]  [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getValue();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getValue();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName()  + ", "  +  f.getValue();	  String    name    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
592	[BUG]  [BUGGY]  String  name  =  f.getName()  + ": "  +  f.getValue();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ": "  +  f.getValue();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName()  + ": "  +  f.getValue();	  String    name    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
593	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  deserialized);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  deserialized);	  String    name    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  deserialized	52	None	replace
594	[BUG]  [BUGGY]  String  name  =  f.translateName(field.value());  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(field.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(field.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol  field	95	None	replace
595	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
596	[BUG]  [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FieldNamingPolicy.class.getName());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
597	[BUG]  [BUGGY]  String  name  =  f.translateName(FactoryNamingPolicy.class.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FactoryNamingPolicy.class.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FactoryNamingPolicy.class.getName());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
598	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  field.getSerializedName());  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  field.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  field.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
599	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serializedName.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	34	None	replace
600	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serialize.getSerializedName());  [CE]  cannot  find  symbol  serialize  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  serialize.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  serialize.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialize	34	None	replace
601	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(serializedName);	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	114	None	replace
602	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation,  f);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation,  f);	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	114	None	replace
603	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  annotation);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  annotation);	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	114	None	replace
604	[BUG]  [BUGGY]  String  name  =  fieldNames.translateName(f);  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNames.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNames.translateName(f);	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	114	None	replace
605	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  serializedName);	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	114	None	replace
606	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	63	None	replace
607	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.name);	  String    name    =    fieldNamingPolicy.translateName(annotation,    serializedName);    	non-compiled	[CE]  name  has  private  access  in  Field	63	None	replace
608	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  deserialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  deserialize);	  String    name    =    fieldNamingPolicy.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  deserialize	63	None	replace
609	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  delegate.serializedName);  [CE]  cannot  find  symbol  delegate  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  delegate.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  delegate.serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  delegate	63	None	replace
610	[BUG]  [BUGGY]  String  name  =  f.translateName(serializers);  [CE]  cannot  find  symbol  serializers  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializers);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializers);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializers	22	None	replace
611	[BUG]  [BUGGY]  String  name  =  f.translateName(serializer);  [CE]  cannot  find  symbol  serializer  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializer);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializer);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializer	22	None	replace
612	[BUG]  [BUGGY]  String  name  =  f.translateName(serializableName);  [CE]  cannot  find  symbol  serializableName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializableName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializableName);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializableName	22	None	replace
613	[BUG]  [BUGGY]  String  name  =  this.serializedName.translateName(f);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.serializedName.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.serializedName.translateName(f);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	22	None	replace
614	[BUG]  [BUGGY]  String  name  =  f.translateName(selectorizedName);  [CE]  cannot  find  symbol  selectorizedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(selectorizedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(selectorizedName);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  selectorizedName	22	None	replace
615	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	133	None	replace
616	[BUG]  [BUGGY]  String  name  =  methodNamingPolicy.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  methodNamingPolicy.translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  methodNamingPolicy.translateName(annotation,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	133	None	replace
617	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	133	None	replace
618	[BUG]  [BUGGY]  String  name  =  f.name().translateName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(serializedName);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	42	None	replace
619	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  serializedName);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	42	None	replace
620	[BUG]  [BUGGY]  String  name  =  f.name().translateName(serializedName,  annotation);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(serializedName,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(serializedName,  annotation);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	42	None	replace
621	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation.value());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation.value());	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
622	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  deserializedName);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	42	None	replace
623	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize,  fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize,  fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialize	33	None	replace
624	[BUG]  [BUGGY]  String  name  =  f.translateName(annotatedName,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  annotatedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotatedName,  fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotatedName,  fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  annotatedName	33	None	replace
625	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
626	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	26	None	replace
627	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
628	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	24	None	replace
629	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getDeclaringClass(),  serializedName);  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getDeclaringClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field.getDeclaringClass(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  field	24	None	replace
630	[BUG]  [BUGGY]  String  name  =  excluder.translateName(annotation,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  excluder.translateName(annotation,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  excluder.translateName(annotation,  fieldNamingPolicy);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
631	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  excluder);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
632	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  excluder);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol  serializedName	89	None	replace
633	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation,  excluder);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	89	None	replace
634	[BUG]  [BUGGY]  String  name  =  excluder.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  excluder.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  excluder.translateName(annotation);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
635	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation,  excluder);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serializedName,  annotation,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol  serializedName	89	None	replace
636	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	46	None	replace
637	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
638	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	152	None	replace
639	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serialize,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serialize,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serialize,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	152	None	replace
640	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  FieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  FieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  FieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	152	None	replace
641	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName,  f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	122	None	replace
642	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName.getSerializedName());  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serializedName.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	122	None	replace
643	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize.getSerializedName());  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serialize.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialize	122	None	replace
644	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  serialize);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  serialize);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
645	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  annotation);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  annotation);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
646	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  deserializedName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  deserializedName);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
647	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  serialize,  annotation);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  serialize,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  serialize,  annotation);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
648	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  null);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  null);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
649	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f.value());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  f.value());	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
650	[BUG]  [BUGGY]  String  name  =  serializedName.getAnnotation(SerializedName.class,  f.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.getAnnotation(SerializedName.class,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.getAnnotation(SerializedName.class,  f.class);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
651	[BUG]  [BUGGY]  String  name  =  serialize.getAnnotation(SerializedName.class,  f.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.getAnnotation(SerializedName.class,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.getAnnotation(SerializedName.class,  f.class);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
652	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serialize.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serialize.class);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
653	[BUG]  [BUGGY]  String  name  =  serializedName.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.getAnnotation(SerializedName.class,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName.class);    	non-compiled	[CE]  name  has  private  access  in  Field	53	None	replace
654	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName(),  f);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getSimpleName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getSimpleName(),  f);	  String    name    =    f.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
655	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  excluder);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  excluder);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	146	None	replace
656	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  null);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	146	None	replace
657	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  f.type);  [CE]  type  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  f.type);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  type  has  private  access  in  Field	146	None	replace
658	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  null,  f.getName());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  null,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  null,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	146	None	replace
659	[BUG]  [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class.value());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FieldNamingPolicy.class.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
660	[BUG]  [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.DEFAULT_NAMESPACE,  f.value());  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.DEFAULT_NAMESPACE,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FieldNamingPolicy.DEFAULT_NAMESPACE,  f.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	95	None	replace
661	[BUG]  [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.DEFAULT_NAME,  f.value());  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.DEFAULT_NAME,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FieldNamingPolicy.DEFAULT_NAME,  f.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	95	None	replace
662	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.name());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.name());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
663	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.class,  f.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(f.class,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.class,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
664	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSimpleName(),  f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSimpleName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getSimpleName(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
665	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  f);	  String    name    =    annotation.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
666	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getValue(),  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getValue(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getValue(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
667	[BUG]  [BUGGY]  String  name  =  f.translateName(name.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
668	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value(),  f.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value(),  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.value(),  f.class);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
669	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getName(),  f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getName(),  f);	  String    name    =    f.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
670	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  excluder);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serialize,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol  serialize	89	None	replace
671	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
672	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class,  null);	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	108	None	replace
673	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
674	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  field.getDeclaringClass());  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  field.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  field.getDeclaringClass());	  String    name    =    f.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  field	25	None	replace
675	[BUG]  [BUGGY]  FieldNamingStrategy  excluder  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  excluder  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  excluder  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  FieldNamingStrategy    excluder    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
676	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serialize.translateName(annotation):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serialize.translateName(annotation):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serialize.translateName(annotation):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	123	None	replace
677	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(annotation):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  serializedName.translateName(annotation):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  serializedName.translateName(annotation):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	123	None	replace
678	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  serialize.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  serialize.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
679	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  serialize.translateName(annotation):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  serialize.translateName(annotation):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  serialize.translateName(annotation):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serialize	123	None	replace
680	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  serializedName.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
681	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.class,  f.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(f.class,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.class,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
682	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getDeclaringClass(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	142	None	replace
683	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  null,  f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  null,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  null,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	142	None	replace
684	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  serializedName);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	38	None	replace
685	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.value);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.value);	  String    name    =    fieldNamingPolicy.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  value	63	None	replace
686	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getKey());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getKey());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getKey());	  String    name    =    f.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
687	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  f);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  f);	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
688	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  fieldNamingPolicy.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
689	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field,  f.getSimpleName());  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(field,  f.getSimpleName());	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  field	5	None	replace
690	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.translateName(annotation,  annotation);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  null  :  f.translateName(annotation,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  null  :  f.translateName(annotation,  annotation);	  String    name    =(annotation!=    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
691	[BUG]  [BUGGY]  String  name  =(f!=  null)?  null  :  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(f!=  null)?  null  :  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(f!=  null)?  null  :  f.translateName(annotation);	  String    name    =(annotation!=    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
692	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f.name);	  String    name    =    fieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  name  has  private  access  in  Field	6	None	replace
693	[BUG]  [BUGGY]  String  name  =  f.translateName(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(SerializedName.class);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
694	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize);  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serialize	22	None	replace
695	[BUG]  [BUGGY]  String  name  =  f.translateName(serialized);  [CE]  cannot  find  symbol  serialized  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialized);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialized);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serialized	22	None	replace
696	[BUG]  [BUGGY]  String  serializedName  =  f.translateName(serializedName);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.translateName(serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.translateName(serializedName);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
697	[BUG]  [BUGGY]  String  name  =  f.translateName(serialization);  [CE]  cannot  find  symbol  serialization  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialization);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialization);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  serialization	22	None	replace
698	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f);	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	99	None	replace
699	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f.type);  [CE]  type  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f.type);	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  type  has  private  access  in  Field	99	None	replace
700	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value(),  annotation.value());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value(),  annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.value(),  annotation.value());	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
701	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value(),  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.value(),  null);	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	138	None	replace
702	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  SerializedName.translateName(f):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  SerializedName.translateName(f):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  SerializedName.translateName(f):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
703	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(f):  serialize.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(f):  serialize.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
704	[BUG]  [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.translateName(f.name));  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.equals(fieldNamingPolicy.translateName(f.name));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.equals(fieldNamingPolicy.translateName(f.name));	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
705	[BUG]  [BUGGY]  String  name  =  f.name.toLowerCase(fieldNamingPolicy.translateName(f.name));  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.toLowerCase(fieldNamingPolicy.translateName(f.name));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.toLowerCase(fieldNamingPolicy.translateName(f.name));	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
706	[BUG]  [BUGGY]  String  name  =  f.name;  [CE]  name  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name;	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
707	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f,  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  f,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(name,  f,  annotation);	  String    name    =    fieldNamingPolicy.translateName(name,    annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	66	None	replace
708	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  annotation,  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(name,  annotation,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(name,  annotation,  f);	  String    name    =    fieldNamingPolicy.translateName(name,    annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	66	None	replace
709	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class,  serializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
710	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.value());  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol  serialize	83	None	replace
711	[BUG]  [BUGGY]  String  name  =  f.translateName(annotated.value());  [CE]  cannot  find  symbol  annotated  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotated.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotated.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol  annotated	83	None	replace
712	[BUG]  [BUGGY]  String  name  =  f.translateName(name.value());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
713	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name));  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  name  has  private  access  in  Field	128	None	replace
714	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
715	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name()));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
716	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.value()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.value()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f.value()));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
717	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  deserializedName);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	88	None	replace
718	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  serialize);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  cannot  find  symbol  serialize	88	None	replace
719	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  null);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	88	None	replace
720	[BUG]  [BUGGY]  String  name  =  f.translateName(name,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name,  fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name,  fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
721	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
722	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  excluder);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  excluder);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
723	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.value);	  String    name    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  value	52	None	replace
724	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name());	  String    name    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
725	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value()),  serialize.getAnnotation(SerializedName.class);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value()),  serialize.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value()),  serialize.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	105	None	replace
726	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.value);  [CE]  type  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.value);	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	117	None	replace
727	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.value());  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	117	None	replace
728	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f.type);  [CE]  type  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f.type);	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  type  has  private  access  in  Field	134	None	replace
729	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f.name);  [CE]  name  has  private  access  in  Field  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getClass(),  f.name);	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  name  has  private  access  in  Field	134	None	replace
730	[BUG]  [BUGGY]  String  name  =  fields.translateName(f,  f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(f,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
731	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.getValue());  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol  serializedName	58	None	replace
732	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Field)  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Field)	50	None	replace
733	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.nameNode);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.nameNode);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  nameNode	50	None	replace
734	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f.class);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(f.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  ')'  expected	78	None	replace
735	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
736	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f.class));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(f.class));	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
737	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  value);  [CE]  cannot  find  symbol  value  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  value);	  String    name    =    fieldNamingPolicy.translateName(serializedName,    annotation);    	non-compiled	[CE]  cannot  find  symbol  value	61	None	replace
738	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value());	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
739	[BUG]  [BUGGY]  SerializedName  serializedName  =  getSerializedName(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  getSerializedName(f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  getSerializedName(f.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	11	None	replace
740	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value);  [CE]  cannot  find  symbol  value  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  value	11	None	replace
741	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getDeclaringClass(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
742	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSerializedName(),  f);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getSerializedName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getSerializedName(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
743	[BUG]  [BUGGY]  String  name  =  f.getName(SerializedName.class);  [CE]  method  getName  in  class  Field  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName(SerializedName.class);	  String    name    =    f.getName();    	non-compiled	[CE]  method  getName  in  class  Field  cannot  be  applied  to  given  types;	16	None	replace
744	[BUG]  [BUGGY]  String  name  =  f.getName(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName(serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName(serializedName);	  String    name    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol  serializedName	16	None	replace
745	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	add	String  name  =  f.getName()  + ", "  +  f.getAnnotation(SerializedName.class);	  String    name    =    f.getName();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  	16	8	replace
746	[BUG]  [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getAnnotation(SerializedName.class);  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + ", "  +  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName()  + ", "  +  f.getAnnotation(SerializedName.class);	  String    name    =    f.getName();    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<{ "user[] ": "RegisteredUserAda...>  but  was:<{ "user[  	16	8	replace
747	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + "_ "  +  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	add	String  name  =  f.getName()  + "_ "  +  f.getName();	  String    name    =    f.getName();    	compilable	  [FE]  ComparisonFailure  	16	8	replace
748	[BUG]  [BUGGY]  String  name  =  f.getName()  + "_ "  +  f.getName();  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName()  + "_ "  +  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getName()  + "_ "  +  f.getName();	  String    name    =    f.getName();    	compilable	  [FE]  ComparisonFailure  	16	8	replace
749	[BUG]  [BUGGY]  String  name  =  getSerializedName(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  getSerializedName(f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  getSerializedName(f.getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	54	None	replace
750	[BUG]  [BUGGY]  String  name  =  e.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  e  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  e.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  e.getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  e	54	None	replace
751	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getDeclaringClass(),  f.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getDeclaringClass(),  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getDeclaringClass(),  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
752	[BUG]  [BUGGY]  String  name  =  serialize.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
753	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);	  String    name    =    fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
754	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  null);	  String    name    =    fieldNamingPolicy.translateName(annotation,    constructor);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	90	None	replace
755	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation,  serializedName);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
756	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  serialize.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  serialize.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  serialize.translateName(annotation);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
757	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation,  annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.translateName(annotation,  annotation);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
758	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  annotation.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  annotation.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  annotation.translateName(annotation);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
759	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  fieldNames);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  fieldNames);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	42	None	replace
760	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  annotations);  [CE]  cannot  find  symbol  annotations  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  annotations);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  annotations);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  annotations	42	None	replace
761	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
762	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
763	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSerializationName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSerializationName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fieldNamingPolicy.getSerializationName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
764	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class),  f);	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	73	None	replace
765	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  serializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  serializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  serializedName.class));	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
766	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  f.value()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  f.value()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class,  f.value()));	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
767	[BUG]  [BUGGY]  String  name  =(f!=  null)?  f.translateName(annotation):  f.value();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(f!=  null)?  f.translateName(annotation):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(f!=  null)?  f.translateName(annotation):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
768	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  f);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getName(),  f);	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	10	None	replace
769	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  f.type);  [CE]  type  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getName(),  f.type);	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  type  has  private  access  in  Field	10	None	replace
770	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  f.value());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getName(),  f.value());	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
771	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  annotation);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getName(),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getName(),  annotation);	  String    name    =    FieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	10	None	replace
772	[BUG]  [BUGGY]  String  name  =  f.serializeName(fieldNamingPolicy.name);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.serializeName(fieldNamingPolicy.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.serializeName(fieldNamingPolicy.name);	  String    name    =    fieldNamingPolicy.name.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  name	70	None	replace
773	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.name.translateName(f);  [CE]  cannot  find  symbol  name  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.name.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.name.translateName(f);	  String    name    =    fieldNamingPolicy.name.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  name	70	None	replace
774	[BUG]  [BUGGY]  String  name  =  serialization.translateName(annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialization.translateName(annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialization.translateName(annotation.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
775	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.serializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
776	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.serializeName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.serializeName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.serializeName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
777	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializeName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializeName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.serializeName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
778	[BUG]  [BUGGY]  String  name  =  f.translateName(annotations,  null);  [CE]  cannot  find  symbol  annotations  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotations,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotations,  null);	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  cannot  find  symbol  annotations	43	None	replace
779	[BUG]  [BUGGY]  String  name  =  null.translateName(annotation,  f);  [CE]  <null>  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  null.translateName(annotation,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  null.translateName(annotation,  f);	  String    name    =    f.translateName(annotation,    null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	43	None	replace
780	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getDeclaringClass());  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy,  f.getDeclaringClass());	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fields	97	None	replace
781	[BUG]  [BUGGY]  String  name  =  f.translateName(name.name);  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name.name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  cannot  find  symbol  name	69	None	replace
782	[BUG]  [BUGGY]  String  name  =  f.translateName(name);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name);	  String    name    =    f.translateName(serializedName.name);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
783	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  fieldNamingPolicy.getAnnotation(SerializedName.class);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
784	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class,  null);	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	14	None	replace
785	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.name,  f.type);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	132	None	replace
786	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.class,  serializedName);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
787	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  this.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  this.serializedName);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	39	None	replace
788	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  delegate);  [CE]  cannot  find  symbol  delegate  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  delegate);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  delegate);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  delegate	39	None	replace
789	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
790	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
791	[BUG]  [BUGGY]  Annotation  annotation  =  typeFactory.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  typeFactory.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  typeFactory.getAnnotation(SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
792	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class,  f);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
793	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  fieldNamingPolicy.getConstructor();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
794	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  scope  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  scope.getConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  scope.getConstructor();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  scope	17	None	replace
795	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.newInstance();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.newInstance();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.newInstance();	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
796	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getName(),  f);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.getName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.getName(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
797	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSimpleName(),  f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSimpleName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getSimpleName(),  f);	  String    name    =    fieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
798	[BUG]  [BUGGY]  String  name  =  F.translateName(fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  F.translateName(fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  F.translateName(fieldNamingPolicy.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
799	[BUG]  [BUGGY]  String  name  =  typeFactory.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  typeFactory.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  typeFactory.translateName(f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
800	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f);  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f);	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	114	None	replace
801	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.getSerializedName());  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.getSerializedName());	  String    name    =    f.translateName(serializedName.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialize	32	None	replace
802	[BUG]  [BUGGY]  String  name  =  this.serializedName.translateName(annotation);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.serializedName.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.serializedName.translateName(annotation);	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  serializedName	21	None	replace
803	[BUG]  [BUGGY]  String  name  =  this.f.translateName(annotation,  f.value());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.f.translateName(annotation,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.f.translateName(annotation,  f.value());	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
804	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
805	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  type  has  private  access  in  Field	51	None	replace
806	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  name  has  private  access  in  Field	51	None	replace
807	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
808	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class,  f.type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  serializedName.class,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
809	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	129	None	replace
810	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  serialize);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  ')'  expected	129	None	replace
811	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  ')'  expected	129	None	replace
812	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value);  [CE]  cannot  find  symbol  value  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.value);	  String    name    =    fieldNamingPolicy.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  value	65	None	replace
813	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serialize);  [CE]  cannot  find  symbol  serialize  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(serialize);	  String    name    =    fieldNamingPolicy.translateName(serializedName);    	non-compiled	[CE]  cannot  find  symbol  serialize	65	None	replace
814	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  annotation);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  annotation);	  String    name    =    f.translateName(serializedName,    annotation);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
815	[BUG]  [BUGGY]  String  name  =  constructor.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
816	[BUG]  [BUGGY]  String  name  =  data.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  data.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  data.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
817	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(fieldNamingPolicy.getName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(fieldNamingPolicy.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(fieldNamingPolicy.getName());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
818	[BUG]  [BUGGY]  String  name  =  F.translateName(fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  F.translateName(fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  F.translateName(fieldNamingPolicy.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
819	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serialize(f.getValue()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serialize(f.getValue()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.serialize(f.getValue()));	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
820	[BUG]  [BUGGY]  String  name  =  typeFactory.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  typeFactory.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  typeFactory.translateName(f.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
821	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	28	None	replace
822	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.type);  [CE]  name  has  private  access  in  Field  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
823	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name  +  1);  [CE]  name  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name  +  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name  +  1);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
824	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.value());  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.value());	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
825	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  serialize);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name,  serialize);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
826	[BUG]  [BUGGY]  String  name  =  fields.translateName(annotation,  fieldNamingPolicy);  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(annotation,  fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(annotation,  fieldNamingPolicy);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  fields	37	None	replace
827	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  FieldNamingStrategy.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  FieldNamingStrategy.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  FieldNamingStrategy.class);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
828	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  FieldNamingPolicy.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  FieldNamingPolicy.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  FieldNamingPolicy.class);	  String    name    =    f.translateName(annotation,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
829	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
830	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class),  serialize);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	152	None	replace
831	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  f.value);  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f.name,  f.value);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f.name,  f.value);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	68	None	replace
832	[BUG]  [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(fieldNamingPolicy.class);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
833	[BUG]  [BUGGY]  String  name  =  f.name.translate(fieldNamingPolicy.name);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translate(fieldNamingPolicy.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translate(fieldNamingPolicy.name);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
834	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  serializedName.translateName(annotation):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  serializedName.translateName(annotation):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  serializedName.translateName(annotation):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	126	None	replace
835	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  serialize.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  serialize.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  serialize.getAnnotation(SerializedName.class);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
836	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  this.fieldNamingStrategy);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  this.fieldNamingStrategy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  this.fieldNamingStrategy);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
837	[BUG]  [BUGGY]  String  name  =  constructorConstructor.translateName(f);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructorConstructor.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructorConstructor.translateName(f);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
838	[BUG]  [BUGGY]  String  name  =  constructor.translateName(f.getName());  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(f.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  constructor	91	None	replace
839	[BUG]  [BUGGY]  String  name  =  f.translateName(name.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(name.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(name.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
840	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.getName());  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  serialize	91	None	replace
841	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.getSimpleName());  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
842	[BUG]  [BUGGY]  String  name  =  fields.translateName(f,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(f,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f,  f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
843	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(annotation,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
844	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fields.getSimpleName());  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fields.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fields.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fields	149	None	replace
845	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
846	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
847	[BUG]  [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  String  name  =  f.getName();  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  String  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  String  name  =  f.getName();	  	non-compiled	[CE]  incompatible  types	15	None	add
848	[BUG]  [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class);	  	non-compiled	[CE]  incompatible  types	15	None	add
849	[BUG]  [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedFactory.class);  String  name  =  f.getName();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedFactory.class);  String  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    ObjectConstructor  constructor  =  f.getAnnotation(SerializedFactory.class);  String  name  =  f.getName();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
850	[BUG]  [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedDefinition.class);  String  name  =  f.getName();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedDefinition.class);  String  name  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    ObjectConstructor  constructor  =  f.getAnnotation(SerializedDefinition.class);  String  name  =  f.getName();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
851	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serialize  =  f.getSerialize();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serialize  =  f.getSerialize();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  this.serialize  =  f.getSerialize();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
852	[BUG]  [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedFactory.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  ObjectConstructor  constructor  =  f.getAnnotation(SerializedFactory.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    ObjectConstructor  constructor  =  f.getAnnotation(SerializedFactory.class);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
853	[BUG]  [BUGGY]  String  name  =  constructor.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  constructor.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  constructor.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
854	[BUG]  [BUGGY]  String  name  =  data.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  data.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  data.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
855	[BUG]  [BUGGY]  String  name  =  F.translateName(fields.getValue());  [CE]  cannot  find  symbol  fields  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  F.translateName(fields.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  F.translateName(fields.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
856	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);	  String    name    =    fieldNamingPolicy.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
857	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fields.getValue());  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fields.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fields.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol  fields	141	None	replace
858	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getDeclaringClass());  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serializedName	98	None	replace
859	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.getDeclaringClass());  [CE]  cannot  find  symbol  serialize  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	98	None	replace
860	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  null);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	136	None	replace
861	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  fieldNamingPolicy.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  fieldNamingPolicy.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getName(),  fieldNamingPolicy.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
862	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f,  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f,  null);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	81	None	replace
863	[BUG]  [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getName(),  f.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.fieldNamingPolicy.translateName(f.getName(),  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.fieldNamingPolicy.translateName(f.getName(),  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
864	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldnamingPolicy.getName(),  f.class);  [CE]  cannot  find  symbol  fieldnamingPolicy  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldnamingPolicy.getName(),  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldnamingPolicy.getName(),  f.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  cannot  find  symbol  fieldnamingPolicy	81	None	replace
865	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value(),  f.type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.value(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.value(),  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
866	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.name);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class,  f.name);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
867	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
868	[BUG]  [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);	  String    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  type  has  private  access  in  Field	12	None	replace
869	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotations):  f.translateName(annotation);  [CE]  cannot  find  symbol  annotations  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotations):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotations):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  annotations	111	None	replace
870	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	75	None	replace
871	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  constructor);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  constructor);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  constructor	75	None	replace
872	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serializedName	75	None	replace
873	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation,  null);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  annotation,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  annotation,  null);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	62	None	replace
874	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.value());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.value());	  String    name    =    fieldNamingPolicy.translateName(annotation,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
875	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f,  f);  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.name.translateName(f,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.name.translateName(f,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  cannot  find  symbol  name	96	None	replace
876	[BUG]  [BUGGY]  String  name  =  fields.translateName(f.name());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(f.name());	  String    name    =    f.translateName(fieldNamingPolicy.name());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
877	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  f);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
878	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class)+  1,  serializedName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class)+  1,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class)+  1,  serializedName);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
879	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f.type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  f.type);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
880	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class)+  1;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class)+  1;	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	55	None	replace
881	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(AnnotationFactory.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(AnnotationFactory.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getConstructor(AnnotationFactory.class);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
882	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getConstructor(serializedName);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  serializedName	135	None	replace
883	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  scope  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  scope.getConstructor();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  scope.getConstructor();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  scope	135	None	replace
884	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialize  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  serialize.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  serialize.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	92	None	replace
885	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSerializedName(),  f);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSerializedName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getSerializedName(),  f);	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
886	[BUG]  [BUGGY]  String  name  =  F.translateName(fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  F.translateName(fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  F.translateName(fieldNamingPolicy.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
887	[BUG]  [BUGGY]  String  name  =  typeFactory.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  typeFactory.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  typeFactory.translateName(f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
888	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  f.type);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  type  has  private  access  in  Field	13	None	replace
889	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  f.name);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  name  has  private  access  in  Field	13	None	replace
890	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class,  null);	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	13	None	replace
891	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getSerializedName());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingStrategy.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	35	None	replace
892	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializeName);  [CE]  cannot  find  symbol  serializeName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.serializeName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.serializeName);	  String    name    =    f.translateName(fieldNamingPolicy.serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializeName	131	None	replace
893	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation,  serializedName);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation,  serializedName);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
894	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  serialize.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  serialize.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  serialize.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
895	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  annotation.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  annotation.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  annotation.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
896	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation,  annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  f.translateName(annotation,  annotation);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
897	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  fieldNamingPolicy.getValue());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
898	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  excluder);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getValue(),  excluder);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
899	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.class,  fieldNamingPolicy.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.class,  fieldNamingPolicy.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.class,  fieldNamingPolicy.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
900	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serialize);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serialize);	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	44	None	replace
901	[BUG]  [BUGGY]  String  name  =  F.translateName(fields.getSerializedName());  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  F.translateName(fields.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  F.translateName(fields.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
902	[BUG]  [BUGGY]  String  name  =  data.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  data.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  data.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
903	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.type);  [CE]  type  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.type);	  String    name    =    fieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  type  has  private  access  in  Field	24	None	replace
904	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.name);  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f.name);	  String    name    =    fieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  name  has  private  access  in  Field	24	None	replace
905	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getDeclaringClass(),  f);	  String    name    =    fieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	24	None	replace
906	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  serialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  serialize);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialize	27	None	replace
907	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getDeclaringClass(),  annotation);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	27	None	replace
908	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  null,  f.getDeclaringClass());  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  null,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  null,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	27	None	replace
909	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName(),  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getSimpleName(),  f);	  String    name    =    fields.translateName(fieldNamingPolicy.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
910	[BUG]  [BUGGY]  String  name  =  this.annotation.translateName(f);  [CE]  cannot  find  symbol  annotation  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.annotation.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.annotation.translateName(f);	  String    name    =    annotations.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  annotation	23	None	replace
911	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  annotation);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
912	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  annotations);  [CE]  cannot  find  symbol  annotations  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  annotations);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  annotations);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  annotations	127	None	replace
913	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  locale);  [CE]  cannot  find  symbol  locale  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  locale);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  locale);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  locale	127	None	replace
914	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.value(),  FieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	104	None	replace
915	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f);	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
916	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  fieldNamingPolicy.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
917	[BUG]  [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FieldNamingPolicy.class.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
918	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f.type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f.type);	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
919	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  null,  f.type);	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  type  has  private  access  in  Field	118	None	replace
920	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  null,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  null,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  name  has  private  access  in  Field	118	None	replace
921	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize,  f.getSerializedName());  [CE]  cannot  find  symbol  serialize  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize,  f.getSerializedName());	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialize	33	None	replace
922	[BUG]  [BUGGY]  String  name  =  f.translateName(serialization,  fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  serialization  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialization,  fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialization,  fieldNamingPolicy.getSerializedName());	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  serialization	33	None	replace
923	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  annotation);	  String    name    =    fieldNamingPolicy.translateName(serializedName,    annotation);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	61	None	replace
924	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.fieldNamingPolicy);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.fieldNamingPolicy);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	38	None	replace
925	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.type);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.type);	  String    name    =    f.translateName(serializedName,    fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	38	None	replace
926	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  null  :  f,  f.translateName(annotation);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  null  :  f,  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  null  :  f,  f.translateName(annotation);	  String    name    =(annotation!=    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  ';'  expected	18	None	replace
927	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  serializedName);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
928	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.class,  f.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.class,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.class,  f.class);	  String    name    =    f.translateName(fieldNamingPolicy.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
929	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.value());  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(annotation.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(annotation.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	95	None	replace
930	[BUG]  [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(FieldNamingPolicy.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(FieldNamingPolicy.class,  f.value());	  String    name    =    FieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
931	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.class,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.class,  f.value());	  String    name    =    f.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
932	[BUG]  [BUGGY]  String  name  =  serialize.translateName(f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  serialize	76	None	replace
933	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  deserializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(field.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  deserializedName	76	None	replace
934	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getFieldNames(Field)	106	None	replace
935	[BUG]  [BUGGY]  String  name  =  annotation.translateName(f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(f.getAnnotation(SerializedName.class));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
936	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.value());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy.value());	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
937	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation.value(),  f);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation.value(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation.value(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.value());    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	138	None	replace
938	[BUG]  [BUGGY]  String  name  =  f.getQualifiedName();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getQualifiedName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getQualifiedName();	  String    name    =    f.getName();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
939	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializers):  f.value();  [CE]  cannot  find  symbol  serializers  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializers):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializers):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol  serializers	113	None	replace
940	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.value();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(annotation):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(annotation):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
941	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.value();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.value();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(annotation):  f.value();	  String    name    =(annotation!=    null)?    f.translateName(f):    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
942	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  decodeSerializedName);  [CE]  cannot  find  symbol  decodeSerializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  decodeSerializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  decodeSerializedName);	  String    name    =    f.translateName(annotation,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  decodeSerializedName	39	None	replace
943	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  alternates);  [CE]  cannot  find  symbol  alternates  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  alternates);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  SerializedName.class,  alternates);	  String    name    =    f.getAnnotation(SerializedName.class,    SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  alternates	51	None	replace
944	[BUG]  [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class)+  1;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  factory  =  f.getAnnotation(SerializedName.class)+  1;	  FieldNamingStrategy    factory    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	108	None	replace
945	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getConstructor(SerializedName.class);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
946	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value())&  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value())&  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value())&  f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
947	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name()).getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name()).getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name()).getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value()).getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
948	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getSerializedName());	  String    name    =    fields.translateName(fieldNamingPolicy.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
949	[BUG]  [BUGGY]  String  name  =  serialize.translateName(fieldNamingPolicy.getDeclaringClass(),  f);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(fieldNamingPolicy.getDeclaringClass(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(fieldNamingPolicy.getDeclaringClass(),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getDeclaringClass(),    serializedName);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
950	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getSerializedName());  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field,  f.getSerializedName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
951	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f);  [CE]  cannot  find  symbol  deserializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f);	  String    name    =    serializedName.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	22	None	replace
952	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  null);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>)	11	None	replace
953	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.owner);  [CE]  cannot  find  symbol  owner  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.owner);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.owner);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  owner	11	None	replace
954	[BUG]  [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Field  name  =  f.getAnnotation(SerializedName.class)+  1;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Field  name  =  f.getAnnotation(SerializedName.class)+  1;	  Field    name    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
955	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
956	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name,  f.type);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.name,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f.type);    	non-compiled	[CE]  cannot  find  symbol  name	132	None	replace
957	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.type);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
958	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  annotation);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  annotation);	  String    name    =    fieldNamingPolicy.translateName(f.getName());    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	6	None	replace
959	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.name());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.name());	  String    name    =    f.translateName(fieldNamingPolicy.name());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
960	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(SerializedName.class):  f.translateName(annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(SerializedName.class):  f.translateName(annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(SerializedName.class):  f.translateName(annotation);	  String    name    =(annotation!=    null)?    f.translateName(serializedName):    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
961	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getDeclaringClass(),  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getDeclaringClass(),  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getDeclaringClass(),  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
962	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.value());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  f.value());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
963	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f,  annotation);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f,  annotation);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
964	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy,  f);	  String    name    =    fieldNamingPolicy.translateName(f,    annotation);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
965	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation.getValue(),  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation.getValue(),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation.getValue(),  f);	  String    name    =    fieldNamingPolicy.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
966	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation.getValue());    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
967	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	48	None	replace
968	[BUG]  [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+  1);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class)+    1);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
969	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.value(),  f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.value(),  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.value(),  f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
970	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.name(),  f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.name(),  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.name(),  f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
971	[BUG]  [BUGGY]  String  name  =  f.translateName(serialize.value(),  f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serialize.value(),  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serialize.value(),  f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
972	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue(),  fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	103	None	replace
973	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.value(),  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.value(),  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.value(),  f.getAnnotation(SerializedName.class,  serializedName);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  ')'  expected	129	None	replace
974	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getValue());  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field,  f.getValue());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol  field	58	None	replace
975	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	46	None	replace
976	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ')'  expected	47	None	replace
977	[BUG]  [BUGGY]  String  name  =  serialize.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serialize.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serialize.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),  f);	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
978	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  alternateName));  [CE]  cannot  find  symbol  alternateName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  alternateName));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  alternateName));	  String    name    =    f.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  alternateName	128	None	replace
979	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
980	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class,  f.name);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.getAnnotation(SerializedName.class,  f.name);	  String    name    =    f.translateName(serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	49	None	replace
981	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.name);  [CE]  name  has  private  access  in  Field  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.name,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	116	None	replace
982	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.serializedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.serializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.serializedName());	  String    name    =    f.translateName(fieldNamingPolicy.serializedName());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
983	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  deserializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    annotation.translateName(f,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  deserializedName	20	None	replace
984	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serialized  =  f.getSerialized();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serialized  =  f.getSerialized();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  this.serialized  =  f.getSerialized();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
985	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  Method  method  =  f.getMethod(SerializedName.class);  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  Method  method  =  f.getMethod(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  Method  method  =  f.getMethod(SerializedName.class);	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
986	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serializedName  =  f.getName();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serializedName  =  f.getName();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  this.serializedName  =  f.getName();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
987	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  Method  method  =  f.getMethod(SerializedName.class,  method);  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  Method  method  =  f.getMethod(SerializedName.class,  method);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  Method  method  =  f.getMethod(SerializedName.class,  method);	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
988	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serialized  =  f.getSerialize();  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  this.serialized  =  f.getSerialize();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  this.serialized  =  f.getSerialize();	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
989	[BUG]  [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  Method  method  =  f.getMethod( "method ",  method);  [CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getName();  String  name  =  f.getName();  Method  method  =  f.getMethod( "method ",  method);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String    name    =    f.getName();    String  name  =  f.getName();  Method  method  =  f.getMethod( "method ",  method);	  	non-compiled	[CE]  variable  name  is  already  defined  in  method  getFieldNames(Field)	15	None	add
990	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializers):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializers  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializers):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializers):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializers	123	None	replace
991	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
992	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.class,  f);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.class,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.class,  f);	  String    name    =    f.translateName(fieldNamingPolicy.class,    f);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
993	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor(SerializedName.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getConstructor(SerializedName.class);	  FieldNamingStrategy    constructor    =    f.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
994	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  f.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
995	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  constructor.getSerializedName());  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  constructor.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  constructor.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  constructor	122	None	replace
996	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation,  fields.getSerializedName());  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation,  fields.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation,  fields.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fields	122	None	replace
997	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(annotation,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  deserializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(annotation,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(annotation,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  deserializedName	152	None	replace
998	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  f.type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getSimpleName(),  f.type);	  String    name    =    FieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
999	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getDeclaringClass());  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  f.getDeclaringClass());	  String    name    =    fieldNamingPolicy.translateName(annotation.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	26	None	replace
1000	[BUG]  [BUGGY]  String  name  =  fs.translateName(fields.getSimpleName());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fields.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fields.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  fields	109	None	replace
1001	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f.getSimpleName());	  String    name    =    fields.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1002	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1003	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  fieldNamingStrategy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  fieldNamingStrategy);	  String    name    =    fieldNamingPolicy.translateName(annotation,    constructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	90	None	replace
1004	[BUG]  [BUGGY]  String  name  =  fn.translateName(fieldNamingPolicy,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fn.translateName(fieldNamingPolicy,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fn.translateName(fieldNamingPolicy,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1005	[BUG]  [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fieldNamingPolicy,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1006	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f,  f.getSimpleName(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1007	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.name);  [CE]  type  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.type,  f.name);	  String    name    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	117	None	replace
1008	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.getName());  [CE]  name  has  private  access  in  Field  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.name,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.name,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getName());    	non-compiled	[CE]  name  has  private  access  in  Field	145	None	replace
1009	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field,  f.getValue());  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(field,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(field,  f.getValue());	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  field	102	None	replace
1010	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f.name);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getValue(),  f.name);	  String    name    =    FieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1011	[BUG]  [BUGGY]  String  name  =  t.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  t  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  t.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  t.getAnnotation(SerializedName.class);	  String    name    =    serializedName.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  t	54	None	replace
1012	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getReferenceName(f.getDeclaringClass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getReferenceName(f.getDeclaringClass()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getReferenceName(f.getDeclaringClass()));	  String    name    =    fieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1013	[BUG]  [BUGGY]  String  name  =  _annotation.translateName(f);  [CE]  cannot  find  symbol  _annotation  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _annotation.translateName(f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _annotation.translateName(f);	  String    name    =    annotations.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  _annotation	23	None	replace
1014	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class),  f.getAnnotation(SerializedName.class));	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	114	None	replace
1015	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  FieldNamingPolicy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f,  f.getAnnotation(SerializedName.class));	  String    name    =    FieldNamingPolicy.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  FieldNamingPolicy	114	None	replace
1016	[BUG]  [BUGGY]  String  serializedName  =  f.translateName(fieldNamingPolicy.name);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  serializedName  =  f.translateName(fieldNamingPolicy.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  serializedName  =  f.translateName(fieldNamingPolicy.name);	  String    name    =    fieldNamingPolicy.name.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  name	70	None	replace
1017	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f.type);	  String    name    =    fieldNamingPolicy.translateName(annotation,    serializedName);    	non-compiled	[CE]  type  has  private  access  in  Field	63	None	replace
1018	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  deserialized);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  deserialized);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserialized	42	None	replace
1019	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation.class);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1020	[BUG]  [BUGGY]  String  name  =  f.name().translateName(annotation,  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name().translateName(annotation,  deserialize);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name().translateName(annotation,  deserialize);	  String    name    =    f.name().translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserialize	42	None	replace
1021	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getDeclaringClass());	  String    name    =    fields.translateName(fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
1022	[BUG]  [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  Annotation  annotation  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	Annotation  annotation  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  Annotation    annotation    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1023	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getDeclaringClass());  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  field	28	None	replace
1024	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class)+  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class)+  1;  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	FieldNamingStrategy  constructor  =  f.getAnnotation(SerializedName.class)+  1;	  FieldNamingStrategy    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	14	None	replace
1025	[BUG]  [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f.name);  [CE]  name  has  private  access  in  Field  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  FieldNamingPolicy.translateName(f.getDeclaringClass(),  f.name);	  String    name    =    FieldNamingPolicy.translateName(f.getDeclaringClass());    	non-compiled	[CE]  name  has  private  access  in  Field	99	None	replace
1026	[BUG]  [BUGGY]  String  name  =  _fieldNamingStrategy.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  _fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _fieldNamingStrategy.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _fieldNamingStrategy.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  _fieldNamingStrategy	130	None	replace
1027	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(fieldNamingPolicy);  [CE]  cannot  find  symbol  deserializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(fieldNamingPolicy);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(fieldNamingPolicy);	  String    name    =    fields.translateName(fieldNamingPolicy);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	130	None	replace
1028	[BUG]  [BUGGY]  String  name  =  fn.translateName(fieldNamingPolicy,  f.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fn.translateName(fieldNamingPolicy,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fn.translateName(fieldNamingPolicy,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
1029	[BUG]  [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fieldNamingPolicy.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1030	[BUG]  [BUGGY]  String  name  =  fn.translateName(fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fn.translateName(fieldNamingPolicy.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fn.translateName(fieldNamingPolicy.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1031	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.class.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.class.getValue());	  String    name    =    fieldNamingPolicy.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1032	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  null,  f);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  null,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  null,  f);	  String    name    =    fieldNamingPolicy.translateName(annotation,    f);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	88	None	replace
1033	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getSimpleName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  f.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
1034	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  constructor.getSimpleName());  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  constructor.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  constructor.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  constructor	149	None	replace
1035	[BUG]  [BUGGY]  String  name  =  this.f.translateName(annotation.name);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  this.f.translateName(annotation.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  this.f.translateName(annotation.name);	  String    name    =    this.f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
1036	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f,  this.class);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getName(),  f,  this.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getName(),  f,  this.class);	  String    name    =    fieldNamingPolicy.translateName(f.getName(),    f.class);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
1037	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.class,  f.getName());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1038	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.name());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.name());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(fieldNamingPolicy.name());	  String    name    =    fields.translateName(fieldNamingPolicy.getName());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1039	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getValue(),  FieldNamingPolicy.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getValue(),  FieldNamingPolicy.getAnnotation(SerializedName.class);	  String    name    =    f.translateName(annotation.value(),    FieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ')'  expected	104	None	replace
1040	[BUG]  [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class,  f));	  String    name    =    serializedName.translateName(fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1041	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  excluder);  [CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  f,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  f,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  method  translateName  in  interface  FieldNamingStrategy  cannot  be  applied  to  given  types;	89	None	replace
1042	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  constructor,  excluder);  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation,  constructor,  excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation,  constructor,  excluder);	  String    name    =    fieldNamingPolicy.translateName(annotation,    excluder);    	non-compiled	[CE]  cannot  find  symbol  constructor	89	None	replace
1043	[BUG]  [BUGGY]  String  name  =  f,  fieldNamingPolicy.translateName(field.class);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f,  fieldNamingPolicy.translateName(field.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f,  fieldNamingPolicy.translateName(field.class);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  ';'  expected	78	None	replace
1044	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.CLASS);  [CE]  cannot  find  symbol  CLASS  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.CLASS);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.CLASS);	  String    name    =    fieldNamingPolicy.translateName(f.class);    	non-compiled	[CE]  cannot  find  symbol  CLASS	78	None	replace
1045	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name,  f);  [CE]  cannot  find  symbol  name  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(annotation.name,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(annotation.name,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    annotation);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
1046	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName.class);	  String    name    =    fieldNamingPolicy.translateName(f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1047	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	74	None	replace
1048	[BUG]  [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy.getSimpleName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fieldNamingPolicy.getSimpleName());	  String    name    =    fieldNamingPolicy.translateName(f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
1049	[BUG]  [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy.getSerializedName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fieldNamingPolicy.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fieldNamingPolicy.getSerializedName());	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1050	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSerializedName(),  serializedName);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.getSerializedName(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.getSerializedName(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1051	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getName());  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(annotation.getName());    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	144	None	replace
1052	[BUG]  [BUGGY]  String  name  =  fields.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fields.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fields.translateName(annotation,  fieldNamingPolicy.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
1053	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  f.getAnnotation(SerializedName.class));	  String    name    =    fieldNamingPolicy.translateName(annotation,    fieldNamingPolicy.getAnnotation(SerializedName.class));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
1054	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(f));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1055	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f),  f.getName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f),  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(f),  f.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1056	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f.getName()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.getName(f.getName()));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.getName(f.getName()));	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1057	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.localName,  f.getName());  [CE]  cannot  find  symbol  localName  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.localName,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.localName,  f.getName());	  String    name    =    fieldNamingPolicy.translateName(f,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  localName	146	None	replace
1058	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  f.serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  f.serializedName);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	50	None	replace
1059	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  _anonymous0);  [CE]  cannot  find  symbol  _anonymous0  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class,  _anonymous0);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class,  _anonymous0);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  _anonymous0	50	None	replace
1060	[BUG]  [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName));  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(annotation.getAnnotation(SerializedName.class,  serializedName));	  String    name    =    f.translateName(annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	44	None	replace
1061	[BUG]  [BUGGY]  String  name  =  serializerName.getAnnotation(SerializedName.class,  f.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  serializerName.getAnnotation(SerializedName.class,  f.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  serializerName.getAnnotation(SerializedName.class,  f.class);	  String    name    =    f.getAnnotation(SerializedName.class,    serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
1062	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  deserializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  deserializedName	98	None	replace
1063	[BUG]  [BUGGY]  String  name  =  ObjectConstructor.translateName(f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  ObjectConstructor.translateName(f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  ObjectConstructor.translateName(f.getDeclaringClass());	  String    name    =    fields.translateName(f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1064	[BUG]  [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  annotation.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation!=  null)?  f.translateName(serializedName):  annotation.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation!=  null)?  f.translateName(serializedName):  annotation.getAnnotation(SerializedName.class);	  String    name    =(annotation!=    null)?    f.translateName(annotation):    annotation.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	112	None	replace
1065	[BUG]  [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.type);  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.translateName(fieldNamingPolicy.type);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.translateName(fieldNamingPolicy.type);	  String    name    =    fieldNamingPolicy.name.translateName(f.name);    	non-compiled	[CE]  cannot  find  symbol  type	68	None	replace
1066	[BUG]  [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.locale());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(fieldNamingPolicy.locale());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(fieldNamingPolicy.locale());	  String    name    =    fieldNamingPolicy.translateName(f.value());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1067	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f.getName());  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	8	None	replace
1068	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getName());  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field,  f.getName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getName());    	non-compiled	[CE]  cannot  find  symbol  field	8	None	replace
1069	[BUG]  [BUGGY]  String  name  =  _fields.translateName(f.getName());  [CE]  cannot  find  symbol  _fields  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  _fields.translateName(f.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  _fields.translateName(f.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  _fields	91	None	replace
1070	[BUG]  [BUGGY]  String  name  =  f.translateName(excluder.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(excluder.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(excluder.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1071	[BUG]  [BUGGY]  String  name  =  f.translateName(dataset.getName());  [CE]  cannot  find  symbol  dataset  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(dataset.getName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(dataset.getName());	  String    name    =    fields.translateName(f.getName());    	non-compiled	[CE]  cannot  find  symbol  dataset	91	None	replace
1072	[BUG]  [BUGGY]  String  name  =  f.translateName(serializedName,  f);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(serializedName,  f);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(serializedName,  f);	  String    name    =    f.translateName(fieldNamingPolicy.name,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	96	None	replace
1073	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  annotation);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,SerializedName)  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  annotation);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	ObjectConstructor  constructor  =  f.getAnnotation(SerializedName.class,  annotation);	  ObjectConstructor    constructor    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,SerializedName)	136	None	replace
1074	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(f.class,  f.getDeclaringClass());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(f.class,  f.getDeclaringClass());	  String    name    =    f.translateName(fieldNamingPolicy.class,    f.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1075	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  alternates);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  alternates);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  alternates);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
1076	[BUG]  [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f.name);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.getAnnotation(SerializedName.class),  f.name);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.getAnnotation(SerializedName.class),  f.name);	  String    name    =    f.getAnnotation(SerializedName.class),    serializedName);    	non-compiled	[CE]  ';'  expected	55	None	replace
1077	[BUG]  [BUGGY]  String  name  =  f.name.trim().toLowerCase();  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.name.trim().toLowerCase();  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.name.trim().toLowerCase();	  String    name    =    fieldNamingPolicy.translateName(f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	71	None	replace
1078	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getSimpleName());  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field,  f.getSimpleName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field,  f.getSimpleName());	  String    name    =    f.translateName(fieldNamingPolicy,    f.getSimpleName());    	non-compiled	[CE]  cannot  find  symbol  field	3	None	replace
1079	[BUG]  [BUGGY]  String  name  =  f.translateName(answer.value());  [CE]  cannot  find  symbol  answer  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(answer.value());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(answer.value());	  String    name    =    f.translateName(serializedName.value());    	non-compiled	[CE]  cannot  find  symbol  answer	83	None	replace
1080	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f.getSerializedName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1081	[BUG]  [BUGGY]  String  name  =  fs.translateName(fields.getSerializedName());  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fields.getSerializedName());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fields.getSerializedName());	  String    name    =    fields.translateName(f.getSerializedName());    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
1082	[BUG]  [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getValue());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  annotation.translateName(fieldNamingPolicy,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  annotation.translateName(fieldNamingPolicy,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1083	[BUG]  [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f,  f.getValue());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  beanNamingPolicy.translateName(annotation,  f,  f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  beanNamingPolicy.translateName(annotation,  f,  f.getValue());	  String    name    =    fieldNamingPolicy.translateName(annotation,    f.getValue());    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1084	[BUG]  [BUGGY]  String  name  =  fs.translateName(fields.getValue());  [CE]  cannot  find  symbol  fields  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fs.translateName(fields.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fs.translateName(fields.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
1085	[BUG]  [BUGGY]  String  name  =  deserializedName.translateName(f.getValue());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  deserializedName.translateName(f.getValue());  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  deserializedName.translateName(f.getValue());	  String    name    =    fields.translateName(f.getValue());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1086	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  deserializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  null  :  f.translateName(annotation,  deserializedName);	  String    name    =(annotation    ==    null)?    null    :    f.translateName(annotation);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	127	None	replace
1087	[BUG]  [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getClass(),  serializedName);  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  fieldNamingPolicy.translateName(field.getClass(),  serializedName);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  fieldNamingPolicy.translateName(field.getClass(),  serializedName);	  String    name    =    fieldNamingPolicy.translateName(f.getClass());    	non-compiled	[CE]  cannot  find  symbol  field	134	None	replace
1088	[BUG]  [BUGGY]  String  name  =  f.translateName(excluder);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(excluder);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(excluder);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1089	[BUG]  [BUGGY]  String  name  =  f.translateName(e);  [CE]  cannot  find  symbol  e  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =  f.translateName(e);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =  f.translateName(e);	  String    name    =    fields.translateName(f);    	non-compiled	[CE]  cannot  find  symbol  e	115	None	replace
1090	[BUG]  [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializers):  f.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializers  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);  if  (annotation  ==  null)  {      [BUGGY]  String  name  =(annotation  ==  null)?  f.translateName(serializers):  f.getAnnotation(SerializedName.class);  [BUGGY]      return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  List<String>  fieldNames  =  new  ArrayList<String>(alternates.length  +  1);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	74	74	1	replace	String  name  =(annotation  ==  null)?  f.translateName(serializers):  f.getAnnotation(SerializedName.class);	  String    name    =(annotation    ==    null)?    f.translateName(annotation):    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializers	126	None	replace
