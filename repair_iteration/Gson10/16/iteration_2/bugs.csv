bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
2	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
3	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
4	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
5	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serializedName));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
6	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  scope));  [CE]  cannot  find  symbol  scope  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  scope));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  scope	3	None	replace
7	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
8	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  method));  [CE]  cannot  find  symbol  method  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  method));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  method));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  method	3	None	replace
9	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingPolicy));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
10	[BUG]  [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  cannot  find  symbol  buildor  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(buildor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  buildor	8	None	replace
11	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
12	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor));  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
13	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
14	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
15	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor));  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
17	[BUG]  [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type));  [CE]  cannot  find  symbol  type  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
19	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
20	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	9	None	replace
21	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
22	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  false));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
23	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
24	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  method));  [CE]  cannot  find  symbol  method  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  method));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  method));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  method	4	None	replace
25	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  fieldNamingStrategy));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	4	None	replace
26	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
27	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
28	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
29	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  value),  constructor);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  value),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  value),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
30	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  scope),  constructor);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  scope),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  scope),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  scope	2	None	replace
31	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	2	None	replace
32	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
33	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor  ==  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
35	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
36	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
41	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
42	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
43	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type));  [CE]  cannot  find  symbol  compiler  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	7	None	replace
44	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  gson,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  gson,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(type,  gson,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
45	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
46	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  null));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
47	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
48	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
49	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root));  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
50	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  raw));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
51	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  raw);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.create(gson,  raw);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.newInstance();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return(constructor  ==  null)?  null  :  constructor.newInstance();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.newInstance();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  raw);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor!=  null)?  null  :  constructor.create(gson,  raw);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
56	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  deserialized));  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  deserialized));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
58	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory));  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	replace
59	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  constructor));  [CE]  cannot  find  symbol  extern  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  constructor));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  extern	1	None	replace
60	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
61	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserializedName);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	2	None	replace
62	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  deserialized	2	None	replace
63	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	2	None	replace
64	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  cannot  find  symbol  extern  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  extern	2	None	replace
65	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  extern  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(buildor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  extern	8	None	replace
66	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  type));  [CE]  cannot  find  symbol  extern  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  type));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  extern	7	None	replace
67	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
68	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false));  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
69	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserialized));  [CE]  cannot  find  symbol  deserialized  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserialized));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  deserialized	3	None	replace
70	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserializedName));  [CE]  cannot  find  symbol  deserializedName  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserializedName));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  deserializedName	3	None	replace
71	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson,  raw);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.deserialize(gson,  raw);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
72	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson,  type);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.deserialize(gson,  type);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
73	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.newInstance();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.newInstance();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.newInstance();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
74	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.create(gson,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.create(gson,  raw);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.create(gson,  raw);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
75	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.deserialize();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
76	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.create();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.create();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.create();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
77	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.newType();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  constructor  ==  null?  null  :  constructor.newType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.newType();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
78	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);    [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	9	None	replace
