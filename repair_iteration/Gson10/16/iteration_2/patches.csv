bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw));  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	42	None	replace
2	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  excluder));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  excluder));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
3	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  excluder,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  excluder,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  excluder,  type));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
4	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  raw.deserialize(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  raw.deserialize(gson,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  raw.deserialize(gson,  constructor);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
5	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.deserialize(gson,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.deserialize(gson,  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.deserialize(gson,  raw);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
6	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	67	None	replace
7	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	67	None	replace
8	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	67	None	replace
9	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw,  false,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw,  false,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw,  false,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	67	None	replace
10	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  serializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  serializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  cannot  find  symbol  serializedName	67	None	replace
11	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw,  serializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw,  serializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  cannot  find  symbol  serializedName	67	None	replace
12	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
13	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
14	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
15	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	51	None	replace
16	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  constructor,  getBoundFields(gson,  type,  raw));  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  constructor,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  constructor,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	3	None	replace
17	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  raw,  getBoundFields(gson,  type,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  raw,  getBoundFields(gson,  type,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  raw,  getBoundFields(gson,  type,  type));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
18	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  constructor,  getBoundFields(gson,  raw,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  constructor,  getBoundFields(gson,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  constructor,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
19	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  constructor,  getBoundFields(gson,  type,  raw));  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  constructor,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  constructor,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	3	None	replace
20	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  raw,  getBoundFields(gson,  type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  raw,  getBoundFields(gson,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  raw,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
21	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  constructor,  getBoundFields(raw,  type,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  constructor,  getBoundFields(raw,  type,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  constructor,  getBoundFields(raw,  type,  type));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
22	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  ')'  expected	47	None	replace
23	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  fieldNamingStrategy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  fieldNamingStrategy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  fieldNamingStrategy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
24	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingStrategy);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingStrategy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingStrategy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  ')'  expected	47	None	replace
25	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  ')'  expected	47	None	replace
26	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
27	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  valueType,  null),  constructor);  [CE]  cannot  find  symbol  valueType  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  valueType,  null),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  valueType,  null),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  cannot  find  symbol  valueType	47	None	replace
28	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  fieldNamingStrategy));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  fieldNamingStrategy));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
29	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
30	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
31	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory),  raw);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory),  raw);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
32	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  fieldNamingPolicy));  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  fieldNamingPolicy));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
33	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
34	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type),  constructor));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type),  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type),  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor));    	non-compiled	[CE]  ';'  expected	39	None	replace
35	[BUG]  [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  }  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  }	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
36	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
37	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
38	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	37	None	replace
39	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  gson,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  gson,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  gson,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
40	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(type,  raw,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(type,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(type,  raw,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
41	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  gson,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  gson,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  gson,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
42	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(type,  raw,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(type,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(type,  raw,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
43	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(type,  gson,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(type,  gson,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(type,  gson,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
44	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    root));    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
45	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    root));    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
46	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  resource));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  resource));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  resource));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    root));    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
47	[BUG]  [BUGGY]  final  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
48	[BUG]  [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
49	[BUG]  [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor);	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
50	[BUG]  [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
51	[BUG]  [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
52	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  type.getRawType();	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw!=    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
53	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawType();  if(constructor!=  null)  {  return  constructor;  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawType();  if(constructor!=  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  type.getRawType();  if(constructor!=  null)  {  return  constructor;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw!=    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
54	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw!=    null)    {    return    constructor;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
55	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw!=    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
56	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  constructor;  }  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  constructor;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw!=    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
57	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    scope));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
58	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope),  raw);  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope),  raw);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    scope));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
59	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  scope));  [CE]  cannot  find  symbol  scope  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  scope));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    scope));    	non-compiled	[CE]  cannot  find  symbol  scope	16	None	replace
60	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  scope,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    scope));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
61	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  constructor);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  ')'  expected	32	None	replace
62	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
63	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
64	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type,  raw,  constructor);  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type,  raw,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type,  raw,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  ')'  expected	32	None	replace
65	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  ')'  expected	32	None	replace
66	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor,  fieldNamingStrategy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor,  fieldNamingStrategy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor,  fieldNamingStrategy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
67	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  exclusion  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  exclusion	66	None	replace
68	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  constructor,  type));  [CE]  cannot  find  symbol  exclusion  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  exclusion	66	None	replace
69	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
70	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  value),  constructor,  constructor);  [CE]  cannot  find  symbol  value  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  value),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  value),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  cannot  find  symbol  value	31	None	replace
71	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  scope),  constructor,  constructor);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  scope),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  scope),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  cannot  find  symbol  scope	31	None	replace
72	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.create(gson,  type);	  return(constructor    ==    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
73	[BUG]  [BUGGY]  return(raw  ==  null)?  null  :  constructor.create(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(raw  ==  null)?  null  :  constructor.create(gson,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(raw  ==  null)?  null  :  constructor.create(gson,  constructor);	  return(constructor    ==    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
74	[BUG]  [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor!=  null)?  null  :  constructor.create(gson,  type);	  return(constructor    ==    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
75	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  context);  [CE]  cannot  find  symbol  context  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  context);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.create(gson,  context);	  return(constructor    ==    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  context	52	None	replace
76	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  scope);  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  scope);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.create(gson,  scope);	  return(constructor    ==    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  scope	52	None	replace
77	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  value));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  value));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
78	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value),  raw);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value),  raw);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
79	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
80	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.value));  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.value));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
81	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  value,  type));  [CE]  cannot  find  symbol  compiler  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  value,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  value,  type));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
82	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
83	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
84	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type));  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    constructor,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	1	None	replace
85	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)||  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)||  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)||  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
86	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
87	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
88	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)/  2,  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)/  2,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)/  2,  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
89	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)-  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)-  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)-  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
90	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized);  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serialized	62	None	replace
91	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialize);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialize);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serialize	62	None	replace
92	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  root,  constructor),  constructor,  serialized);  [CE]  cannot  find  symbol  root  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  root,  constructor),  constructor,  serialized);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  root,  constructor),  constructor,  serialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  root	62	None	replace
93	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  null);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  null);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  null);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	62	None	replace
94	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serializedName	62	None	replace
95	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  value);  [CE]  cannot  find  symbol  value  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  value);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  value);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  value	62	None	replace
96	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  resource),  constructor,  serialized);  [CE]  cannot  find  symbol  resource  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  resource),  constructor,  serialized);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  resource),  constructor,  serialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  resource	62	None	replace
97	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  buildor),  constructor);  [CE]  cannot  find  symbol  buildor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  buildor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  buildor),  constructor);	  return    new    Adapter    <    T>(buildor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  buildor	10	None	replace
98	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  buildor);  [CE]  cannot  find  symbol  buildor  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  buildor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  buildor);	  return    new    Adapter    <    T>(buildor,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  buildor	10	None	replace
99	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  name),  constructor);  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  name),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  name),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  cannot  find  symbol  name	29	None	replace
100	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor.value),  constructor);  [CE]  cannot  find  symbol  value  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor.value),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor.value),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  cannot  find  symbol  value	29	None	replace
101	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor.type),  constructor);  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor.type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor.type),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  cannot  find  symbol  type	29	None	replace
102	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  method,  constructor));  [CE]  cannot  find  symbol  method  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  method,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  method,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  cannot  find  symbol  method	29	None	replace
103	[BUG]  [BUGGY]  Constructor  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
104	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getConstructor();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  constructor  =  constructor.getConstructor();	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
105	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
106	[BUG]  [BUGGY]  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	33	None	replace
107	[BUG]  [BUGGY]  Constructor  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
108	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
109	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
110	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
111	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
112	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  renderer));  [CE]  cannot  find  symbol  renderer  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  renderer));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  true,  renderer));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  cannot  find  symbol  renderer	7	None	replace
113	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  constructor,  type));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
114	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(type,  constructor,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(type,  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(type,  constructor,  raw));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
115	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(constructor,  raw,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(constructor,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(constructor,  raw,  type));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
116	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  constructor,  getBoundFields(raw,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  constructor,  getBoundFields(raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  constructor,  getBoundFields(raw,  constructor));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
117	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type,  fieldNamingStrategy));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	60	None	replace
118	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type,  fieldNamingPolicy));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
119	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  true));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    true));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	21	None	replace
120	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  true));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    true));    	non-compiled	[CE]  cannot  find  symbol  compiler	21	None	replace
121	[BUG]  [BUGGY]  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    true));    	non-compiled	[CE]  not  a  statement	21	None	replace
122	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.create();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.create();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.create();	  return    constructor    ==    null?    null    :    constructor.create();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
123	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.create();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.create();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructorConstructor.create();	  return    constructor    ==    null?    null    :    constructor.create();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
124	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.build();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.build();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.build();	  return    constructor    ==    null?    null    :    constructor.create();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
125	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.construct();  [CE]  incompatible  types  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.construct();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.construct();	  return    constructor    ==    null?    null    :    constructor.create();    	non-compiled	[CE]  incompatible  types	76	None	replace
126	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  value));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  value));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
127	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  fieldNamingStrategy));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
128	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  raw),  type);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  raw),  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  raw),  type);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
129	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  scope));  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  scope));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
130	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	19	None	replace
131	[BUG]  [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor));  }  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor));  }	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	19	None	replace
132	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	19	None	replace
133	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  scope));  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  scope	19	None	replace
134	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	19	None	replace
135	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
136	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
137	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf!=    null)    {    return    raw;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	54	None	replace
138	[BUG]  [BUGGY]  return(raw!=  null)?  null  :  constructor.create(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(raw!=  null)?  null  :  constructor.create(gson,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(raw!=  null)?  null  :  constructor.create(gson,  constructor);	  return(constructor!=    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
139	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  scope));  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  cannot  find  symbol  scope	23	None	replace
140	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
141	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  serializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  serializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  cannot  find  symbol  serializedName	23	None	replace
142	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
143	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
144	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  method));  [CE]  cannot  find  symbol  method  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  method));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  null,  method));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  cannot  find  symbol  method	23	None	replace
145	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw.type));  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw.type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw.type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
146	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type.type));  [CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type.type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type.type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  type  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	18	None	replace
147	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.value));  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.value));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  value	18	None	replace
148	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.class));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.class));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.class));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
149	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.objectType));  [CE]  cannot  find  symbol  objectType  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.objectType));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.objectType));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  objectType	18	None	replace
150	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  boundFields,  false,  fieldNamingPolicy));  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  boundFields,  false,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  boundFields,  false,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  cannot  find  symbol  boundFields	25	None	replace
151	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
152	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
153	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  true));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
154	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
155	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  value));  [CE]  cannot  find  symbol  value  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  value));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  cannot  find  symbol  value	25	None	replace
156	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
157	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw,  constructor);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  ')'  expected	28	None	replace
158	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
159	[BUG]  [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  constructor);  }  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  constructor);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  constructor);  }	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
160	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  false));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  false));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
161	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  null,  false));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  null,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  null,  false));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
162	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  renderer,  false));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  renderer,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  renderer,  false));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
163	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  false,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  false,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  false,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
164	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value,  false));  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  value,  false));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
165	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  type,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  type,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  type,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
166	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
167	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(constructor,  type,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(constructor,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(constructor,  type,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
168	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(constructor,  raw,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(constructor,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(constructor,  raw,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
169	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(constructor,  type,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(constructor,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(constructor,  type,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
170	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
171	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  constructor.type));  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  constructor.type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  constructor.type));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
172	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  excluder));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  excluder));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	59	None	replace
173	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	59	None	replace
174	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  constructor));  [CE]  cannot  find  symbol  exclusion  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  exclusion	59	None	replace
175	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.deserialize(gson,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.deserialize(gson,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.deserialize(gson,  type);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
176	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  type.deserialize(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  type.deserialize(gson,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  type.deserialize(gson,  constructor);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
177	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.deserialize(gson,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.deserialize(gson,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructorConstructor.deserialize(gson,  type);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
178	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserializeWithType(gson,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserializeWithType(gson,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.deserializeWithType(gson,  type);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
179	[BUG]  [BUGGY]  return(constructor!=  null)?  null  :  constructor.newInstance();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor!=  null)?  null  :  constructor.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor!=  null)?  null  :  constructor.newInstance();	  return(constructor    ==    null)?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
180	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructorConstructor.newInstance();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructorConstructor.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructorConstructor.newInstance();	  return(constructor    ==    null)?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
181	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor,  raw.newInstance();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructor,  raw.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor,  raw.newInstance();	  return(constructor    ==    null)?    null    :    constructor.newInstance();    	non-compiled	[CE]  ';'  expected	53	None	replace
182	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
183	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf    ==    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
184	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  constructor));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	15	None	replace
185	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor));  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	15	None	replace
186	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	15	None	replace
187	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor),  constructor));  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor),  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor),  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	15	None	replace
188	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  fieldNamingStrategy),  constructor);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  fieldNamingStrategy),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  fieldNamingStrategy),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    scope),    constructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	30	None	replace
189	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  valueType),  constructor);  [CE]  cannot  find  symbol  valueType  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  valueType),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  valueType),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    scope),    constructor);    	non-compiled	[CE]  cannot  find  symbol  valueType	30	None	replace
190	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  context),  constructor);  [CE]  cannot  find  symbol  context  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  context),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  context),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    scope),    constructor);    	non-compiled	[CE]  cannot  find  symbol  context	30	None	replace
191	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingPolicy));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
192	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw),  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
193	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
194	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy),  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
195	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw),  constructor,  scopeNamingStrategy));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw),  constructor,  scopeNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw),  constructor,  scopeNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
196	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	20	None	replace
197	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.newInstance();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.newInstance();	  return    constructor    ==    null?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
198	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.newInstance();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructorConstructor.newInstance();	  return    constructor    ==    null?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
199	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  factory.newInstance();  [CE]  cannot  find  symbol  factory  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  factory.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  factory.newInstance();	  return    constructor    ==    null?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol  factory	73	None	replace
200	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  buildor.newInstance();  [CE]  cannot  find  symbol  buildor  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  buildor.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  buildor.newInstance();	  return    constructor    ==    null?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol  buildor	73	None	replace
201	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  exclusionr  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  exclusionr	65	None	replace
202	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  constructor,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  constructor,  null));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
203	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null,  constructor));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
204	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder,  null));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
205	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.deserialize();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.deserialize();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.deserialize();	  return    constructor    ==    null?    null    :    constructor.deserialize();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
206	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.deserialize(gson);	  return    constructor    ==    null?    null    :    constructor.deserialize();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
207	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.deserialize();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.deserialize();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructorConstructor.deserialize();	  return    constructor    ==    null?    null    :    constructor.deserialize();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
208	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  method));  [CE]  cannot  find  symbol  method  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  method));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  method));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    method));    	non-compiled	[CE]  cannot  find  symbol  method	24	None	replace
209	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  scope));  [CE]  cannot  find  symbol  scope  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    method));    	non-compiled	[CE]  cannot  find  symbol  scope	24	None	replace
210	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  $anonymous1);  [CE]  cannot  find  symbol  $anonymous1  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  $anonymous1);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  $anonymous1);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  $anonymous1	61	None	replace
211	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  value),  constructor,  serializedName);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  value),  constructor,  serializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  value),  constructor,  serializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  value	61	None	replace
212	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  root,  constructor),  constructor,  serializedName);  [CE]  cannot  find  symbol  root  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  root,  constructor),  constructor,  serializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  root,  constructor),  constructor,  serializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  root	61	None	replace
213	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  resource),  constructor,  serializedName);  [CE]  cannot  find  symbol  resource  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  resource),  constructor,  serializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  resource),  constructor,  serializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  resource	61	None	replace
214	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  constructor);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  ')'  expected	40	None	replace
215	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  fieldNamingStrategy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  fieldNamingStrategy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  fieldNamingStrategy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
216	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  method),  constructor);  [CE]  cannot  find  symbol  method  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  method),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  method),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  cannot  find  symbol  method	40	None	replace
217	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  fieldNamingPolicy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  fieldNamingPolicy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  fieldNamingPolicy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
218	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  constructor));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
219	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
220	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor,  null));  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  constructor,  null));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
221	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  null));  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  null));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
222	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  false));  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  false));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
223	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  true));  [CE]  cannot  find  symbol  compiler  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  true));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
224	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  null,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  null,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  null,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
225	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  raw,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
226	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  scope));  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  cannot  find  symbol  scope	4	None	replace
227	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	4	None	replace
228	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
229	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
230	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  null));  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  null));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
231	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
232	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  null,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  null,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  null,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
233	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  type,  raw,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  type,  raw,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  type,  raw,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
234	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.create(gson,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.create(gson,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.create(gson,  type);	  return    constructor    ==    null?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
235	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  raw.create(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  raw.create(gson,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  raw.create(gson,  constructor);	  return    constructor    ==    null?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
236	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.create(gson,  raw);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.create(gson,  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.create(gson,  raw);	  return    constructor    ==    null?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
237	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  null));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
238	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  type,  raw,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  type,  raw,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  type,  raw,  null));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
239	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  type,  constructor,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  type,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(raw,  type,  constructor,  null));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
240	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serialized));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
241	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serialize));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serialize));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serialize));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
242	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  deserialized));  [CE]  cannot  find  symbol  deserialized  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  deserialized	57	None	replace
243	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  deserialized));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
244	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serializedName));  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  serializedName));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
245	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
246	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  deserialized));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
247	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialize));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialize));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialize));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
248	[BUG]  [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  }	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
249	[BUG]  [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized));  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialized));  }	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
250	[BUG]  [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
251	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type),  constructor);	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
252	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor);	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  ')'  expected	26	None	replace
253	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor),  constructor);	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
254	[BUG]  [BUGGY]  return  constructor!=  null?  null  :  constructor.newType();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor!=  null?  null  :  constructor.newType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor!=  null?  null  :  constructor.newType();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
255	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.newType();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructorConstructor.newType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructorConstructor.newType();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
256	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor,  newType();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor,  newType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor,  newType();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  ';'  expected	77	None	replace
257	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  factory.newType();  [CE]  cannot  find  symbol  factory  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  factory.newType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  factory.newType();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  cannot  find  symbol  factory	77	None	replace
258	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.type));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.type));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	12	None	replace
259	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  raw);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  raw);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	12	None	replace
260	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	12	None	replace
261	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous1));  [CE]  cannot  find  symbol  $anonymous1  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous1));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous1));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  $anonymous1	5	None	replace
262	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous0));  [CE]  cannot  find  symbol  $anonymous0  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous0));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous0));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  $anonymous0	5	None	replace
263	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous2));  [CE]  cannot  find  symbol  $anonymous2  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous2));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  $anonymous2));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  $anonymous2	5	None	replace
264	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  value));  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  value));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  value	5	None	replace
265	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  constructor),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  constructor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  constructor),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
266	[BUG]  [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor);  }  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor);  }	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
267	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type),  raw);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type),  raw);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
268	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
269	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
270	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawType();  if(constructor  ==  null)  {  return  constructor;  }  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  type.getRawType();  if(constructor  ==  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  type.getRawType();  if(constructor  ==  null)  {  return  constructor;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
271	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  constructor;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
272	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serialized));  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  serialized	69	None	replace
273	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serialize));  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serialize));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  serialize));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  serialize	69	None	replace
274	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  valueType));  [CE]  cannot  find  symbol  valueType  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  valueType));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  valueType));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  valueType	69	None	replace
275	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  serializedName,  null,  deserialized));  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  serializedName,  null,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  serializedName,  null,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  serializedName	69	None	replace
276	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  curr,  null,  serialized));  [CE]  cannot  find  symbol  curr  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  curr,  null,  serialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  curr,  null,  serialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  curr	69	None	replace
277	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  cannot  find  symbol  exclusion  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  exclusion	64	None	replace
278	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	64	None	replace
279	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  excluder);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  excluder);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  excluder);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	64	None	replace
280	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  type),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
281	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  constructor),  constructor);  [CE]  cannot  find  symbol  exclusion  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  constructor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  type,  constructor),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  exclusion	64	None	replace
282	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  excluder),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  excluder),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  excluder),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
283	[BUG]  [BUGGY]  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	35	None	replace
284	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
285	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingPolicy);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingPolicy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingPolicy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	63	None	replace
286	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  scope);  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  scope);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  scope);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  scope	63	None	replace
287	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  method);  [CE]  cannot  find  symbol  method  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  method);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  method);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  method	63	None	replace
288	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  valueNamingPolicy);  [CE]  cannot  find  symbol  valueNamingPolicy  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  valueNamingPolicy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  valueNamingPolicy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  valueNamingPolicy	63	None	replace
289	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  raw,  null,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  raw,  null,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  raw,  null,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
290	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  fieldNamingPolicy,  getBoundFields(gson,  type,  raw,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  fieldNamingPolicy,  getBoundFields(gson,  type,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  fieldNamingPolicy,  getBoundFields(gson,  type,  raw,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
291	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
292	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  null,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  null,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  null,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
293	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  raw,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  raw,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
294	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw,  null,  scope));  [CE]  cannot  find  symbol  scope  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw,  null,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  raw,  null,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  cannot  find  symbol  scope	9	None	replace
295	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  null,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  null,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingPolicy,  null,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
296	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	6	None	replace
297	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  subtypes));  [CE]  cannot  find  symbol  subtypes  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  subtypes));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  subtypes));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  cannot  find  symbol  subtypes	6	None	replace
298	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  arrayType));  [CE]  cannot  find  symbol  arrayType  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  arrayType));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  arrayType));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  cannot  find  symbol  arrayType	6	None	replace
299	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	27	None	replace
300	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
301	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  scope));  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  scope));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  scope));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  scope	27	None	replace
302	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  type,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
303	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
304	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor.type));  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor.type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor.type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    method));    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
305	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
306	[BUG]  [BUGGY]  ConstructorConstructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }  [CE]  type  ConstructorConstructor  does  not  take  parameters  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  ConstructorConstructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	ConstructorConstructor  <?  super  T>  constructor  =  constructor.getRawType();  if(constructor!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  type  ConstructorConstructor  does  not  take  parameters	51	None	replace
307	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  offset);  [CE]  cannot  find  symbol  offset  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  offset);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  offset);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  offset	62	None	replace
308	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  value),  constructor,  value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  value),  constructor,  value);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  value),  constructor,  value);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  value	62	None	replace
309	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  excluder));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  excluder));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
310	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  null));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
311	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?  super  T>  raw  =  type.getRawType();  if(raw  ==  null)  {  return  constructor;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	38	None	replace
312	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  constructorConstructor.get(type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  constructorConstructor.get(type);	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
313	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  constructor.getRawType();	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw    ==    null)    {    return    constructor;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
314	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructorConstructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructorConstructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?>  raw  =  constructorConstructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
315	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  root));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  root));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  root));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    root));    	non-compiled	[CE]  cannot  find  symbol  compiler	49	None	replace
316	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root),  constructor));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root),  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  root),  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    root));    	non-compiled	[CE]  ';'  expected	49	None	replace
317	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  value);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  value);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  value);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	29	None	replace
318	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  true),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
319	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  null);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  null);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  null);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
320	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  ')'  expected	32	None	replace
321	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw,  type),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
322	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  null,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
323	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
324	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  null,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
325	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw,  null,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw,  null,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw,  null,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
326	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?  super  T>  raw  =  constructor.getRawType();  if(raf  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf    ==    null)    {    return    raw;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	56	None	replace
327	[BUG]  [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  raw  =  constructor.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  raw  =  constructor.getRawType();	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
328	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  factory));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  factory));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  factory));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
329	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  factory,  type));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  factory,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  factory,  type));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
330	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw,  false,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw,  false,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  constructor,  raw,  false,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	67	None	replace
331	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
332	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  raw),  constructor,  fieldNamingStrategy));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  raw),  constructor,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingPolicy,  type,  raw),  constructor,  fieldNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
333	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBounds(gson,  type,  raw),  constructor,  serialized));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBounds(gson,  type,  raw),  constructor,  serialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBounds(gson,  type,  raw),  constructor,  serialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
334	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
335	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	59	None	replace
336	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  constructor));  [CE]  cannot  find  symbol  exclusionr  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  exclusionr	59	None	replace
337	[BUG]  [BUGGY]  ConstructorConstructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  type  ConstructorConstructor  does  not  take  parameters  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  ConstructorConstructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	ConstructorConstructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  type  ConstructorConstructor  does  not  take  parameters	34	None	replace
338	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	31	None	replace
339	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor,  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
340	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
341	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBounds(gson,  constructor,  type));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBounds(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBounds(gson,  constructor,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor),    constructor));    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
342	[BUG]  [BUGGY]  final  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
343	[BUG]  [BUGGY]  final  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
344	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  constructor;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    type.getRawType();    if(raw!=    null)    {    return    constructor;    }    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	36	None	replace
345	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  constructor));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
346	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  constructor,  type));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
347	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  excluder));  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  excluder));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    scope));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
348	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(constructor,  type,  constructor));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
349	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	45	None	replace
350	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  raw,  null,  fieldNamingPolicy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  raw,  null,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  raw,  null,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
351	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingStrategy,  raw,  null,  type));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingStrategy,  raw,  null,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingStrategy,  raw,  null,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
352	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingPolicy,  excluder));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingPolicy,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  fieldNamingPolicy,  excluder));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	9	None	replace
353	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingStrategy,  type,  null,  raw));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingStrategy,  type,  null,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  fieldNamingStrategy,  type,  null,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
354	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
355	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
356	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  $anonymous0);  [CE]  cannot  find  symbol  $anonymous0  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  $anonymous0);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  $anonymous0);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  $anonymous0	61	None	replace
357	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  name);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  name);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  name	61	None	replace
358	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor,  fieldNamingStrategy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor,  fieldNamingStrategy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type),  constructor,  fieldNamingStrategy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
359	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
360	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  raw);  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  raw);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
361	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor,  raw.newType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor,  raw.newType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor,  raw.newType();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  ';'  expected	77	None	replace
362	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  context.newType();  [CE]  cannot  find  symbol  context  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  context.newType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  context.newType();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  cannot  find  symbol  context	77	None	replace
363	[BUG]  [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  scope);  [CE]  cannot  find  symbol  scope  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  scope);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor!=  null)?  null  :  constructor.create(gson,  scope);	  return(constructor!=    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  scope	55	None	replace
364	[BUG]  [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  context);  [CE]  cannot  find  symbol  context  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  context);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor!=  null)?  null  :  constructor.create(gson,  context);	  return(constructor!=    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  context	55	None	replace
365	[BUG]  [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  value);  [CE]  cannot  find  symbol  value  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor!=  null)?  null  :  constructor.create(gson,  value);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor!=  null)?  null  :  constructor.create(gson,  value);	  return(constructor!=    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  value	55	None	replace
366	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  raw,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(raw,  raw,  type));	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
367	[BUG]  [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(gson,  getBoundFields(raw,  constructor,  type),  constructor);	  return    new    Adapter    <    T>(gson,    getBoundFields(raw,    constructor,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
368	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
369	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type,  null));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
370	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor,  null));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
371	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	65	None	replace
372	[BUG]  [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?  super  T>  constructor  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
373	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type),  constructor));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type),  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type),  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	15	None	replace
374	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  constructor));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  type),  constructor));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	15	None	replace
375	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.create(gson,  context);  [CE]  cannot  find  symbol  context  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.create(gson,  context);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.create(gson,  context);	  return    constructor    ==    null?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  context	74	None	replace
376	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type,  value));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type,  value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type,  value));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
377	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  offsetNamingPolicy);  [CE]  cannot  find  symbol  offsetNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  offsetNamingPolicy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  offsetNamingPolicy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  offsetNamingPolicy	63	None	replace
378	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  factory);  [CE]  cannot  find  symbol  factory  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  factory);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  factory);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  factory	63	None	replace
379	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.newInstance(raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.newInstance(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.newInstance(raw);	  return    constructor    ==    null?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
380	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  name));  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  name));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  name));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserializedName));    	non-compiled	[CE]  cannot  find  symbol  name	70	None	replace
381	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  methodName));  [CE]  cannot  find  symbol  methodName  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  methodName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  methodName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    deserializedName));    	non-compiled	[CE]  cannot  find  symbol  methodName	70	None	replace
382	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  value);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  value);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.create(gson,  value);	  return(constructor    ==    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  value	52	None	replace
383	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  null));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  null));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
384	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  method));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  method));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  method));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
385	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  excluder);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  excluder);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor),  excluder);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
386	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  cannot  find  symbol  exclusionr  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  exclusionr	64	None	replace
387	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  excluder),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
388	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  raw),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	64	None	replace
389	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  raw);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  raw);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	19	None	replace
390	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  deserialized));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
391	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type,  deserialized));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
392	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(raw,  type,  deserialized));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(raw,  type,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(raw,  type,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
393	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  raw,  type));  [CE]  cannot  find  symbol  exclusionr  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  exclusionr	66	None	replace
394	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	66	None	replace
395	[BUG]  [BUGGY]  if(constructor  ==  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null)  {  Class  <?>  raw  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
396	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(constructor  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(constructor  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  constructor  =  constructor.getRawType();  if(constructor  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
397	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructorConstructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?>  raw  =  constructorConstructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?>  raw  =  constructorConstructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
398	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw.type,  type));  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw.type,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw.type,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
399	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
400	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  type),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
401	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(raw,  constructor,  type));  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(raw,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(raw,  constructor,  type));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
402	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  type,  fieldNamingStrategy));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    constructor,    type));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	1	None	replace
403	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  fieldNamingPolicy));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  fieldNamingPolicy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  fieldNamingPolicy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
404	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  false,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  false,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  false,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
405	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  constructor.type));  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  constructor.type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  constructor.type));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
406	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  type,  getBoundFields(gson,  constructor,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  type,  getBoundFields(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  type,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
407	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.getConstructor();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.getConstructor();	  return    constructor    ==    null?    null    :    constructor.create();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
408	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor,  gson));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor,  gson));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(type,  constructor,  gson));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
409	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(type,  gson,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(type,  gson,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(type,  gson,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
410	[BUG]  [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(type,  getBoundFields(gson,  raw,  constructor,  null));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
411	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  null,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  null,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  constructor,  null,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
412	[BUG]  [BUGGY]  return  new  Adapter  <  T>(null,  getBoundFields(gson,  type,  constructor,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(null,  getBoundFields(gson,  type,  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(null,  getBoundFields(gson,  type,  constructor,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
413	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor,  constructor,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
414	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  true));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  raw,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    true));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	21	None	replace
415	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  raw,  constructor));  [CE]  cannot  find  symbol  exclusionr  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  raw,  constructor));	  return    new    Adapter    <    T>(type,    getBoundFields(gson,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  exclusionr	2	None	replace
416	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw,  null,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw,  null,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  constructor,  raw,  null,  type));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
417	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  excluder));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  excluder));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  excluder));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
418	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
419	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  fieldNamingPolicy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  fieldNamingPolicy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  fieldNamingPolicy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
420	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  excluder);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  excluder);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  excluder);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
421	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  constraint);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  constraint);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  constraint);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
422	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  offset);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  offset);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  offset);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
423	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  method);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  method);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  method);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
424	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw),  constructor,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  ';'  expected	15	None	replace
425	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	15	None	replace
426	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  type,  constructor),  constructor);	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
427	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.newObject();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.newObject();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.newObject();	  return    constructor    ==    null?    null    :    constructor.newType();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
428	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  true));  [CE]  cannot  find  symbol  extern  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  true));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  true));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    true));    	non-compiled	[CE]  cannot  find  symbol  extern	21	None	replace
429	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serializedName));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized));    	non-compiled	[CE]  ';'  expected	78	None	replace
430	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raw  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
431	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  null,  raw));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  null,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  null,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
432	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  raw,  null,  constructor));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy,  raw,  null,  constructor));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    fieldNamingPolicy));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
433	[BUG]  [BUGGY]  if(constructor!=  null  ||  constructor.isInterface())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null  ||  constructor.isInterface())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null  ||  constructor.isInterface())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
434	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raw!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
435	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(type,  gson,  raw));  [CE]  cannot  find  symbol  compiler  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(type,  gson,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(type,  gson,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(type,    gson,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	44	None	replace
436	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  deserialized));  [CE]  cannot  find  symbol  deserialized  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  deserialized	27	None	replace
437	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  deserializedName));  [CE]  cannot  find  symbol  deserializedName  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  deserializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  deserializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  deserializedName	27	None	replace
438	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  method));  [CE]  cannot  find  symbol  method  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  method));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  method));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  method	27	None	replace
439	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  deserializedName));  [CE]  cannot  find  symbol  deserializedName  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  deserializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  deserializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  cannot  find  symbol  deserializedName	4	None	replace
440	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  deserialized));  [CE]  cannot  find  symbol  deserialized  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    constructor));    	non-compiled	[CE]  cannot  find  symbol  deserialized	4	None	replace
441	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson,  type,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor.deserialize(gson,  type,  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor.deserialize(gson,  type,  raw);	  return    constructor    ==    null?    null    :    constructor.deserialize(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
442	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(constructor,  type,  raw));  [CE]  cannot  find  symbol  exclusion  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(constructor,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(constructor,  type,  raw));	  return    new    Adapter    <    T>(raw,    getBoundFields(constructor,    type,    type));    	non-compiled	[CE]  cannot  find  symbol  exclusion	45	None	replace
443	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  deserializedName);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  deserializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  deserializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
444	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  deserialized);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  deserialized);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null),  constructor,  deserialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
445	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  raw.type);  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  raw.type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  raw.type);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
446	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  constructor);  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
447	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  constructor.type);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  constructor.type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw.type),  constructor.type);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw.type));    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
448	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false,  raw));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  false,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
449	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  null,  false));  [CE]  cannot  find  symbol  extern  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  null,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  null,  false));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    false));    	non-compiled	[CE]  cannot  find  symbol  extern	7	None	replace
450	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory,  false));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  factory,  false));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    false));    	non-compiled	[CE]  cannot  find  symbol  compiler	68	None	replace
451	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  deserialized));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
452	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  raw));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
453	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  deserializedName));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  deserializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  fieldNamingStrategy),  constructor,  deserializedName));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy));    	non-compiled	[CE]  ';'  expected	20	None	replace
454	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  raw,  type));  [CE]  cannot  find  symbol  exclusion  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusion,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  exclusion	66	None	replace
455	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  sourceFile),  constructor);  [CE]  cannot  find  symbol  sourceFile  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  sourceFile),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  sourceFile),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    scope),    constructor);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	30	None	replace
456	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  factory,  constructor);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  factory,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  factory,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    scope),    constructor);    	non-compiled	[CE]  ')'  expected	30	None	replace
457	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  methodNamingPolicy);  [CE]  cannot  find  symbol  methodNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  methodNamingPolicy);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  methodNamingPolicy);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  methodNamingPolicy	63	None	replace
458	[BUG]  [BUGGY]  if(constructor  ==  null  ||  constructor.isPrimitive())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null  ||  constructor.isPrimitive())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null  ||  constructor.isPrimitive())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
459	[BUG]  [BUGGY]  if(constructor  ==  null  ||  constructor.isInterface())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor  ==  null  ||  constructor.isInterface())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor  ==  null  ||  constructor.isInterface())  {  Class  <?  super  T>  raw  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
460	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  deserialized));  [CE]  cannot  find  symbol  deserialized  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor,  deserialized));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  deserialized	19	None	replace
461	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  constructor.create(gson,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  constructor.create(gson,  constructor);	  return(constructor!=    null)?    null    :    constructor.create(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
462	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  deserialized),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  deserialized),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  deserialized),  constructor);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    deserialized));    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
463	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  deserialized);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  deserialized);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  deserialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
464	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  deserializedName);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  deserializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false),  constructor,  deserializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	40	None	replace
465	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.annotationType()));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.annotationType()));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.annotationType()));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	12	None	replace
466	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  scope);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  scope);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor),  scope);	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	12	None	replace
467	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.getFactory()));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.getFactory()));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor.getFactory()));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    factory));    	non-compiled	[CE]  cannot  find  symbol  compiler	58	None	replace
468	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  fieldNamingStrategy));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  fieldNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  constructor,  getBoundFields(gson,  type,  fieldNamingStrategy));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	3	None	replace
469	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  type));  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  type,  type));	  return    new    Adapter    <    T>(raw,    constructor,    getBoundFields(gson,    type,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
470	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor,  deserializedName);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor,  deserializedName);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor),  constructor,  deserializedName);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
471	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingStrategy),  constructor);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingStrategy),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  constructor,  fieldNamingStrategy),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    constructor),    constructor);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	32	None	replace
472	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  beanDesc,  raw),  constructor,  beanDesc);  [CE]  cannot  find  symbol  beanDesc  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  beanDesc,  raw),  constructor,  beanDesc);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  beanDesc,  raw),  constructor,  beanDesc);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserializedName);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	61	None	replace
473	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  raw,  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  raw,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  constructor),  raw,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    constructor),    constructor);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
474	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  offset));  [CE]  cannot  find  symbol  offset  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  offset));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  offset));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  cannot  find  symbol  offset	6	None	replace
475	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  arrayFactory));  [CE]  cannot  find  symbol  arrayFactory  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  arrayFactory));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  arrayFactory));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    scope));    	non-compiled	[CE]  cannot  find  symbol  arrayFactory	6	None	replace
476	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclude,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  exclude  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclude,  getBoundFields(gson,  type,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclude,  getBoundFields(gson,  type,  raw));	  return    new    Adapter    <    T>(extern,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  cannot  find  symbol  exclude	65	None	replace
477	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  value));  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  value));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  constructor,  value));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    value));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
478	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserialize));  [CE]  cannot  find  symbol  deserialize  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserialize));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  deserialize));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    serializedName));    	non-compiled	[CE]  cannot  find  symbol  deserialize	5	None	replace
479	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  constructor  =  constructor.getRawType();	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
480	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  constructor  =  constructor.getRawType();  if(raw  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw    ==    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
481	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  this.serializedName));  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  this.serializedName));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  constructor,  this.serializedName));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    constructor,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	50	None	replace
482	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  constructor));  [CE]  cannot  find  symbol  compiler  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  raw,  constructor));	  return    new    Adapter    <    T>(type,    getBoundFields(gson,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  compiler	2	None	replace
483	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  constructor));  [CE]  cannot  find  symbol  extern  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  constructor));	  return    new    Adapter    <    T>(type,    getBoundFields(gson,    raw,    constructor));    	non-compiled	[CE]  cannot  find  symbol  extern	2	None	replace
484	[BUG]  [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw,  null));  [CE]  cannot  find  symbol  buildor  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw,  null));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  cannot  find  symbol  buildor	46	None	replace
485	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  constructor,  null));  [CE]  cannot  find  symbol  extern  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  constructor,  null));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  constructor,  null));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    null));    	non-compiled	[CE]  cannot  find  symbol  extern	46	None	replace
486	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  type),  constructor);  [CE]  cannot  find  symbol  extern  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  raw,  type),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    raw,    type),    constructor);    	non-compiled	[CE]  cannot  find  symbol  extern	41	None	replace
487	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  factory),  constructor,  deserialized);  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  factory),  constructor,  deserialized);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  factory),  constructor,  deserialized);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  factory	62	None	replace
488	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialization);  [CE]  cannot  find  symbol  serialization  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialization);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  serialization);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    deserialized);    	non-compiled	[CE]  cannot  find  symbol  serialization	62	None	replace
489	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  constructor,  type));  [CE]  cannot  find  symbol  extern  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  constructor,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  constructor,  type));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    constructor,    type));    	non-compiled	[CE]  cannot  find  symbol  extern	1	None	replace
490	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  methodName,  constructor),  constructor);  [CE]  cannot  find  symbol  methodName  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  methodName,  constructor),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  methodName,  constructor),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  cannot  find  symbol  methodName	29	None	replace
491	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  baseUri),  constructor);  [CE]  cannot  find  symbol  baseUri  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  baseUri),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  baseUri),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    value),    constructor);    	non-compiled	[CE]  cannot  find  symbol  baseUri	29	None	replace
492	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  methodNamingStrategy));  [CE]  cannot  find  symbol  methodNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  methodNamingStrategy));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  methodNamingStrategy));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    fieldNamingStrategy));    	non-compiled	[CE]  cannot  find  symbol  methodNamingStrategy	25	None	replace
493	[BUG]  [BUGGY]  return(constructor  ==  null)?  null  :  buildor.newInstance();  [CE]  cannot  find  symbol  buildor  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return(constructor  ==  null)?  null  :  buildor.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return(constructor  ==  null)?  null  :  buildor.newInstance();	  return(constructor    ==    null)?    null    :    constructor.newInstance();    	non-compiled	[CE]  cannot  find  symbol  buildor	53	None	replace
494	[BUG]  [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw,  false));  [CE]  cannot  find  symbol  buildor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw,  false));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw,  false));	  return    new    Adapter    <    T>(raw,    getBoundFields(gson,    type,    constructor,    false));    	non-compiled	[CE]  cannot  find  symbol  buildor	22	None	replace
495	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  deserialized));  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  deserialized));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  null,  deserialized));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  compiler	13	None	replace
496	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  Constructor  <?>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	Constructor  <?>  constructor  =  constructor.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(constructor    ==    null)    {    Class    <?>    raw    =    constructor.getRawType();    if(raw!=    null)    {    return    raw;    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
497	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false,  raw),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	67	None	replace
498	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false,  raw));  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw,  false,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  cannot  find  symbol  compiler	67	None	replace
499	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  false,  raw));  [CE]  cannot  find  symbol  extern  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  false,  raw));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw,  false,  raw));	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    false,    raw));    	non-compiled	[CE]  cannot  find  symbol  extern	67	None	replace
500	[BUG]  [BUGGY]  return  constructor  ==  null?  null  :  constructor,  raw.newInstance();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  constructor  ==  null?  null  :  constructor,  raw.newInstance();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  constructor  ==  null?  null  :  constructor,  raw.newInstance();	  return    constructor    ==    null?    null    :    constructor.newInstance();    	non-compiled	[CE]  ';'  expected	73	None	replace
501	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raf  ==  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raf  ==  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raf  ==  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf    ==    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
502	[BUG]  [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	final  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor));	  final    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
503	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  raw,  type));  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  raw,  type));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  constructor,  getBoundFields(gson,  raw,  type));	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
504	[BUG]  [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw,  null,  constructor));  [CE]  cannot  find  symbol  exclusionr  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw,  null,  constructor));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(exclusionr,  getBoundFields(gson,  type,  raw,  null,  constructor));	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    type,    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  exclusionr	48	None	replace
505	[BUG]  [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type),  constructor);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(excluder,  getBoundFields(gson,  raw,  type),  constructor);	  return    new    Adapter    <    T>(excluder,    getBoundFields(gson,    raw,    type));    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
506	[BUG]  [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raf!=  null)  {  return  raw;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raf!=  null)  {  return  raw;  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	if(constructor!=  null)  {  Class  <?  super  T>  raw  =  constructor.getRawClass();  if(raf!=  null)  {  return  raw;  }	  if(constructor!=    null)    {    Class    <?    super    T>    raw    =    constructor.getRawType();    if(raf!=    null)    {    return    raw;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
507	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)||  constructor.isInterface());  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)||  constructor.isInterface());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw)||  constructor.isInterface());	  return    new    Adapter    <    T>(compiler,    getBoundFields(gson,    type,    raw),    constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
508	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserializedName,  constructor);  [CE]  cannot  find  symbol  deserializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserializedName,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor,  deserializedName,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	31	None	replace
509	[BUG]  [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [CE]  cannot  find  symbol  extern  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw),  constructor,  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(extern,  getBoundFields(gson,  type,  raw),  constructor,  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw),    constructor,    constructor);    	non-compiled	[CE]  cannot  find  symbol  extern	31	None	replace
510	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  method),  constructor);  [CE]  cannot  find  symbol  method  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);      [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  method),  constructor);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null,  method),  constructor);	  return    new    Adapter    <    T>(constructor,    getBoundFields(gson,    type,    raw,    null,    method));    	non-compiled	[CE]  cannot  find  symbol  method	8	None	replace
