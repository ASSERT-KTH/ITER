bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(raw,  getBoundFields(gson,  type,  constructor));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
2	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor);  [CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor);  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor);	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  constructor  Adapter  in  class  Adapter<T#2>  cannot  be  applied  to  given  types;	31	None	replace
3	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  null));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
4	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw,  false));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
5	[BUG]  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  compiler  [FE]            ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(compiler,  getBoundFields(gson,  type,  raw));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  cannot  find  symbol  compiler	31	None	replace
6	[BUG]  [BUGGY]    [CE]  missing  return  statement  [FE]              ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]    [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	  	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  missing  return  statement	31	None	replace
7	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type));  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  raw,  type));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
8	[BUG]  [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw));  [CE]  cannot  find  symbol  buildor  [FE]      ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(buildor,  getBoundFields(gson,  type,  raw));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  cannot  find  symbol  buildor	31	None	replace
9	[BUG]  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor));  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  [BUGGY]  return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor));  [BUGGY]  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	100	100	1	replace	return  new  Adapter  <  T>(constructor,  getBoundFields(gson,  type,  raw),  constructor));	return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  	non-compiled	[CE]  ';'  expected	31	None	replace
