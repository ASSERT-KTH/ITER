bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Field  field  :  declaredType.getFields())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  declaredType.getFields())  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  declaredType.getFields())  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol	59	None	replace
2	[BUG]  [BUGGY]  for(Field  field  :  declaredType.fields)  {  [CE]  cannot  find  symbol  fields  [FE]      ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  declaredType.fields)  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  declaredType.fields)  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol  fields	59	None	replace
3	[BUG]  [BUGGY]  for(Field  field  :  fields.toArray(new  Field[fields.size()  ]))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  fields.toArray(new  Field[fields.size()  ]))  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  fields.toArray(new  Field[fields.size()  ]))  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol	59	None	replace
4	[BUG]  [BUGGY]  for(Field  field  :  fields.length)  {  [CE]  for-each  not  applicable  to  expression  type  [FE]          ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  fields.length)  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  fields.length)  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  for-each  not  applicable  to  expression  type	59	None	replace
5	[BUG]  [BUGGY]  for(Field  field  :  declaredType.getFields)  {  [CE]  cannot  find  symbol  getFields  [FE]            ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  declaredType.getFields)  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  declaredType.getFields)  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol  getFields	59	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]    [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	  	for  (Field  field  :  fields)  {  	non-compiled	[CE]  illegal  start  of  type	59	None	replace
7	[BUG]  [BUGGY]  for(Field  field  :  fields.values())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  fields.values())  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  fields.values())  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol	59	None	replace
8	[BUG]  [BUGGY]  for(Field  field  :  fields.keySet())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  fields.keySet())  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  fields.keySet())  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol	59	None	replace
9	[BUG]  [BUGGY]  for(Field  field  :  fields.toArray(new  String[fields.size()  ]))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  fields.toArray(new  String[fields.size()  ]))  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  fields.toArray(new  String[fields.size()  ]))  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol	59	None	replace
10	[BUG]  [BUGGY]  for(Field  field  :  fields.toArray(new  Type[fields.size()  ]))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]  for(Field  field  :  fields.toArray(new  Type[fields.size()  ]))  {  [BUGGY]  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	150	150	1	replace	for(Field  field  :  fields.toArray(new  Type[fields.size()  ]))  {	for  (Field  field  :  fields)  {  	non-compiled	[CE]  cannot  find  symbol	59	None	replace
