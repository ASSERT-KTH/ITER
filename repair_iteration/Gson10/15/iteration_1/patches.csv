bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw);  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  incompatible  types	1	None	replace
2	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(raw);  [CE]  cannot  find  symbol  types  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol  types	1	None	replace
3	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(type);  [CE]  cannot  find  symbol  types  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol  types	1	None	replace
4	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type,  type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(type,  type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get();  [CE]  no  suitable  method  found  for  get()  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get();	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get()	1	None	replace
6	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(type);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol  scope	1	None	replace
7	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
8	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
9	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
10	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
11	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
12	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(constructor);  [CE]  no  suitable  method  found  for  get(ObjectConstructor<T#1>)  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(constructor);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get(ObjectConstructor<T#1>)	11	None	replace
13	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(constraint);  [CE]  cannot  find  symbol  constraint  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(constraint);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(constraint);	  ObjectConstructor    <    T>    constructor    =    constructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constraint	11	None	replace
14	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(type);  [CE]  no  suitable  method  found  for  get(TypeToken<T#1>)  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(type);	  ObjectConstructor    <    T>    constructor    =    constructor.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<T#1>)	11	None	replace
15	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(compiler);  [CE]  cannot  find  symbol  compiler  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(compiler);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(compiler);	  ObjectConstructor    <    T>    constructor    =    constructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  compiler	11	None	replace
16	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  TypeToken  <  T>  constructor  =  type.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
17	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
18	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
19	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
20	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getRawType();  [CE]  incompatible  types  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  TypeToken  <  T>  constructor  =  type.getRawType();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getRawType();	      	non-compiled	[CE]  incompatible  types	8	None	replace
21	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
22	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  type.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
23	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.build();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
24	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.build();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
25	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
26	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  _constructor.build();  [CE]  cannot  find  symbol  _constructor  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  _constructor.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  _constructor.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol  _constructor	15	None	replace
27	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.build();  [CE]  cannot  find  symbol  scope  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol  scope	15	None	replace
28	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.build();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
29	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	13	None	replace
30	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	13	None	replace
31	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
32	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	13	None	replace
33	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
34	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	13	None	replace
35	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getConstructor(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getConstructor(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson,  type.getConstructor();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson,  type.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson,  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  ';'  expected	7	None	replace
37	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  scope	7	None	replace
38	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.getConstructor());  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(type.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
39	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
40	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
41	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  scope);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  scope);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  scope);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol  scope	5	None	replace
42	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
43	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
44	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
45	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
46	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
47	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
48	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
49	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
50	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
51	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(constructor);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(constructor);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(constraint);  [CE]  cannot  find  symbol  constraint  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(constraint);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(constraint);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol  constraint	9	None	replace
53	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(compiler);  [CE]  cannot  find  symbol  compiler  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(compiler);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(compiler);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
54	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(spec);  [CE]  cannot  find  symbol  spec  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(spec);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(spec);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol  spec	9	None	replace
55	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(factory);  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(factory);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(factory);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol  factory	9	None	replace
56	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	12	None	replace
57	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(constructor);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(constructor);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
58	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(raw);  [CE]  cannot  find  symbol  context  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  context	12	None	replace
59	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	12	None	replace
60	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
61	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	12	None	replace
62	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson);  [CE]  method  construct  in  interface  ObjectConstructor<T>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T>  cannot  be  applied  to  given  types;	12	None	replace
63	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(constructor);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(constructor);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
64	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  raw);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	14	None	replace
65	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(type);  [CE]  cannot  find  symbol  context  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type);    	non-compiled	[CE]  cannot  find  symbol  context	14	None	replace
66	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(grails,  type);  [CE]  cannot  find  symbol  grails  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(grails,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(grails,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type);    	non-compiled	[CE]  cannot  find  symbol  grails	14	None	replace
67	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.getConstructor();  [CE]  cannot  find  symbol  type  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	2	None	replace
68	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor(raw);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
69	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructor();	  ObjectConstructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.getConstructor();  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.getConstructor();	  ObjectConstructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  types	2	None	replace
71	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor();	  ObjectConstructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	4	None	replace
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	4	1	replace
74	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	4	1	replace
75	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  NullPointerException  	4	9	replace
76	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  NullPointerException  	4	9	replace
77	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type);  [CE]  cannot  find  symbol  constructorConstructor  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	4	None	replace
78	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	4	1	replace
79	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	4	1	replace
80	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
81	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
82	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  >=  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  ObjectConstructor  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  >=  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor  >=  T>  constructor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  cannot  find  symbol  ObjectConstructor	3	None	add
83	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class  <?>  constructor  =  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
84	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
85	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(type);  [CE]  cannot  find  symbol  target  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  target.get(type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol  target	1	None	replace
86	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  input.get(type);  [CE]  cannot  find  symbol  input  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  input.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  input.get(type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol  input	1	None	replace
87	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(raw);  [CE]  cannot  find  symbol  scope  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(type);    	non-compiled	[CE]  cannot  find  symbol  scope	1	None	replace
88	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw.getRawClass());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw.getRawClass());  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
89	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
90	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.build();  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol  factory	15	None	replace
91	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  builder.build();  [CE]  cannot  find  symbol  builder  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  builder.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  builder.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol  builder	15	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw);  [CE]  cannot  find  symbol  compiler  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  raw);	      	non-compiled	[CE]  cannot  find  symbol  compiler	8	None	replace
93	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.getConstructor();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  TypeToken  <  T>  constructor  =  gson.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>());  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>());	      	non-compiled	[CE]  cannot  find  symbol  compiler	8	None	replace
95	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class.getRawType();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  TypeToken  <  T>  constructor  =  Object.class.getRawType();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class.getRawType();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
96	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
97	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  null);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  null);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  null);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	12	None	replace
98	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
99	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  type);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
100	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.getConstructor();  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.getConstructor();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.getConstructor();	  ObjectConstructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  incompatible  types	2	None	replace
101	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.findConstructor(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.findConstructor(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
102	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
103	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    constructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
104	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  name);  [CE]  cannot  find  symbol  name  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  name);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  name);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
105	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  null);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	13	None	replace
106	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type));  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type);    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	14	None	replace
107	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  types);  [CE]  cannot  find  symbol  types  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  types);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  types);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol  types	5	None	replace
108	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawType();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
109	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(raw);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
110	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	3	None	add
111	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(raw);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(raw);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
112	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(extern);  [CE]  cannot  find  symbol  extern  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(extern);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(extern);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol  extern	9	None	replace
113	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
114	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(type);  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
115	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.build();  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }    [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.build();  [BUGGY]    return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor.build();	  ObjectConstructor    <    T>    constructor    =    constructor.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	15	None	replace
