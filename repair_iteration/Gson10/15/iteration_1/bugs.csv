bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(type);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
2	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor();  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.getConstructor();	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	compilable	  [FE]  ComparisonFailure  	29	1	replace
4	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	compilable	  [FE]  ComparisonFailure  	29	1	replace
5	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
6	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
7	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getConstructor();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getConstructor();  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.getConstructor();	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]    [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	  	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol  constructor	29	None	replace
9	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raw);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
10	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
11	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(type);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(type);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(type);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
12	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	29	None	replace
13	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	29	None	replace
14	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type);  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(type);	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	29	None	replace
15	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.build();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure  [CONTEXT]  @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.build();  [BUGGY]  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.build();	ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
